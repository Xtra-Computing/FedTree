set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

set (SCIKIT_DIST_SRC "${CMAKE_CURRENT_LIST_DIR}/scikit_fedtree_distributed.cpp")

file(GLOB DIST_SRC util/*.c* DP/*.c* FL/*.c* Tree/*.c* Encryption/*.c* objective/*.c* metric/*.c* *.c*)
if(USE_CUDA)
    list(REMOVE_ITEM DIST_SRC "${CMAKE_CURRENT_LIST_DIR}/Encryption/paillier.cpp")
else()
    list(REMOVE_ITEM DIST_SRC "${CMAKE_CURRENT_LIST_DIR}/Encryption/paillier_gpu.cu")
endif()

list(REMOVE_ITEM DIST_SRC ${SCIKIT_DIST_SRC})
list(REMOVE_ITEM DIST_SRC "${CMAKE_CURRENT_LIST_DIR}/fedtree_train.cpp" "${CMAKE_CURRENT_LIST_DIR}/fedtree_predict.cpp" "${CMAKE_CURRENT_LIST_DIR}/fedtree_distributed_party.cpp" "${CMAKE_CURRENT_LIST_DIR}/fedtree_distributed_server.cpp")
# SIM_SRC for simulation
set(SIM_SRC ${DIST_SRC})
list(REMOVE_ITEM SIM_SRC "${CMAKE_CURRENT_LIST_DIR}/FL/distributed_party.cpp" "${CMAKE_CURRENT_LIST_DIR}/FL/distributed_server.cpp")
find_library(NTL_LIB ntl ${NTL_PATH}/lib)
if(NOT NTL_LIB)
    message(FATAL_ERROR "ntl library not found.  Rerun cmake with -DCMAKE_PREFIX_PATH=\"<path to lib1>;<path to lib2>\"")
endif ()
find_library(M_LIB m)
if (NOT M_LIB)
    message(FATAL_ERROR "m library not found.  Rerun cmake with -DCMAKE_PREFIX_PATH=\"<path to lib1>;<path to lib2>\"")
endif ()
find_library(GMP_LIB gmp)
if (NOT GMP_LIB)
    message(FATAL_ERROR "gmp library not found.  Rerun cmake with -DCMAKE_PREFIX_PATH=\"<path to lib1>;<path to lib2>\"")
endif ()
find_library(GMPXX_LIB gmpxx)
if (DISTRIBUTED)
    #include_directories(${PROJECT_SOURCE_DIR}/build/_deps/grpc-src/third_party/protobuf/src/)
    #include_directories(${PROJECT_SOURCE_DIR}/build/_deps/grpc-src/include/)

	set(ft_proto_srcs "grpc/fedtree.pb.cc")
    set(ft_proto_hdrs "grpc/fedtree.pb.h")
    set(ft_grpc_srcs "grpc/fedtree.grpc.pb.cc")
    set(ft_grpc_hdrs "grpc/fedtree.grpc.pb.h")

    add_library(ft_grpc_proto STATIC ${ft_grpc_srcs} ${ft_grpc_hdrs} ${ft_proto_srcs} ${ft_proto_hdrs})
    target_link_libraries(ft_grpc_proto gRPC::grpc++)
endif ()

if (USE_CUDA)
    cuda_add_library(${PROJECT_NAME} SHARED ${SIM_SRC})
    target_link_libraries(${PROJECT_NAME} ThrustOMP ${CUDA_cusparse_LIBRARY} ${NTL_LIB} ${M_LIB} ${GMP_LIB} ${GMPXX_LIB})
    cuda_add_executable(${PROJECT_NAME}-train fedtree_train.cpp ${COMMON_INCLUDES})
    cuda_add_executable(${PROJECT_NAME}-predict fedtree_predict.cpp ${COMMON_INCLUDES})
    if (DISTRIBUTED)
        cuda_add_library(${PROJECT_NAME}_DIST STATIC ${DIST_SRC})
        cuda_add_library(${PROJECT_NAME}_DIST_SCIKIT SHARED ${DIST_SRC} ${SCIKIT_DIST_SRC})
        target_link_libraries(${PROJECT_NAME}_DIST ThrustOMP ${CUDA_cusparse_LIBRARY} ${NTL_LIB} ${M_LIB} ${GMP_LIB})
        target_link_libraries(${PROJECT_NAME}_DIST_SCIKIT ft_grpc_proto ThrustOMP ${CUDA_cusparse_LIBRARY} ${NTL_LIB} ${M_LIB} ${GMP_LIB})
        cuda_add_executable(${PROJECT_NAME}-distributed-party fedtree_distributed_party.cpp)
        cuda_add_executable(${PROJECT_NAME}-distributed-server fedtree_distributed_server.cpp)
    endif ()
else ()
    add_library(${PROJECT_NAME} SHARED ${SIM_SRC})
    target_link_libraries(${PROJECT_NAME} ThrustOMP ${NTL_LIB} ${M_LIB} ${GMP_LIB} ${GMPXX_LIB})
    add_executable(${PROJECT_NAME}-train fedtree_train.cpp)
    add_executable(${PROJECT_NAME}-predict fedtree_predict.cpp)
    if (DISTRIBUTED)
        add_library(${PROJECT_NAME}_DIST STATIC ${DIST_SRC})
        add_library(${PROJECT_NAME}_DIST_SCIKIT SHARED ${DIST_SRC} ${SCIKIT_DIST_SRC})
        target_link_libraries(${PROJECT_NAME}_DIST ThrustOMP ${NTL_LIB} ${M_LIB} ${GMP_LIB} ${GMPXX_LIB})
        target_link_libraries(${PROJECT_NAME}_DIST_SCIKIT ft_grpc_proto ThrustOMP ${NTL_LIB} ${M_LIB} ${GMP_LIB} ${GMPXX_LIB})
        add_executable(${PROJECT_NAME}-distributed-party fedtree_distributed_party.cpp)
        add_executable(${PROJECT_NAME}-distributed-server fedtree_distributed_server.cpp)
    endif ()
endif ()
if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    if (DISTRIBUTED)
        target_link_libraries(${PROJECT_NAME}_DIST OpenMP::OpenMP_CXX)
        target_link_libraries(${PROJECT_NAME}_DIST_SCIKIT OpenMP::OpenMP_CXX)
    endif ()
    target_link_libraries(${PROJECT_NAME} OpenMP::OpenMP_CXX)
endif ()
target_link_libraries(${PROJECT_NAME}-train ${PROJECT_NAME})
target_link_libraries(${PROJECT_NAME}-predict ${PROJECT_NAME})
if (DISTRIBUTED)
    foreach(_target ${PROJECT_NAME}-distributed-party ${PROJECT_NAME}-distributed-server)
        target_link_libraries(${_target} ${PROJECT_NAME}_DIST)
        target_link_libraries(${_target} ft_grpc_proto)
	#target_link_libraries(${_target} gRPC::grpc++)
    endforeach()
endif ()
