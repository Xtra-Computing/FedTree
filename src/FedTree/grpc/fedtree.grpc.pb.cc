// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: fedtree.proto

#include "fedtree.pb.h"
#include "fedtree.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace fedtree {

static const char* FedTree_method_names[] = {
  "/fedtree.FedTree/TriggerUpdateGradients",
  "/fedtree.FedTree/TriggerBuildInit",
  "/fedtree.FedTree/GetGradients",
  "/fedtree.FedTree/SendDatasetInfo",
  "/fedtree.FedTree/SendHistograms",
  "/fedtree.FedTree/SendHistFid",
  "/fedtree.FedTree/TriggerAggregate",
  "/fedtree.FedTree/GetBestInfo",
  "/fedtree.FedTree/SendNode",
  "/fedtree.FedTree/SendIns2NodeID",
  "/fedtree.FedTree/GetNodes",
  "/fedtree.FedTree/GetIns2NodeID",
  "/fedtree.FedTree/CheckIfContinue",
  "/fedtree.FedTree/TriggerPrune",
  "/fedtree.FedTree/TriggerPrintScore",
  "/fedtree.FedTree/SendRange",
  "/fedtree.FedTree/TriggerCut",
  "/fedtree.FedTree/GetRange",
  "/fedtree.FedTree/SendGH",
  "/fedtree.FedTree/SendDHPubKey",
  "/fedtree.FedTree/GetDHPubKeys",
  "/fedtree.FedTree/SendNoises",
  "/fedtree.FedTree/GetNoises",
  "/fedtree.FedTree/SendCutPoints",
  "/fedtree.FedTree/GetCutPoints",
  "/fedtree.FedTree/TriggerBuildUsingGH",
  "/fedtree.FedTree/TriggerCalcTree",
  "/fedtree.FedTree/GetRootNode",
  "/fedtree.FedTree/GetSplitPoints",
  "/fedtree.FedTree/HCheckIfContinue",
  "/fedtree.FedTree/ScoreReduce",
  "/fedtree.FedTree/TriggerHomoInit",
  "/fedtree.FedTree/TriggerSAInit",
  "/fedtree.FedTree/GetPaillier",
  "/fedtree.FedTree/SendHistogramsEnc",
  "/fedtree.FedTree/SendBatchedHistograms",
  "/fedtree.FedTree/SendHistogramBatches",
  "/fedtree.FedTree/SendHistFidBatches",
  "/fedtree.FedTree/GetIns2NodeIDBatches",
  "/fedtree.FedTree/SendIns2NodeIDBatches",
  "/fedtree.FedTree/GetGradientBatches",
  "/fedtree.FedTree/GetGradientBatchesEnc",
  "/fedtree.FedTree/SendNodeEnc",
  "/fedtree.FedTree/SendNodes",
  "/fedtree.FedTree/SendNodesEnc",
  "/fedtree.FedTree/SendHistogramBatchesEnc",
  "/fedtree.FedTree/StopServer",
  "/fedtree.FedTree/BeginBarrier",
};

std::unique_ptr< FedTree::Stub> FedTree::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FedTree::Stub> stub(new FedTree::Stub(channel, options));
  return stub;
}

FedTree::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_TriggerUpdateGradients_(FedTree_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TriggerBuildInit_(FedTree_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetGradients_(FedTree_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SendDatasetInfo_(FedTree_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendHistograms_(FedTree_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_SendHistFid_(FedTree_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_TriggerAggregate_(FedTree_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBestInfo_(FedTree_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SendNode_(FedTree_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendIns2NodeID_(FedTree_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_GetNodes_(FedTree_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetIns2NodeID_(FedTree_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_CheckIfContinue_(FedTree_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TriggerPrune_(FedTree_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TriggerPrintScore_(FedTree_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendRange_(FedTree_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_TriggerCut_(FedTree_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRange_(FedTree_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SendGH_(FedTree_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendDHPubKey_(FedTree_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDHPubKeys_(FedTree_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SendNoises_(FedTree_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNoises_(FedTree_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SendCutPoints_(FedTree_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCutPoints_(FedTree_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_TriggerBuildUsingGH_(FedTree_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TriggerCalcTree_(FedTree_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRootNode_(FedTree_method_names[27], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSplitPoints_(FedTree_method_names[28], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_HCheckIfContinue_(FedTree_method_names[29], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ScoreReduce_(FedTree_method_names[30], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TriggerHomoInit_(FedTree_method_names[31], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TriggerSAInit_(FedTree_method_names[32], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPaillier_(FedTree_method_names[33], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendHistogramsEnc_(FedTree_method_names[34], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_SendBatchedHistograms_(FedTree_method_names[35], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendHistogramBatches_(FedTree_method_names[36], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_SendHistFidBatches_(FedTree_method_names[37], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_GetIns2NodeIDBatches_(FedTree_method_names[38], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SendIns2NodeIDBatches_(FedTree_method_names[39], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_GetGradientBatches_(FedTree_method_names[40], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetGradientBatchesEnc_(FedTree_method_names[41], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SendNodeEnc_(FedTree_method_names[42], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendNodes_(FedTree_method_names[43], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendNodesEnc_(FedTree_method_names[44], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendHistogramBatchesEnc_(FedTree_method_names[45], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_StopServer_(FedTree_method_names[46], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BeginBarrier_(FedTree_method_names[47], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FedTree::Stub::TriggerUpdateGradients(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TriggerUpdateGradients_, context, request, response);
}

void FedTree::Stub::async::TriggerUpdateGradients(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TriggerUpdateGradients_, context, request, response, std::move(f));
}

void FedTree::Stub::async::TriggerUpdateGradients(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TriggerUpdateGradients_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* FedTree::Stub::PrepareAsyncTriggerUpdateGradientsRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fedtree::Ready, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TriggerUpdateGradients_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* FedTree::Stub::AsyncTriggerUpdateGradientsRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTriggerUpdateGradientsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FedTree::Stub::TriggerBuildInit(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TriggerBuildInit_, context, request, response);
}

void FedTree::Stub::async::TriggerBuildInit(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TriggerBuildInit_, context, request, response, std::move(f));
}

void FedTree::Stub::async::TriggerBuildInit(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TriggerBuildInit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* FedTree::Stub::PrepareAsyncTriggerBuildInitRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fedtree::Ready, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TriggerBuildInit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* FedTree::Stub::AsyncTriggerBuildInitRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTriggerBuildInitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::fedtree::GHPair>* FedTree::Stub::GetGradientsRaw(::grpc::ClientContext* context, const ::fedtree::PID& request) {
  return ::grpc::internal::ClientReaderFactory< ::fedtree::GHPair>::Create(channel_.get(), rpcmethod_GetGradients_, context, request);
}

void FedTree::Stub::async::GetGradients(::grpc::ClientContext* context, const ::fedtree::PID* request, ::grpc::ClientReadReactor< ::fedtree::GHPair>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::fedtree::GHPair>::Create(stub_->channel_.get(), stub_->rpcmethod_GetGradients_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::fedtree::GHPair>* FedTree::Stub::AsyncGetGradientsRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::fedtree::GHPair>::Create(channel_.get(), cq, rpcmethod_GetGradients_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::fedtree::GHPair>* FedTree::Stub::PrepareAsyncGetGradientsRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::fedtree::GHPair>::Create(channel_.get(), cq, rpcmethod_GetGradients_, context, request, false, nullptr);
}

::grpc::Status FedTree::Stub::SendDatasetInfo(::grpc::ClientContext* context, const ::fedtree::DatasetInfo& request, ::fedtree::PID* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fedtree::DatasetInfo, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendDatasetInfo_, context, request, response);
}

void FedTree::Stub::async::SendDatasetInfo(::grpc::ClientContext* context, const ::fedtree::DatasetInfo* request, ::fedtree::PID* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fedtree::DatasetInfo, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendDatasetInfo_, context, request, response, std::move(f));
}

void FedTree::Stub::async::SendDatasetInfo(::grpc::ClientContext* context, const ::fedtree::DatasetInfo* request, ::fedtree::PID* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendDatasetInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fedtree::PID>* FedTree::Stub::PrepareAsyncSendDatasetInfoRaw(::grpc::ClientContext* context, const ::fedtree::DatasetInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fedtree::PID, ::fedtree::DatasetInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendDatasetInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fedtree::PID>* FedTree::Stub::AsyncSendDatasetInfoRaw(::grpc::ClientContext* context, const ::fedtree::DatasetInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendDatasetInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::fedtree::GHPair>* FedTree::Stub::SendHistogramsRaw(::grpc::ClientContext* context, ::fedtree::PID* response) {
  return ::grpc::internal::ClientWriterFactory< ::fedtree::GHPair>::Create(channel_.get(), rpcmethod_SendHistograms_, context, response);
}

void FedTree::Stub::async::SendHistograms(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::ClientWriteReactor< ::fedtree::GHPair>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::fedtree::GHPair>::Create(stub_->channel_.get(), stub_->rpcmethod_SendHistograms_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::fedtree::GHPair>* FedTree::Stub::AsyncSendHistogramsRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::fedtree::GHPair>::Create(channel_.get(), cq, rpcmethod_SendHistograms_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::fedtree::GHPair>* FedTree::Stub::PrepareAsyncSendHistogramsRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::fedtree::GHPair>::Create(channel_.get(), cq, rpcmethod_SendHistograms_, context, response, false, nullptr);
}

::grpc::ClientWriter< ::fedtree::FID>* FedTree::Stub::SendHistFidRaw(::grpc::ClientContext* context, ::fedtree::PID* response) {
  return ::grpc::internal::ClientWriterFactory< ::fedtree::FID>::Create(channel_.get(), rpcmethod_SendHistFid_, context, response);
}

void FedTree::Stub::async::SendHistFid(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::ClientWriteReactor< ::fedtree::FID>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::fedtree::FID>::Create(stub_->channel_.get(), stub_->rpcmethod_SendHistFid_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::fedtree::FID>* FedTree::Stub::AsyncSendHistFidRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::fedtree::FID>::Create(channel_.get(), cq, rpcmethod_SendHistFid_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::fedtree::FID>* FedTree::Stub::PrepareAsyncSendHistFidRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::fedtree::FID>::Create(channel_.get(), cq, rpcmethod_SendHistFid_, context, response, false, nullptr);
}

::grpc::Status FedTree::Stub::TriggerAggregate(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TriggerAggregate_, context, request, response);
}

void FedTree::Stub::async::TriggerAggregate(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TriggerAggregate_, context, request, response, std::move(f));
}

void FedTree::Stub::async::TriggerAggregate(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TriggerAggregate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* FedTree::Stub::PrepareAsyncTriggerAggregateRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fedtree::Ready, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TriggerAggregate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* FedTree::Stub::AsyncTriggerAggregateRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTriggerAggregateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::fedtree::BestInfo>* FedTree::Stub::GetBestInfoRaw(::grpc::ClientContext* context, const ::fedtree::PID& request) {
  return ::grpc::internal::ClientReaderFactory< ::fedtree::BestInfo>::Create(channel_.get(), rpcmethod_GetBestInfo_, context, request);
}

void FedTree::Stub::async::GetBestInfo(::grpc::ClientContext* context, const ::fedtree::PID* request, ::grpc::ClientReadReactor< ::fedtree::BestInfo>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::fedtree::BestInfo>::Create(stub_->channel_.get(), stub_->rpcmethod_GetBestInfo_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::fedtree::BestInfo>* FedTree::Stub::AsyncGetBestInfoRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::fedtree::BestInfo>::Create(channel_.get(), cq, rpcmethod_GetBestInfo_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::fedtree::BestInfo>* FedTree::Stub::PrepareAsyncGetBestInfoRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::fedtree::BestInfo>::Create(channel_.get(), cq, rpcmethod_GetBestInfo_, context, request, false, nullptr);
}

::grpc::Status FedTree::Stub::SendNode(::grpc::ClientContext* context, const ::fedtree::Node& request, ::fedtree::PID* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fedtree::Node, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendNode_, context, request, response);
}

void FedTree::Stub::async::SendNode(::grpc::ClientContext* context, const ::fedtree::Node* request, ::fedtree::PID* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fedtree::Node, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendNode_, context, request, response, std::move(f));
}

void FedTree::Stub::async::SendNode(::grpc::ClientContext* context, const ::fedtree::Node* request, ::fedtree::PID* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fedtree::PID>* FedTree::Stub::PrepareAsyncSendNodeRaw(::grpc::ClientContext* context, const ::fedtree::Node& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fedtree::PID, ::fedtree::Node, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendNode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fedtree::PID>* FedTree::Stub::AsyncSendNodeRaw(::grpc::ClientContext* context, const ::fedtree::Node& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendNodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::fedtree::Ins2NodeID>* FedTree::Stub::SendIns2NodeIDRaw(::grpc::ClientContext* context, ::fedtree::PID* response) {
  return ::grpc::internal::ClientWriterFactory< ::fedtree::Ins2NodeID>::Create(channel_.get(), rpcmethod_SendIns2NodeID_, context, response);
}

void FedTree::Stub::async::SendIns2NodeID(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::ClientWriteReactor< ::fedtree::Ins2NodeID>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::fedtree::Ins2NodeID>::Create(stub_->channel_.get(), stub_->rpcmethod_SendIns2NodeID_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::fedtree::Ins2NodeID>* FedTree::Stub::AsyncSendIns2NodeIDRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::fedtree::Ins2NodeID>::Create(channel_.get(), cq, rpcmethod_SendIns2NodeID_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::fedtree::Ins2NodeID>* FedTree::Stub::PrepareAsyncSendIns2NodeIDRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::fedtree::Ins2NodeID>::Create(channel_.get(), cq, rpcmethod_SendIns2NodeID_, context, response, false, nullptr);
}

::grpc::ClientReader< ::fedtree::Node>* FedTree::Stub::GetNodesRaw(::grpc::ClientContext* context, const ::fedtree::PID& request) {
  return ::grpc::internal::ClientReaderFactory< ::fedtree::Node>::Create(channel_.get(), rpcmethod_GetNodes_, context, request);
}

void FedTree::Stub::async::GetNodes(::grpc::ClientContext* context, const ::fedtree::PID* request, ::grpc::ClientReadReactor< ::fedtree::Node>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::fedtree::Node>::Create(stub_->channel_.get(), stub_->rpcmethod_GetNodes_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::fedtree::Node>* FedTree::Stub::AsyncGetNodesRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::fedtree::Node>::Create(channel_.get(), cq, rpcmethod_GetNodes_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::fedtree::Node>* FedTree::Stub::PrepareAsyncGetNodesRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::fedtree::Node>::Create(channel_.get(), cq, rpcmethod_GetNodes_, context, request, false, nullptr);
}

::grpc::ClientReader< ::fedtree::Ins2NodeID>* FedTree::Stub::GetIns2NodeIDRaw(::grpc::ClientContext* context, const ::fedtree::PID& request) {
  return ::grpc::internal::ClientReaderFactory< ::fedtree::Ins2NodeID>::Create(channel_.get(), rpcmethod_GetIns2NodeID_, context, request);
}

void FedTree::Stub::async::GetIns2NodeID(::grpc::ClientContext* context, const ::fedtree::PID* request, ::grpc::ClientReadReactor< ::fedtree::Ins2NodeID>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::fedtree::Ins2NodeID>::Create(stub_->channel_.get(), stub_->rpcmethod_GetIns2NodeID_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::fedtree::Ins2NodeID>* FedTree::Stub::AsyncGetIns2NodeIDRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::fedtree::Ins2NodeID>::Create(channel_.get(), cq, rpcmethod_GetIns2NodeID_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::fedtree::Ins2NodeID>* FedTree::Stub::PrepareAsyncGetIns2NodeIDRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::fedtree::Ins2NodeID>::Create(channel_.get(), cq, rpcmethod_GetIns2NodeID_, context, request, false, nullptr);
}

::grpc::Status FedTree::Stub::CheckIfContinue(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckIfContinue_, context, request, response);
}

void FedTree::Stub::async::CheckIfContinue(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckIfContinue_, context, request, response, std::move(f));
}

void FedTree::Stub::async::CheckIfContinue(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckIfContinue_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* FedTree::Stub::PrepareAsyncCheckIfContinueRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fedtree::Ready, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckIfContinue_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* FedTree::Stub::AsyncCheckIfContinueRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckIfContinueRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FedTree::Stub::TriggerPrune(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TriggerPrune_, context, request, response);
}

void FedTree::Stub::async::TriggerPrune(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TriggerPrune_, context, request, response, std::move(f));
}

void FedTree::Stub::async::TriggerPrune(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TriggerPrune_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* FedTree::Stub::PrepareAsyncTriggerPruneRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fedtree::Ready, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TriggerPrune_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* FedTree::Stub::AsyncTriggerPruneRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTriggerPruneRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FedTree::Stub::TriggerPrintScore(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TriggerPrintScore_, context, request, response);
}

void FedTree::Stub::async::TriggerPrintScore(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TriggerPrintScore_, context, request, response, std::move(f));
}

void FedTree::Stub::async::TriggerPrintScore(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TriggerPrintScore_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* FedTree::Stub::PrepareAsyncTriggerPrintScoreRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fedtree::Ready, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TriggerPrintScore_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* FedTree::Stub::AsyncTriggerPrintScoreRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTriggerPrintScoreRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::fedtree::GHPair>* FedTree::Stub::SendRangeRaw(::grpc::ClientContext* context, ::fedtree::PID* response) {
  return ::grpc::internal::ClientWriterFactory< ::fedtree::GHPair>::Create(channel_.get(), rpcmethod_SendRange_, context, response);
}

void FedTree::Stub::async::SendRange(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::ClientWriteReactor< ::fedtree::GHPair>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::fedtree::GHPair>::Create(stub_->channel_.get(), stub_->rpcmethod_SendRange_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::fedtree::GHPair>* FedTree::Stub::AsyncSendRangeRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::fedtree::GHPair>::Create(channel_.get(), cq, rpcmethod_SendRange_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::fedtree::GHPair>* FedTree::Stub::PrepareAsyncSendRangeRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::fedtree::GHPair>::Create(channel_.get(), cq, rpcmethod_SendRange_, context, response, false, nullptr);
}

::grpc::Status FedTree::Stub::TriggerCut(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TriggerCut_, context, request, response);
}

void FedTree::Stub::async::TriggerCut(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TriggerCut_, context, request, response, std::move(f));
}

void FedTree::Stub::async::TriggerCut(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TriggerCut_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* FedTree::Stub::PrepareAsyncTriggerCutRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fedtree::Ready, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TriggerCut_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* FedTree::Stub::AsyncTriggerCutRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTriggerCutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::fedtree::GHPair>* FedTree::Stub::GetRangeRaw(::grpc::ClientContext* context, const ::fedtree::PID& request) {
  return ::grpc::internal::ClientReaderFactory< ::fedtree::GHPair>::Create(channel_.get(), rpcmethod_GetRange_, context, request);
}

void FedTree::Stub::async::GetRange(::grpc::ClientContext* context, const ::fedtree::PID* request, ::grpc::ClientReadReactor< ::fedtree::GHPair>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::fedtree::GHPair>::Create(stub_->channel_.get(), stub_->rpcmethod_GetRange_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::fedtree::GHPair>* FedTree::Stub::AsyncGetRangeRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::fedtree::GHPair>::Create(channel_.get(), cq, rpcmethod_GetRange_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::fedtree::GHPair>* FedTree::Stub::PrepareAsyncGetRangeRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::fedtree::GHPair>::Create(channel_.get(), cq, rpcmethod_GetRange_, context, request, false, nullptr);
}

::grpc::Status FedTree::Stub::SendGH(::grpc::ClientContext* context, const ::fedtree::GHPair& request, ::fedtree::PID* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fedtree::GHPair, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendGH_, context, request, response);
}

void FedTree::Stub::async::SendGH(::grpc::ClientContext* context, const ::fedtree::GHPair* request, ::fedtree::PID* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fedtree::GHPair, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendGH_, context, request, response, std::move(f));
}

void FedTree::Stub::async::SendGH(::grpc::ClientContext* context, const ::fedtree::GHPair* request, ::fedtree::PID* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendGH_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fedtree::PID>* FedTree::Stub::PrepareAsyncSendGHRaw(::grpc::ClientContext* context, const ::fedtree::GHPair& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fedtree::PID, ::fedtree::GHPair, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendGH_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fedtree::PID>* FedTree::Stub::AsyncSendGHRaw(::grpc::ClientContext* context, const ::fedtree::GHPair& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendGHRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FedTree::Stub::SendDHPubKey(::grpc::ClientContext* context, const ::fedtree::DHPublicKey& request, ::fedtree::PID* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fedtree::DHPublicKey, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendDHPubKey_, context, request, response);
}

void FedTree::Stub::async::SendDHPubKey(::grpc::ClientContext* context, const ::fedtree::DHPublicKey* request, ::fedtree::PID* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fedtree::DHPublicKey, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendDHPubKey_, context, request, response, std::move(f));
}

void FedTree::Stub::async::SendDHPubKey(::grpc::ClientContext* context, const ::fedtree::DHPublicKey* request, ::fedtree::PID* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendDHPubKey_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fedtree::PID>* FedTree::Stub::PrepareAsyncSendDHPubKeyRaw(::grpc::ClientContext* context, const ::fedtree::DHPublicKey& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fedtree::PID, ::fedtree::DHPublicKey, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendDHPubKey_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fedtree::PID>* FedTree::Stub::AsyncSendDHPubKeyRaw(::grpc::ClientContext* context, const ::fedtree::DHPublicKey& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendDHPubKeyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::fedtree::DHPublicKeys>* FedTree::Stub::GetDHPubKeysRaw(::grpc::ClientContext* context, const ::fedtree::PID& request) {
  return ::grpc::internal::ClientReaderFactory< ::fedtree::DHPublicKeys>::Create(channel_.get(), rpcmethod_GetDHPubKeys_, context, request);
}

void FedTree::Stub::async::GetDHPubKeys(::grpc::ClientContext* context, const ::fedtree::PID* request, ::grpc::ClientReadReactor< ::fedtree::DHPublicKeys>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::fedtree::DHPublicKeys>::Create(stub_->channel_.get(), stub_->rpcmethod_GetDHPubKeys_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::fedtree::DHPublicKeys>* FedTree::Stub::AsyncGetDHPubKeysRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::fedtree::DHPublicKeys>::Create(channel_.get(), cq, rpcmethod_GetDHPubKeys_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::fedtree::DHPublicKeys>* FedTree::Stub::PrepareAsyncGetDHPubKeysRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::fedtree::DHPublicKeys>::Create(channel_.get(), cq, rpcmethod_GetDHPubKeys_, context, request, false, nullptr);
}

::grpc::Status FedTree::Stub::SendNoises(::grpc::ClientContext* context, const ::fedtree::SANoises& request, ::fedtree::PID* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fedtree::SANoises, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendNoises_, context, request, response);
}

void FedTree::Stub::async::SendNoises(::grpc::ClientContext* context, const ::fedtree::SANoises* request, ::fedtree::PID* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fedtree::SANoises, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendNoises_, context, request, response, std::move(f));
}

void FedTree::Stub::async::SendNoises(::grpc::ClientContext* context, const ::fedtree::SANoises* request, ::fedtree::PID* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendNoises_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fedtree::PID>* FedTree::Stub::PrepareAsyncSendNoisesRaw(::grpc::ClientContext* context, const ::fedtree::SANoises& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fedtree::PID, ::fedtree::SANoises, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendNoises_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fedtree::PID>* FedTree::Stub::AsyncSendNoisesRaw(::grpc::ClientContext* context, const ::fedtree::SANoises& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendNoisesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::fedtree::SANoises>* FedTree::Stub::GetNoisesRaw(::grpc::ClientContext* context, const ::fedtree::PID& request) {
  return ::grpc::internal::ClientReaderFactory< ::fedtree::SANoises>::Create(channel_.get(), rpcmethod_GetNoises_, context, request);
}

void FedTree::Stub::async::GetNoises(::grpc::ClientContext* context, const ::fedtree::PID* request, ::grpc::ClientReadReactor< ::fedtree::SANoises>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::fedtree::SANoises>::Create(stub_->channel_.get(), stub_->rpcmethod_GetNoises_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::fedtree::SANoises>* FedTree::Stub::AsyncGetNoisesRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::fedtree::SANoises>::Create(channel_.get(), cq, rpcmethod_GetNoises_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::fedtree::SANoises>* FedTree::Stub::PrepareAsyncGetNoisesRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::fedtree::SANoises>::Create(channel_.get(), cq, rpcmethod_GetNoises_, context, request, false, nullptr);
}

::grpc::Status FedTree::Stub::SendCutPoints(::grpc::ClientContext* context, const ::fedtree::CutPoints& request, ::fedtree::PID* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fedtree::CutPoints, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendCutPoints_, context, request, response);
}

void FedTree::Stub::async::SendCutPoints(::grpc::ClientContext* context, const ::fedtree::CutPoints* request, ::fedtree::PID* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fedtree::CutPoints, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendCutPoints_, context, request, response, std::move(f));
}

void FedTree::Stub::async::SendCutPoints(::grpc::ClientContext* context, const ::fedtree::CutPoints* request, ::fedtree::PID* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendCutPoints_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fedtree::PID>* FedTree::Stub::PrepareAsyncSendCutPointsRaw(::grpc::ClientContext* context, const ::fedtree::CutPoints& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fedtree::PID, ::fedtree::CutPoints, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendCutPoints_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fedtree::PID>* FedTree::Stub::AsyncSendCutPointsRaw(::grpc::ClientContext* context, const ::fedtree::CutPoints& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendCutPointsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::fedtree::CutPoints>* FedTree::Stub::GetCutPointsRaw(::grpc::ClientContext* context, const ::fedtree::PID& request) {
  return ::grpc::internal::ClientReaderFactory< ::fedtree::CutPoints>::Create(channel_.get(), rpcmethod_GetCutPoints_, context, request);
}

void FedTree::Stub::async::GetCutPoints(::grpc::ClientContext* context, const ::fedtree::PID* request, ::grpc::ClientReadReactor< ::fedtree::CutPoints>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::fedtree::CutPoints>::Create(stub_->channel_.get(), stub_->rpcmethod_GetCutPoints_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::fedtree::CutPoints>* FedTree::Stub::AsyncGetCutPointsRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::fedtree::CutPoints>::Create(channel_.get(), cq, rpcmethod_GetCutPoints_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::fedtree::CutPoints>* FedTree::Stub::PrepareAsyncGetCutPointsRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::fedtree::CutPoints>::Create(channel_.get(), cq, rpcmethod_GetCutPoints_, context, request, false, nullptr);
}

::grpc::Status FedTree::Stub::TriggerBuildUsingGH(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TriggerBuildUsingGH_, context, request, response);
}

void FedTree::Stub::async::TriggerBuildUsingGH(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TriggerBuildUsingGH_, context, request, response, std::move(f));
}

void FedTree::Stub::async::TriggerBuildUsingGH(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TriggerBuildUsingGH_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* FedTree::Stub::PrepareAsyncTriggerBuildUsingGHRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fedtree::Ready, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TriggerBuildUsingGH_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* FedTree::Stub::AsyncTriggerBuildUsingGHRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTriggerBuildUsingGHRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FedTree::Stub::TriggerCalcTree(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TriggerCalcTree_, context, request, response);
}

void FedTree::Stub::async::TriggerCalcTree(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TriggerCalcTree_, context, request, response, std::move(f));
}

void FedTree::Stub::async::TriggerCalcTree(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TriggerCalcTree_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* FedTree::Stub::PrepareAsyncTriggerCalcTreeRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fedtree::Ready, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TriggerCalcTree_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* FedTree::Stub::AsyncTriggerCalcTreeRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTriggerCalcTreeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FedTree::Stub::GetRootNode(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Node* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fedtree::PID, ::fedtree::Node, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRootNode_, context, request, response);
}

void FedTree::Stub::async::GetRootNode(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Node* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fedtree::PID, ::fedtree::Node, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRootNode_, context, request, response, std::move(f));
}

void FedTree::Stub::async::GetRootNode(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Node* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRootNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fedtree::Node>* FedTree::Stub::PrepareAsyncGetRootNodeRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fedtree::Node, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRootNode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fedtree::Node>* FedTree::Stub::AsyncGetRootNodeRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRootNodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::fedtree::SplitPoint>* FedTree::Stub::GetSplitPointsRaw(::grpc::ClientContext* context, const ::fedtree::PID& request) {
  return ::grpc::internal::ClientReaderFactory< ::fedtree::SplitPoint>::Create(channel_.get(), rpcmethod_GetSplitPoints_, context, request);
}

void FedTree::Stub::async::GetSplitPoints(::grpc::ClientContext* context, const ::fedtree::PID* request, ::grpc::ClientReadReactor< ::fedtree::SplitPoint>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::fedtree::SplitPoint>::Create(stub_->channel_.get(), stub_->rpcmethod_GetSplitPoints_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::fedtree::SplitPoint>* FedTree::Stub::AsyncGetSplitPointsRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::fedtree::SplitPoint>::Create(channel_.get(), cq, rpcmethod_GetSplitPoints_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::fedtree::SplitPoint>* FedTree::Stub::PrepareAsyncGetSplitPointsRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::fedtree::SplitPoint>::Create(channel_.get(), cq, rpcmethod_GetSplitPoints_, context, request, false, nullptr);
}

::grpc::Status FedTree::Stub::HCheckIfContinue(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HCheckIfContinue_, context, request, response);
}

void FedTree::Stub::async::HCheckIfContinue(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HCheckIfContinue_, context, request, response, std::move(f));
}

void FedTree::Stub::async::HCheckIfContinue(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HCheckIfContinue_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* FedTree::Stub::PrepareAsyncHCheckIfContinueRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fedtree::Ready, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HCheckIfContinue_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* FedTree::Stub::AsyncHCheckIfContinueRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHCheckIfContinueRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FedTree::Stub::ScoreReduce(::grpc::ClientContext* context, const ::fedtree::Score& request, ::fedtree::Score* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fedtree::Score, ::fedtree::Score, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ScoreReduce_, context, request, response);
}

void FedTree::Stub::async::ScoreReduce(::grpc::ClientContext* context, const ::fedtree::Score* request, ::fedtree::Score* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fedtree::Score, ::fedtree::Score, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ScoreReduce_, context, request, response, std::move(f));
}

void FedTree::Stub::async::ScoreReduce(::grpc::ClientContext* context, const ::fedtree::Score* request, ::fedtree::Score* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ScoreReduce_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fedtree::Score>* FedTree::Stub::PrepareAsyncScoreReduceRaw(::grpc::ClientContext* context, const ::fedtree::Score& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fedtree::Score, ::fedtree::Score, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ScoreReduce_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fedtree::Score>* FedTree::Stub::AsyncScoreReduceRaw(::grpc::ClientContext* context, const ::fedtree::Score& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncScoreReduceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FedTree::Stub::TriggerHomoInit(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TriggerHomoInit_, context, request, response);
}

void FedTree::Stub::async::TriggerHomoInit(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TriggerHomoInit_, context, request, response, std::move(f));
}

void FedTree::Stub::async::TriggerHomoInit(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TriggerHomoInit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* FedTree::Stub::PrepareAsyncTriggerHomoInitRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fedtree::Ready, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TriggerHomoInit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* FedTree::Stub::AsyncTriggerHomoInitRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTriggerHomoInitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FedTree::Stub::TriggerSAInit(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TriggerSAInit_, context, request, response);
}

void FedTree::Stub::async::TriggerSAInit(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TriggerSAInit_, context, request, response, std::move(f));
}

void FedTree::Stub::async::TriggerSAInit(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TriggerSAInit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* FedTree::Stub::PrepareAsyncTriggerSAInitRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fedtree::Ready, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TriggerSAInit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* FedTree::Stub::AsyncTriggerSAInitRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTriggerSAInitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FedTree::Stub::GetPaillier(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Paillier* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fedtree::PID, ::fedtree::Paillier, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPaillier_, context, request, response);
}

void FedTree::Stub::async::GetPaillier(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Paillier* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fedtree::PID, ::fedtree::Paillier, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPaillier_, context, request, response, std::move(f));
}

void FedTree::Stub::async::GetPaillier(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Paillier* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPaillier_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fedtree::Paillier>* FedTree::Stub::PrepareAsyncGetPaillierRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fedtree::Paillier, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPaillier_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fedtree::Paillier>* FedTree::Stub::AsyncGetPaillierRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPaillierRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::fedtree::GHPairEnc>* FedTree::Stub::SendHistogramsEncRaw(::grpc::ClientContext* context, ::fedtree::PID* response) {
  return ::grpc::internal::ClientWriterFactory< ::fedtree::GHPairEnc>::Create(channel_.get(), rpcmethod_SendHistogramsEnc_, context, response);
}

void FedTree::Stub::async::SendHistogramsEnc(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::ClientWriteReactor< ::fedtree::GHPairEnc>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::fedtree::GHPairEnc>::Create(stub_->channel_.get(), stub_->rpcmethod_SendHistogramsEnc_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::fedtree::GHPairEnc>* FedTree::Stub::AsyncSendHistogramsEncRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::fedtree::GHPairEnc>::Create(channel_.get(), cq, rpcmethod_SendHistogramsEnc_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::fedtree::GHPairEnc>* FedTree::Stub::PrepareAsyncSendHistogramsEncRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::fedtree::GHPairEnc>::Create(channel_.get(), cq, rpcmethod_SendHistogramsEnc_, context, response, false, nullptr);
}

::grpc::Status FedTree::Stub::SendBatchedHistograms(::grpc::ClientContext* context, const ::fedtree::GHArray& request, ::fedtree::PID* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fedtree::GHArray, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendBatchedHistograms_, context, request, response);
}

void FedTree::Stub::async::SendBatchedHistograms(::grpc::ClientContext* context, const ::fedtree::GHArray* request, ::fedtree::PID* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fedtree::GHArray, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendBatchedHistograms_, context, request, response, std::move(f));
}

void FedTree::Stub::async::SendBatchedHistograms(::grpc::ClientContext* context, const ::fedtree::GHArray* request, ::fedtree::PID* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendBatchedHistograms_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fedtree::PID>* FedTree::Stub::PrepareAsyncSendBatchedHistogramsRaw(::grpc::ClientContext* context, const ::fedtree::GHArray& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fedtree::PID, ::fedtree::GHArray, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendBatchedHistograms_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fedtree::PID>* FedTree::Stub::AsyncSendBatchedHistogramsRaw(::grpc::ClientContext* context, const ::fedtree::GHArray& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendBatchedHistogramsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::fedtree::GHBatch>* FedTree::Stub::SendHistogramBatchesRaw(::grpc::ClientContext* context, ::fedtree::PID* response) {
  return ::grpc::internal::ClientWriterFactory< ::fedtree::GHBatch>::Create(channel_.get(), rpcmethod_SendHistogramBatches_, context, response);
}

void FedTree::Stub::async::SendHistogramBatches(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::ClientWriteReactor< ::fedtree::GHBatch>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::fedtree::GHBatch>::Create(stub_->channel_.get(), stub_->rpcmethod_SendHistogramBatches_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::fedtree::GHBatch>* FedTree::Stub::AsyncSendHistogramBatchesRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::fedtree::GHBatch>::Create(channel_.get(), cq, rpcmethod_SendHistogramBatches_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::fedtree::GHBatch>* FedTree::Stub::PrepareAsyncSendHistogramBatchesRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::fedtree::GHBatch>::Create(channel_.get(), cq, rpcmethod_SendHistogramBatches_, context, response, false, nullptr);
}

::grpc::ClientWriter< ::fedtree::FIDBatch>* FedTree::Stub::SendHistFidBatchesRaw(::grpc::ClientContext* context, ::fedtree::PID* response) {
  return ::grpc::internal::ClientWriterFactory< ::fedtree::FIDBatch>::Create(channel_.get(), rpcmethod_SendHistFidBatches_, context, response);
}

void FedTree::Stub::async::SendHistFidBatches(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::ClientWriteReactor< ::fedtree::FIDBatch>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::fedtree::FIDBatch>::Create(stub_->channel_.get(), stub_->rpcmethod_SendHistFidBatches_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::fedtree::FIDBatch>* FedTree::Stub::AsyncSendHistFidBatchesRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::fedtree::FIDBatch>::Create(channel_.get(), cq, rpcmethod_SendHistFidBatches_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::fedtree::FIDBatch>* FedTree::Stub::PrepareAsyncSendHistFidBatchesRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::fedtree::FIDBatch>::Create(channel_.get(), cq, rpcmethod_SendHistFidBatches_, context, response, false, nullptr);
}

::grpc::ClientReader< ::fedtree::Ins2NodeIDBatch>* FedTree::Stub::GetIns2NodeIDBatchesRaw(::grpc::ClientContext* context, const ::fedtree::PID& request) {
  return ::grpc::internal::ClientReaderFactory< ::fedtree::Ins2NodeIDBatch>::Create(channel_.get(), rpcmethod_GetIns2NodeIDBatches_, context, request);
}

void FedTree::Stub::async::GetIns2NodeIDBatches(::grpc::ClientContext* context, const ::fedtree::PID* request, ::grpc::ClientReadReactor< ::fedtree::Ins2NodeIDBatch>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::fedtree::Ins2NodeIDBatch>::Create(stub_->channel_.get(), stub_->rpcmethod_GetIns2NodeIDBatches_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::fedtree::Ins2NodeIDBatch>* FedTree::Stub::AsyncGetIns2NodeIDBatchesRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::fedtree::Ins2NodeIDBatch>::Create(channel_.get(), cq, rpcmethod_GetIns2NodeIDBatches_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::fedtree::Ins2NodeIDBatch>* FedTree::Stub::PrepareAsyncGetIns2NodeIDBatchesRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::fedtree::Ins2NodeIDBatch>::Create(channel_.get(), cq, rpcmethod_GetIns2NodeIDBatches_, context, request, false, nullptr);
}

::grpc::ClientWriter< ::fedtree::Ins2NodeIDBatch>* FedTree::Stub::SendIns2NodeIDBatchesRaw(::grpc::ClientContext* context, ::fedtree::PID* response) {
  return ::grpc::internal::ClientWriterFactory< ::fedtree::Ins2NodeIDBatch>::Create(channel_.get(), rpcmethod_SendIns2NodeIDBatches_, context, response);
}

void FedTree::Stub::async::SendIns2NodeIDBatches(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::ClientWriteReactor< ::fedtree::Ins2NodeIDBatch>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::fedtree::Ins2NodeIDBatch>::Create(stub_->channel_.get(), stub_->rpcmethod_SendIns2NodeIDBatches_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::fedtree::Ins2NodeIDBatch>* FedTree::Stub::AsyncSendIns2NodeIDBatchesRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::fedtree::Ins2NodeIDBatch>::Create(channel_.get(), cq, rpcmethod_SendIns2NodeIDBatches_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::fedtree::Ins2NodeIDBatch>* FedTree::Stub::PrepareAsyncSendIns2NodeIDBatchesRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::fedtree::Ins2NodeIDBatch>::Create(channel_.get(), cq, rpcmethod_SendIns2NodeIDBatches_, context, response, false, nullptr);
}

::grpc::ClientReader< ::fedtree::GHBatch>* FedTree::Stub::GetGradientBatchesRaw(::grpc::ClientContext* context, const ::fedtree::PID& request) {
  return ::grpc::internal::ClientReaderFactory< ::fedtree::GHBatch>::Create(channel_.get(), rpcmethod_GetGradientBatches_, context, request);
}

void FedTree::Stub::async::GetGradientBatches(::grpc::ClientContext* context, const ::fedtree::PID* request, ::grpc::ClientReadReactor< ::fedtree::GHBatch>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::fedtree::GHBatch>::Create(stub_->channel_.get(), stub_->rpcmethod_GetGradientBatches_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::fedtree::GHBatch>* FedTree::Stub::AsyncGetGradientBatchesRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::fedtree::GHBatch>::Create(channel_.get(), cq, rpcmethod_GetGradientBatches_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::fedtree::GHBatch>* FedTree::Stub::PrepareAsyncGetGradientBatchesRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::fedtree::GHBatch>::Create(channel_.get(), cq, rpcmethod_GetGradientBatches_, context, request, false, nullptr);
}

::grpc::ClientReader< ::fedtree::GHEncBatch>* FedTree::Stub::GetGradientBatchesEncRaw(::grpc::ClientContext* context, const ::fedtree::PID& request) {
  return ::grpc::internal::ClientReaderFactory< ::fedtree::GHEncBatch>::Create(channel_.get(), rpcmethod_GetGradientBatchesEnc_, context, request);
}

void FedTree::Stub::async::GetGradientBatchesEnc(::grpc::ClientContext* context, const ::fedtree::PID* request, ::grpc::ClientReadReactor< ::fedtree::GHEncBatch>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::fedtree::GHEncBatch>::Create(stub_->channel_.get(), stub_->rpcmethod_GetGradientBatchesEnc_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::fedtree::GHEncBatch>* FedTree::Stub::AsyncGetGradientBatchesEncRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::fedtree::GHEncBatch>::Create(channel_.get(), cq, rpcmethod_GetGradientBatchesEnc_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::fedtree::GHEncBatch>* FedTree::Stub::PrepareAsyncGetGradientBatchesEncRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::fedtree::GHEncBatch>::Create(channel_.get(), cq, rpcmethod_GetGradientBatchesEnc_, context, request, false, nullptr);
}

::grpc::Status FedTree::Stub::SendNodeEnc(::grpc::ClientContext* context, const ::fedtree::NodeEnc& request, ::fedtree::PID* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fedtree::NodeEnc, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendNodeEnc_, context, request, response);
}

void FedTree::Stub::async::SendNodeEnc(::grpc::ClientContext* context, const ::fedtree::NodeEnc* request, ::fedtree::PID* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fedtree::NodeEnc, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendNodeEnc_, context, request, response, std::move(f));
}

void FedTree::Stub::async::SendNodeEnc(::grpc::ClientContext* context, const ::fedtree::NodeEnc* request, ::fedtree::PID* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendNodeEnc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fedtree::PID>* FedTree::Stub::PrepareAsyncSendNodeEncRaw(::grpc::ClientContext* context, const ::fedtree::NodeEnc& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fedtree::PID, ::fedtree::NodeEnc, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendNodeEnc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fedtree::PID>* FedTree::Stub::AsyncSendNodeEncRaw(::grpc::ClientContext* context, const ::fedtree::NodeEnc& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendNodeEncRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FedTree::Stub::SendNodes(::grpc::ClientContext* context, const ::fedtree::NodeArray& request, ::fedtree::PID* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fedtree::NodeArray, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendNodes_, context, request, response);
}

void FedTree::Stub::async::SendNodes(::grpc::ClientContext* context, const ::fedtree::NodeArray* request, ::fedtree::PID* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fedtree::NodeArray, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendNodes_, context, request, response, std::move(f));
}

void FedTree::Stub::async::SendNodes(::grpc::ClientContext* context, const ::fedtree::NodeArray* request, ::fedtree::PID* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendNodes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fedtree::PID>* FedTree::Stub::PrepareAsyncSendNodesRaw(::grpc::ClientContext* context, const ::fedtree::NodeArray& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fedtree::PID, ::fedtree::NodeArray, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendNodes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fedtree::PID>* FedTree::Stub::AsyncSendNodesRaw(::grpc::ClientContext* context, const ::fedtree::NodeArray& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendNodesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FedTree::Stub::SendNodesEnc(::grpc::ClientContext* context, const ::fedtree::NodeEncArray& request, ::fedtree::PID* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fedtree::NodeEncArray, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendNodesEnc_, context, request, response);
}

void FedTree::Stub::async::SendNodesEnc(::grpc::ClientContext* context, const ::fedtree::NodeEncArray* request, ::fedtree::PID* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fedtree::NodeEncArray, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendNodesEnc_, context, request, response, std::move(f));
}

void FedTree::Stub::async::SendNodesEnc(::grpc::ClientContext* context, const ::fedtree::NodeEncArray* request, ::fedtree::PID* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendNodesEnc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fedtree::PID>* FedTree::Stub::PrepareAsyncSendNodesEncRaw(::grpc::ClientContext* context, const ::fedtree::NodeEncArray& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fedtree::PID, ::fedtree::NodeEncArray, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendNodesEnc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fedtree::PID>* FedTree::Stub::AsyncSendNodesEncRaw(::grpc::ClientContext* context, const ::fedtree::NodeEncArray& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendNodesEncRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::fedtree::GHEncBatch>* FedTree::Stub::SendHistogramBatchesEncRaw(::grpc::ClientContext* context, ::fedtree::PID* response) {
  return ::grpc::internal::ClientWriterFactory< ::fedtree::GHEncBatch>::Create(channel_.get(), rpcmethod_SendHistogramBatchesEnc_, context, response);
}

void FedTree::Stub::async::SendHistogramBatchesEnc(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::ClientWriteReactor< ::fedtree::GHEncBatch>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::fedtree::GHEncBatch>::Create(stub_->channel_.get(), stub_->rpcmethod_SendHistogramBatchesEnc_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::fedtree::GHEncBatch>* FedTree::Stub::AsyncSendHistogramBatchesEncRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::fedtree::GHEncBatch>::Create(channel_.get(), cq, rpcmethod_SendHistogramBatchesEnc_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::fedtree::GHEncBatch>* FedTree::Stub::PrepareAsyncSendHistogramBatchesEncRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::fedtree::GHEncBatch>::Create(channel_.get(), cq, rpcmethod_SendHistogramBatchesEnc_, context, response, false, nullptr);
}

::grpc::Status FedTree::Stub::StopServer(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Score* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fedtree::PID, ::fedtree::Score, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StopServer_, context, request, response);
}

void FedTree::Stub::async::StopServer(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Score* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fedtree::PID, ::fedtree::Score, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopServer_, context, request, response, std::move(f));
}

void FedTree::Stub::async::StopServer(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Score* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fedtree::Score>* FedTree::Stub::PrepareAsyncStopServerRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fedtree::Score, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StopServer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fedtree::Score>* FedTree::Stub::AsyncStopServerRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopServerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FedTree::Stub::BeginBarrier(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BeginBarrier_, context, request, response);
}

void FedTree::Stub::async::BeginBarrier(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BeginBarrier_, context, request, response, std::move(f));
}

void FedTree::Stub::async::BeginBarrier(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BeginBarrier_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* FedTree::Stub::PrepareAsyncBeginBarrierRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fedtree::Ready, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BeginBarrier_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* FedTree::Stub::AsyncBeginBarrierRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBeginBarrierRaw(context, request, cq);
  result->StartCall();
  return result;
}

FedTree::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FedTree::Service, ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::PID* req,
             ::fedtree::Ready* resp) {
               return service->TriggerUpdateGradients(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FedTree::Service, ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::PID* req,
             ::fedtree::Ready* resp) {
               return service->TriggerBuildInit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< FedTree::Service, ::fedtree::PID, ::fedtree::GHPair>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::PID* req,
             ::grpc::ServerWriter<::fedtree::GHPair>* writer) {
               return service->GetGradients(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FedTree::Service, ::fedtree::DatasetInfo, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::DatasetInfo* req,
             ::fedtree::PID* resp) {
               return service->SendDatasetInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[4],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< FedTree::Service, ::fedtree::GHPair, ::fedtree::PID>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::fedtree::GHPair>* reader,
             ::fedtree::PID* resp) {
               return service->SendHistograms(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[5],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< FedTree::Service, ::fedtree::FID, ::fedtree::PID>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::fedtree::FID>* reader,
             ::fedtree::PID* resp) {
               return service->SendHistFid(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FedTree::Service, ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::PID* req,
             ::fedtree::Ready* resp) {
               return service->TriggerAggregate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[7],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< FedTree::Service, ::fedtree::PID, ::fedtree::BestInfo>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::PID* req,
             ::grpc::ServerWriter<::fedtree::BestInfo>* writer) {
               return service->GetBestInfo(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FedTree::Service, ::fedtree::Node, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::Node* req,
             ::fedtree::PID* resp) {
               return service->SendNode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[9],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< FedTree::Service, ::fedtree::Ins2NodeID, ::fedtree::PID>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::fedtree::Ins2NodeID>* reader,
             ::fedtree::PID* resp) {
               return service->SendIns2NodeID(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[10],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< FedTree::Service, ::fedtree::PID, ::fedtree::Node>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::PID* req,
             ::grpc::ServerWriter<::fedtree::Node>* writer) {
               return service->GetNodes(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[11],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< FedTree::Service, ::fedtree::PID, ::fedtree::Ins2NodeID>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::PID* req,
             ::grpc::ServerWriter<::fedtree::Ins2NodeID>* writer) {
               return service->GetIns2NodeID(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FedTree::Service, ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::PID* req,
             ::fedtree::Ready* resp) {
               return service->CheckIfContinue(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FedTree::Service, ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::PID* req,
             ::fedtree::Ready* resp) {
               return service->TriggerPrune(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FedTree::Service, ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::PID* req,
             ::fedtree::Ready* resp) {
               return service->TriggerPrintScore(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[15],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< FedTree::Service, ::fedtree::GHPair, ::fedtree::PID>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::fedtree::GHPair>* reader,
             ::fedtree::PID* resp) {
               return service->SendRange(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FedTree::Service, ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::PID* req,
             ::fedtree::Ready* resp) {
               return service->TriggerCut(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[17],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< FedTree::Service, ::fedtree::PID, ::fedtree::GHPair>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::PID* req,
             ::grpc::ServerWriter<::fedtree::GHPair>* writer) {
               return service->GetRange(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FedTree::Service, ::fedtree::GHPair, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::GHPair* req,
             ::fedtree::PID* resp) {
               return service->SendGH(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FedTree::Service, ::fedtree::DHPublicKey, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::DHPublicKey* req,
             ::fedtree::PID* resp) {
               return service->SendDHPubKey(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[20],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< FedTree::Service, ::fedtree::PID, ::fedtree::DHPublicKeys>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::PID* req,
             ::grpc::ServerWriter<::fedtree::DHPublicKeys>* writer) {
               return service->GetDHPubKeys(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FedTree::Service, ::fedtree::SANoises, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::SANoises* req,
             ::fedtree::PID* resp) {
               return service->SendNoises(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[22],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< FedTree::Service, ::fedtree::PID, ::fedtree::SANoises>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::PID* req,
             ::grpc::ServerWriter<::fedtree::SANoises>* writer) {
               return service->GetNoises(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FedTree::Service, ::fedtree::CutPoints, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::CutPoints* req,
             ::fedtree::PID* resp) {
               return service->SendCutPoints(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[24],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< FedTree::Service, ::fedtree::PID, ::fedtree::CutPoints>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::PID* req,
             ::grpc::ServerWriter<::fedtree::CutPoints>* writer) {
               return service->GetCutPoints(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FedTree::Service, ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::PID* req,
             ::fedtree::Ready* resp) {
               return service->TriggerBuildUsingGH(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FedTree::Service, ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::PID* req,
             ::fedtree::Ready* resp) {
               return service->TriggerCalcTree(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FedTree::Service, ::fedtree::PID, ::fedtree::Node, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::PID* req,
             ::fedtree::Node* resp) {
               return service->GetRootNode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[28],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< FedTree::Service, ::fedtree::PID, ::fedtree::SplitPoint>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::PID* req,
             ::grpc::ServerWriter<::fedtree::SplitPoint>* writer) {
               return service->GetSplitPoints(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FedTree::Service, ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::PID* req,
             ::fedtree::Ready* resp) {
               return service->HCheckIfContinue(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FedTree::Service, ::fedtree::Score, ::fedtree::Score, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::Score* req,
             ::fedtree::Score* resp) {
               return service->ScoreReduce(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FedTree::Service, ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::PID* req,
             ::fedtree::Ready* resp) {
               return service->TriggerHomoInit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FedTree::Service, ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::PID* req,
             ::fedtree::Ready* resp) {
               return service->TriggerSAInit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FedTree::Service, ::fedtree::PID, ::fedtree::Paillier, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::PID* req,
             ::fedtree::Paillier* resp) {
               return service->GetPaillier(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[34],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< FedTree::Service, ::fedtree::GHPairEnc, ::fedtree::PID>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::fedtree::GHPairEnc>* reader,
             ::fedtree::PID* resp) {
               return service->SendHistogramsEnc(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FedTree::Service, ::fedtree::GHArray, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::GHArray* req,
             ::fedtree::PID* resp) {
               return service->SendBatchedHistograms(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[36],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< FedTree::Service, ::fedtree::GHBatch, ::fedtree::PID>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::fedtree::GHBatch>* reader,
             ::fedtree::PID* resp) {
               return service->SendHistogramBatches(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[37],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< FedTree::Service, ::fedtree::FIDBatch, ::fedtree::PID>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::fedtree::FIDBatch>* reader,
             ::fedtree::PID* resp) {
               return service->SendHistFidBatches(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[38],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< FedTree::Service, ::fedtree::PID, ::fedtree::Ins2NodeIDBatch>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::PID* req,
             ::grpc::ServerWriter<::fedtree::Ins2NodeIDBatch>* writer) {
               return service->GetIns2NodeIDBatches(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[39],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< FedTree::Service, ::fedtree::Ins2NodeIDBatch, ::fedtree::PID>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::fedtree::Ins2NodeIDBatch>* reader,
             ::fedtree::PID* resp) {
               return service->SendIns2NodeIDBatches(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[40],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< FedTree::Service, ::fedtree::PID, ::fedtree::GHBatch>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::PID* req,
             ::grpc::ServerWriter<::fedtree::GHBatch>* writer) {
               return service->GetGradientBatches(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[41],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< FedTree::Service, ::fedtree::PID, ::fedtree::GHEncBatch>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::PID* req,
             ::grpc::ServerWriter<::fedtree::GHEncBatch>* writer) {
               return service->GetGradientBatchesEnc(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[42],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FedTree::Service, ::fedtree::NodeEnc, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::NodeEnc* req,
             ::fedtree::PID* resp) {
               return service->SendNodeEnc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[43],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FedTree::Service, ::fedtree::NodeArray, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::NodeArray* req,
             ::fedtree::PID* resp) {
               return service->SendNodes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[44],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FedTree::Service, ::fedtree::NodeEncArray, ::fedtree::PID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::NodeEncArray* req,
             ::fedtree::PID* resp) {
               return service->SendNodesEnc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[45],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< FedTree::Service, ::fedtree::GHEncBatch, ::fedtree::PID>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::fedtree::GHEncBatch>* reader,
             ::fedtree::PID* resp) {
               return service->SendHistogramBatchesEnc(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[46],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FedTree::Service, ::fedtree::PID, ::fedtree::Score, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::PID* req,
             ::fedtree::Score* resp) {
               return service->StopServer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FedTree_method_names[47],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FedTree::Service, ::fedtree::PID, ::fedtree::Ready, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FedTree::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fedtree::PID* req,
             ::fedtree::Ready* resp) {
               return service->BeginBarrier(ctx, req, resp);
             }, this)));
}

FedTree::Service::~Service() {
}

::grpc::Status FedTree::Service::TriggerUpdateGradients(::grpc::ServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::TriggerBuildInit(::grpc::ServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::GetGradients(::grpc::ServerContext* context, const ::fedtree::PID* request, ::grpc::ServerWriter< ::fedtree::GHPair>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::SendDatasetInfo(::grpc::ServerContext* context, const ::fedtree::DatasetInfo* request, ::fedtree::PID* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::SendHistograms(::grpc::ServerContext* context, ::grpc::ServerReader< ::fedtree::GHPair>* reader, ::fedtree::PID* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::SendHistFid(::grpc::ServerContext* context, ::grpc::ServerReader< ::fedtree::FID>* reader, ::fedtree::PID* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::TriggerAggregate(::grpc::ServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::GetBestInfo(::grpc::ServerContext* context, const ::fedtree::PID* request, ::grpc::ServerWriter< ::fedtree::BestInfo>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::SendNode(::grpc::ServerContext* context, const ::fedtree::Node* request, ::fedtree::PID* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::SendIns2NodeID(::grpc::ServerContext* context, ::grpc::ServerReader< ::fedtree::Ins2NodeID>* reader, ::fedtree::PID* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::GetNodes(::grpc::ServerContext* context, const ::fedtree::PID* request, ::grpc::ServerWriter< ::fedtree::Node>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::GetIns2NodeID(::grpc::ServerContext* context, const ::fedtree::PID* request, ::grpc::ServerWriter< ::fedtree::Ins2NodeID>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::CheckIfContinue(::grpc::ServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::TriggerPrune(::grpc::ServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::TriggerPrintScore(::grpc::ServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::SendRange(::grpc::ServerContext* context, ::grpc::ServerReader< ::fedtree::GHPair>* reader, ::fedtree::PID* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::TriggerCut(::grpc::ServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::GetRange(::grpc::ServerContext* context, const ::fedtree::PID* request, ::grpc::ServerWriter< ::fedtree::GHPair>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::SendGH(::grpc::ServerContext* context, const ::fedtree::GHPair* request, ::fedtree::PID* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::SendDHPubKey(::grpc::ServerContext* context, const ::fedtree::DHPublicKey* request, ::fedtree::PID* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::GetDHPubKeys(::grpc::ServerContext* context, const ::fedtree::PID* request, ::grpc::ServerWriter< ::fedtree::DHPublicKeys>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::SendNoises(::grpc::ServerContext* context, const ::fedtree::SANoises* request, ::fedtree::PID* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::GetNoises(::grpc::ServerContext* context, const ::fedtree::PID* request, ::grpc::ServerWriter< ::fedtree::SANoises>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::SendCutPoints(::grpc::ServerContext* context, const ::fedtree::CutPoints* request, ::fedtree::PID* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::GetCutPoints(::grpc::ServerContext* context, const ::fedtree::PID* request, ::grpc::ServerWriter< ::fedtree::CutPoints>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::TriggerBuildUsingGH(::grpc::ServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::TriggerCalcTree(::grpc::ServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::GetRootNode(::grpc::ServerContext* context, const ::fedtree::PID* request, ::fedtree::Node* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::GetSplitPoints(::grpc::ServerContext* context, const ::fedtree::PID* request, ::grpc::ServerWriter< ::fedtree::SplitPoint>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::HCheckIfContinue(::grpc::ServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::ScoreReduce(::grpc::ServerContext* context, const ::fedtree::Score* request, ::fedtree::Score* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::TriggerHomoInit(::grpc::ServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::TriggerSAInit(::grpc::ServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::GetPaillier(::grpc::ServerContext* context, const ::fedtree::PID* request, ::fedtree::Paillier* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::SendHistogramsEnc(::grpc::ServerContext* context, ::grpc::ServerReader< ::fedtree::GHPairEnc>* reader, ::fedtree::PID* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::SendBatchedHistograms(::grpc::ServerContext* context, const ::fedtree::GHArray* request, ::fedtree::PID* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::SendHistogramBatches(::grpc::ServerContext* context, ::grpc::ServerReader< ::fedtree::GHBatch>* reader, ::fedtree::PID* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::SendHistFidBatches(::grpc::ServerContext* context, ::grpc::ServerReader< ::fedtree::FIDBatch>* reader, ::fedtree::PID* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::GetIns2NodeIDBatches(::grpc::ServerContext* context, const ::fedtree::PID* request, ::grpc::ServerWriter< ::fedtree::Ins2NodeIDBatch>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::SendIns2NodeIDBatches(::grpc::ServerContext* context, ::grpc::ServerReader< ::fedtree::Ins2NodeIDBatch>* reader, ::fedtree::PID* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::GetGradientBatches(::grpc::ServerContext* context, const ::fedtree::PID* request, ::grpc::ServerWriter< ::fedtree::GHBatch>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::GetGradientBatchesEnc(::grpc::ServerContext* context, const ::fedtree::PID* request, ::grpc::ServerWriter< ::fedtree::GHEncBatch>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::SendNodeEnc(::grpc::ServerContext* context, const ::fedtree::NodeEnc* request, ::fedtree::PID* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::SendNodes(::grpc::ServerContext* context, const ::fedtree::NodeArray* request, ::fedtree::PID* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::SendNodesEnc(::grpc::ServerContext* context, const ::fedtree::NodeEncArray* request, ::fedtree::PID* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::SendHistogramBatchesEnc(::grpc::ServerContext* context, ::grpc::ServerReader< ::fedtree::GHEncBatch>* reader, ::fedtree::PID* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::StopServer(::grpc::ServerContext* context, const ::fedtree::PID* request, ::fedtree::Score* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FedTree::Service::BeginBarrier(::grpc::ServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace fedtree

