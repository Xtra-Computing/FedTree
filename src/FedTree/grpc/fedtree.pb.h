// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fedtree.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_fedtree_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_fedtree_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fedtree_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_fedtree_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fedtree_2eproto;
namespace fedtree {
class BestInfo;
struct BestInfoDefaultTypeInternal;
extern BestInfoDefaultTypeInternal _BestInfo_default_instance_;
class CutPoints;
struct CutPointsDefaultTypeInternal;
extern CutPointsDefaultTypeInternal _CutPoints_default_instance_;
class DHPublicKey;
struct DHPublicKeyDefaultTypeInternal;
extern DHPublicKeyDefaultTypeInternal _DHPublicKey_default_instance_;
class DHPublicKeys;
struct DHPublicKeysDefaultTypeInternal;
extern DHPublicKeysDefaultTypeInternal _DHPublicKeys_default_instance_;
class DatasetInfo;
struct DatasetInfoDefaultTypeInternal;
extern DatasetInfoDefaultTypeInternal _DatasetInfo_default_instance_;
class FID;
struct FIDDefaultTypeInternal;
extern FIDDefaultTypeInternal _FID_default_instance_;
class FIDBatch;
struct FIDBatchDefaultTypeInternal;
extern FIDBatchDefaultTypeInternal _FIDBatch_default_instance_;
class GHArray;
struct GHArrayDefaultTypeInternal;
extern GHArrayDefaultTypeInternal _GHArray_default_instance_;
class GHBatch;
struct GHBatchDefaultTypeInternal;
extern GHBatchDefaultTypeInternal _GHBatch_default_instance_;
class GHEncBatch;
struct GHEncBatchDefaultTypeInternal;
extern GHEncBatchDefaultTypeInternal _GHEncBatch_default_instance_;
class GHPair;
struct GHPairDefaultTypeInternal;
extern GHPairDefaultTypeInternal _GHPair_default_instance_;
class GHPairEnc;
struct GHPairEncDefaultTypeInternal;
extern GHPairEncDefaultTypeInternal _GHPairEnc_default_instance_;
class Ins2NodeID;
struct Ins2NodeIDDefaultTypeInternal;
extern Ins2NodeIDDefaultTypeInternal _Ins2NodeID_default_instance_;
class Ins2NodeIDBatch;
struct Ins2NodeIDBatchDefaultTypeInternal;
extern Ins2NodeIDBatchDefaultTypeInternal _Ins2NodeIDBatch_default_instance_;
class Node;
struct NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class NodeArray;
struct NodeArrayDefaultTypeInternal;
extern NodeArrayDefaultTypeInternal _NodeArray_default_instance_;
class NodeEnc;
struct NodeEncDefaultTypeInternal;
extern NodeEncDefaultTypeInternal _NodeEnc_default_instance_;
class NodeEncArray;
struct NodeEncArrayDefaultTypeInternal;
extern NodeEncArrayDefaultTypeInternal _NodeEncArray_default_instance_;
class PID;
struct PIDDefaultTypeInternal;
extern PIDDefaultTypeInternal _PID_default_instance_;
class Paillier;
struct PaillierDefaultTypeInternal;
extern PaillierDefaultTypeInternal _Paillier_default_instance_;
class Ready;
struct ReadyDefaultTypeInternal;
extern ReadyDefaultTypeInternal _Ready_default_instance_;
class SANoise;
struct SANoiseDefaultTypeInternal;
extern SANoiseDefaultTypeInternal _SANoise_default_instance_;
class SANoises;
struct SANoisesDefaultTypeInternal;
extern SANoisesDefaultTypeInternal _SANoises_default_instance_;
class Score;
struct ScoreDefaultTypeInternal;
extern ScoreDefaultTypeInternal _Score_default_instance_;
class SplitPoint;
struct SplitPointDefaultTypeInternal;
extern SplitPointDefaultTypeInternal _SplitPoint_default_instance_;
}  // namespace fedtree
PROTOBUF_NAMESPACE_OPEN
template<> ::fedtree::BestInfo* Arena::CreateMaybeMessage<::fedtree::BestInfo>(Arena*);
template<> ::fedtree::CutPoints* Arena::CreateMaybeMessage<::fedtree::CutPoints>(Arena*);
template<> ::fedtree::DHPublicKey* Arena::CreateMaybeMessage<::fedtree::DHPublicKey>(Arena*);
template<> ::fedtree::DHPublicKeys* Arena::CreateMaybeMessage<::fedtree::DHPublicKeys>(Arena*);
template<> ::fedtree::DatasetInfo* Arena::CreateMaybeMessage<::fedtree::DatasetInfo>(Arena*);
template<> ::fedtree::FID* Arena::CreateMaybeMessage<::fedtree::FID>(Arena*);
template<> ::fedtree::FIDBatch* Arena::CreateMaybeMessage<::fedtree::FIDBatch>(Arena*);
template<> ::fedtree::GHArray* Arena::CreateMaybeMessage<::fedtree::GHArray>(Arena*);
template<> ::fedtree::GHBatch* Arena::CreateMaybeMessage<::fedtree::GHBatch>(Arena*);
template<> ::fedtree::GHEncBatch* Arena::CreateMaybeMessage<::fedtree::GHEncBatch>(Arena*);
template<> ::fedtree::GHPair* Arena::CreateMaybeMessage<::fedtree::GHPair>(Arena*);
template<> ::fedtree::GHPairEnc* Arena::CreateMaybeMessage<::fedtree::GHPairEnc>(Arena*);
template<> ::fedtree::Ins2NodeID* Arena::CreateMaybeMessage<::fedtree::Ins2NodeID>(Arena*);
template<> ::fedtree::Ins2NodeIDBatch* Arena::CreateMaybeMessage<::fedtree::Ins2NodeIDBatch>(Arena*);
template<> ::fedtree::Node* Arena::CreateMaybeMessage<::fedtree::Node>(Arena*);
template<> ::fedtree::NodeArray* Arena::CreateMaybeMessage<::fedtree::NodeArray>(Arena*);
template<> ::fedtree::NodeEnc* Arena::CreateMaybeMessage<::fedtree::NodeEnc>(Arena*);
template<> ::fedtree::NodeEncArray* Arena::CreateMaybeMessage<::fedtree::NodeEncArray>(Arena*);
template<> ::fedtree::PID* Arena::CreateMaybeMessage<::fedtree::PID>(Arena*);
template<> ::fedtree::Paillier* Arena::CreateMaybeMessage<::fedtree::Paillier>(Arena*);
template<> ::fedtree::Ready* Arena::CreateMaybeMessage<::fedtree::Ready>(Arena*);
template<> ::fedtree::SANoise* Arena::CreateMaybeMessage<::fedtree::SANoise>(Arena*);
template<> ::fedtree::SANoises* Arena::CreateMaybeMessage<::fedtree::SANoises>(Arena*);
template<> ::fedtree::Score* Arena::CreateMaybeMessage<::fedtree::Score>(Arena*);
template<> ::fedtree::SplitPoint* Arena::CreateMaybeMessage<::fedtree::SplitPoint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fedtree {

// ===================================================================

class FIDBatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.FIDBatch) */ {
 public:
  inline FIDBatch() : FIDBatch(nullptr) {}
  ~FIDBatch() override;
  explicit PROTOBUF_CONSTEXPR FIDBatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FIDBatch(const FIDBatch& from);
  FIDBatch(FIDBatch&& from) noexcept
    : FIDBatch() {
    *this = ::std::move(from);
  }

  inline FIDBatch& operator=(const FIDBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline FIDBatch& operator=(FIDBatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FIDBatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const FIDBatch* internal_default_instance() {
    return reinterpret_cast<const FIDBatch*>(
               &_FIDBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FIDBatch& a, FIDBatch& b) {
    a.Swap(&b);
  }
  inline void Swap(FIDBatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FIDBatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FIDBatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FIDBatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FIDBatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FIDBatch& from) {
    FIDBatch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FIDBatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.FIDBatch";
  }
  protected:
  explicit FIDBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // repeated int32 id = 1 [packed = true];
  int id_size() const;
  private:
  int _internal_id_size() const;
  public:
  void clear_id();
  private:
  int32_t _internal_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_id() const;
  void _internal_add_id(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_id();
  public:
  int32_t id(int index) const;
  void set_id(int index, int32_t value);
  void add_id(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_id();

  // @@protoc_insertion_point(class_scope:fedtree.FIDBatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > id_;
    mutable std::atomic<int> _id_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class GHBatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.GHBatch) */ {
 public:
  inline GHBatch() : GHBatch(nullptr) {}
  ~GHBatch() override;
  explicit PROTOBUF_CONSTEXPR GHBatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GHBatch(const GHBatch& from);
  GHBatch(GHBatch&& from) noexcept
    : GHBatch() {
    *this = ::std::move(from);
  }

  inline GHBatch& operator=(const GHBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline GHBatch& operator=(GHBatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GHBatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const GHBatch* internal_default_instance() {
    return reinterpret_cast<const GHBatch*>(
               &_GHBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GHBatch& a, GHBatch& b) {
    a.Swap(&b);
  }
  inline void Swap(GHBatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GHBatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GHBatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GHBatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GHBatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GHBatch& from) {
    GHBatch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GHBatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.GHBatch";
  }
  protected:
  explicit GHBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGFieldNumber = 1,
    kHFieldNumber = 2,
  };
  // repeated double g = 1 [packed = true];
  int g_size() const;
  private:
  int _internal_g_size() const;
  public:
  void clear_g();
  private:
  double _internal_g(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_g() const;
  void _internal_add_g(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_g();
  public:
  double g(int index) const;
  void set_g(int index, double value);
  void add_g(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      g() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_g();

  // repeated double h = 2 [packed = true];
  int h_size() const;
  private:
  int _internal_h_size() const;
  public:
  void clear_h();
  private:
  double _internal_h(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_h() const;
  void _internal_add_h(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_h();
  public:
  double h(int index) const;
  void set_h(int index, double value);
  void add_h(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      h() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_h();

  // @@protoc_insertion_point(class_scope:fedtree.GHBatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > g_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > h_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class GHEncBatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.GHEncBatch) */ {
 public:
  inline GHEncBatch() : GHEncBatch(nullptr) {}
  ~GHEncBatch() override;
  explicit PROTOBUF_CONSTEXPR GHEncBatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GHEncBatch(const GHEncBatch& from);
  GHEncBatch(GHEncBatch&& from) noexcept
    : GHEncBatch() {
    *this = ::std::move(from);
  }

  inline GHEncBatch& operator=(const GHEncBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline GHEncBatch& operator=(GHEncBatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GHEncBatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const GHEncBatch* internal_default_instance() {
    return reinterpret_cast<const GHEncBatch*>(
               &_GHEncBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GHEncBatch& a, GHEncBatch& b) {
    a.Swap(&b);
  }
  inline void Swap(GHEncBatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GHEncBatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GHEncBatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GHEncBatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GHEncBatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GHEncBatch& from) {
    GHEncBatch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GHEncBatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.GHEncBatch";
  }
  protected:
  explicit GHEncBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGEncFieldNumber = 1,
    kHEncFieldNumber = 2,
  };
  // repeated string g_enc = 1;
  int g_enc_size() const;
  private:
  int _internal_g_enc_size() const;
  public:
  void clear_g_enc();
  const std::string& g_enc(int index) const;
  std::string* mutable_g_enc(int index);
  void set_g_enc(int index, const std::string& value);
  void set_g_enc(int index, std::string&& value);
  void set_g_enc(int index, const char* value);
  void set_g_enc(int index, const char* value, size_t size);
  std::string* add_g_enc();
  void add_g_enc(const std::string& value);
  void add_g_enc(std::string&& value);
  void add_g_enc(const char* value);
  void add_g_enc(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& g_enc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_g_enc();
  private:
  const std::string& _internal_g_enc(int index) const;
  std::string* _internal_add_g_enc();
  public:

  // repeated string h_enc = 2;
  int h_enc_size() const;
  private:
  int _internal_h_enc_size() const;
  public:
  void clear_h_enc();
  const std::string& h_enc(int index) const;
  std::string* mutable_h_enc(int index);
  void set_h_enc(int index, const std::string& value);
  void set_h_enc(int index, std::string&& value);
  void set_h_enc(int index, const char* value);
  void set_h_enc(int index, const char* value, size_t size);
  std::string* add_h_enc();
  void add_h_enc(const std::string& value);
  void add_h_enc(std::string&& value);
  void add_h_enc(const char* value);
  void add_h_enc(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& h_enc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_h_enc();
  private:
  const std::string& _internal_h_enc(int index) const;
  std::string* _internal_add_h_enc();
  public:

  // @@protoc_insertion_point(class_scope:fedtree.GHEncBatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> g_enc_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> h_enc_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class GHPair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.GHPair) */ {
 public:
  inline GHPair() : GHPair(nullptr) {}
  ~GHPair() override;
  explicit PROTOBUF_CONSTEXPR GHPair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GHPair(const GHPair& from);
  GHPair(GHPair&& from) noexcept
    : GHPair() {
    *this = ::std::move(from);
  }

  inline GHPair& operator=(const GHPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline GHPair& operator=(GHPair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GHPair& default_instance() {
    return *internal_default_instance();
  }
  static inline const GHPair* internal_default_instance() {
    return reinterpret_cast<const GHPair*>(
               &_GHPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GHPair& a, GHPair& b) {
    a.Swap(&b);
  }
  inline void Swap(GHPair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GHPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GHPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GHPair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GHPair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GHPair& from) {
    GHPair::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GHPair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.GHPair";
  }
  protected:
  explicit GHPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGFieldNumber = 1,
    kHFieldNumber = 2,
  };
  // double g = 1;
  void clear_g();
  double g() const;
  void set_g(double value);
  private:
  double _internal_g() const;
  void _internal_set_g(double value);
  public:

  // double h = 2;
  void clear_h();
  double h() const;
  void set_h(double value);
  private:
  double _internal_h() const;
  void _internal_set_h(double value);
  public:

  // @@protoc_insertion_point(class_scope:fedtree.GHPair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double g_;
    double h_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class GHArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.GHArray) */ {
 public:
  inline GHArray() : GHArray(nullptr) {}
  ~GHArray() override;
  explicit PROTOBUF_CONSTEXPR GHArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GHArray(const GHArray& from);
  GHArray(GHArray&& from) noexcept
    : GHArray() {
    *this = ::std::move(from);
  }

  inline GHArray& operator=(const GHArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline GHArray& operator=(GHArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GHArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const GHArray* internal_default_instance() {
    return reinterpret_cast<const GHArray*>(
               &_GHArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GHArray& a, GHArray& b) {
    a.Swap(&b);
  }
  inline void Swap(GHArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GHArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GHArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GHArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GHArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GHArray& from) {
    GHArray::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GHArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.GHArray";
  }
  protected:
  explicit GHArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGFieldNumber = 1,
  };
  // repeated double g = 1 [packed = true];
  int g_size() const;
  private:
  int _internal_g_size() const;
  public:
  void clear_g();
  private:
  double _internal_g(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_g() const;
  void _internal_add_g(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_g();
  public:
  double g(int index) const;
  void set_g(int index, double value);
  void add_g(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      g() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_g();

  // @@protoc_insertion_point(class_scope:fedtree.GHArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > g_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class GHPairEnc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.GHPairEnc) */ {
 public:
  inline GHPairEnc() : GHPairEnc(nullptr) {}
  ~GHPairEnc() override;
  explicit PROTOBUF_CONSTEXPR GHPairEnc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GHPairEnc(const GHPairEnc& from);
  GHPairEnc(GHPairEnc&& from) noexcept
    : GHPairEnc() {
    *this = ::std::move(from);
  }

  inline GHPairEnc& operator=(const GHPairEnc& from) {
    CopyFrom(from);
    return *this;
  }
  inline GHPairEnc& operator=(GHPairEnc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GHPairEnc& default_instance() {
    return *internal_default_instance();
  }
  static inline const GHPairEnc* internal_default_instance() {
    return reinterpret_cast<const GHPairEnc*>(
               &_GHPairEnc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GHPairEnc& a, GHPairEnc& b) {
    a.Swap(&b);
  }
  inline void Swap(GHPairEnc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GHPairEnc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GHPairEnc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GHPairEnc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GHPairEnc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GHPairEnc& from) {
    GHPairEnc::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GHPairEnc* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.GHPairEnc";
  }
  protected:
  explicit GHPairEnc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGEncFieldNumber = 1,
    kHEncFieldNumber = 2,
  };
  // string g_enc = 1;
  void clear_g_enc();
  const std::string& g_enc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_g_enc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_g_enc();
  PROTOBUF_NODISCARD std::string* release_g_enc();
  void set_allocated_g_enc(std::string* g_enc);
  private:
  const std::string& _internal_g_enc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_g_enc(const std::string& value);
  std::string* _internal_mutable_g_enc();
  public:

  // string h_enc = 2;
  void clear_h_enc();
  const std::string& h_enc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_h_enc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_h_enc();
  PROTOBUF_NODISCARD std::string* release_h_enc();
  void set_allocated_h_enc(std::string* h_enc);
  private:
  const std::string& _internal_h_enc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_h_enc(const std::string& value);
  std::string* _internal_mutable_h_enc();
  public:

  // @@protoc_insertion_point(class_scope:fedtree.GHPairEnc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr g_enc_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr h_enc_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class Paillier final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.Paillier) */ {
 public:
  inline Paillier() : Paillier(nullptr) {}
  ~Paillier() override;
  explicit PROTOBUF_CONSTEXPR Paillier(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Paillier(const Paillier& from);
  Paillier(Paillier&& from) noexcept
    : Paillier() {
    *this = ::std::move(from);
  }

  inline Paillier& operator=(const Paillier& from) {
    CopyFrom(from);
    return *this;
  }
  inline Paillier& operator=(Paillier&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Paillier& default_instance() {
    return *internal_default_instance();
  }
  static inline const Paillier* internal_default_instance() {
    return reinterpret_cast<const Paillier*>(
               &_Paillier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Paillier& a, Paillier& b) {
    a.Swap(&b);
  }
  inline void Swap(Paillier* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Paillier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Paillier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Paillier>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Paillier& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Paillier& from) {
    Paillier::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Paillier* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.Paillier";
  }
  protected:
  explicit Paillier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModulusFieldNumber = 1,
    kGeneratorFieldNumber = 2,
  };
  // string modulus = 1;
  void clear_modulus();
  const std::string& modulus() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_modulus(ArgT0&& arg0, ArgT... args);
  std::string* mutable_modulus();
  PROTOBUF_NODISCARD std::string* release_modulus();
  void set_allocated_modulus(std::string* modulus);
  private:
  const std::string& _internal_modulus() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_modulus(const std::string& value);
  std::string* _internal_mutable_modulus();
  public:

  // string generator = 2;
  void clear_generator();
  const std::string& generator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_generator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_generator();
  PROTOBUF_NODISCARD std::string* release_generator();
  void set_allocated_generator(std::string* generator);
  private:
  const std::string& _internal_generator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_generator(const std::string& value);
  std::string* _internal_mutable_generator();
  public:

  // @@protoc_insertion_point(class_scope:fedtree.Paillier)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modulus_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr generator_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class SplitPoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.SplitPoint) */ {
 public:
  inline SplitPoint() : SplitPoint(nullptr) {}
  ~SplitPoint() override;
  explicit PROTOBUF_CONSTEXPR SplitPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SplitPoint(const SplitPoint& from);
  SplitPoint(SplitPoint&& from) noexcept
    : SplitPoint() {
    *this = ::std::move(from);
  }

  inline SplitPoint& operator=(const SplitPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline SplitPoint& operator=(SplitPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SplitPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const SplitPoint* internal_default_instance() {
    return reinterpret_cast<const SplitPoint*>(
               &_SplitPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SplitPoint& a, SplitPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(SplitPoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SplitPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SplitPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SplitPoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SplitPoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SplitPoint& from) {
    SplitPoint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SplitPoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.SplitPoint";
  }
  protected:
  explicit SplitPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGainFieldNumber = 1,
    kFeaMissingGFieldNumber = 2,
    kFeaMissingHFieldNumber = 3,
    kRchSumGFieldNumber = 4,
    kRchSumHFieldNumber = 5,
    kNidFieldNumber = 7,
    kSplitFeaIdFieldNumber = 8,
    kDefaultRightFieldNumber = 6,
    kNoSplitValueUpdateFieldNumber = 11,
    kFvalFieldNumber = 9,
    kSplitBidFieldNumber = 10,
  };
  // float gain = 1;
  void clear_gain();
  float gain() const;
  void set_gain(float value);
  private:
  float _internal_gain() const;
  void _internal_set_gain(float value);
  public:

  // float fea_missing_g = 2;
  void clear_fea_missing_g();
  float fea_missing_g() const;
  void set_fea_missing_g(float value);
  private:
  float _internal_fea_missing_g() const;
  void _internal_set_fea_missing_g(float value);
  public:

  // float fea_missing_h = 3;
  void clear_fea_missing_h();
  float fea_missing_h() const;
  void set_fea_missing_h(float value);
  private:
  float _internal_fea_missing_h() const;
  void _internal_set_fea_missing_h(float value);
  public:

  // float rch_sum_g = 4;
  void clear_rch_sum_g();
  float rch_sum_g() const;
  void set_rch_sum_g(float value);
  private:
  float _internal_rch_sum_g() const;
  void _internal_set_rch_sum_g(float value);
  public:

  // float rch_sum_h = 5;
  void clear_rch_sum_h();
  float rch_sum_h() const;
  void set_rch_sum_h(float value);
  private:
  float _internal_rch_sum_h() const;
  void _internal_set_rch_sum_h(float value);
  public:

  // int32 nid = 7;
  void clear_nid();
  int32_t nid() const;
  void set_nid(int32_t value);
  private:
  int32_t _internal_nid() const;
  void _internal_set_nid(int32_t value);
  public:

  // int32 split_fea_id = 8;
  void clear_split_fea_id();
  int32_t split_fea_id() const;
  void set_split_fea_id(int32_t value);
  private:
  int32_t _internal_split_fea_id() const;
  void _internal_set_split_fea_id(int32_t value);
  public:

  // bool default_right = 6;
  void clear_default_right();
  bool default_right() const;
  void set_default_right(bool value);
  private:
  bool _internal_default_right() const;
  void _internal_set_default_right(bool value);
  public:

  // bool no_split_value_update = 11;
  void clear_no_split_value_update();
  bool no_split_value_update() const;
  void set_no_split_value_update(bool value);
  private:
  bool _internal_no_split_value_update() const;
  void _internal_set_no_split_value_update(bool value);
  public:

  // float fval = 9;
  void clear_fval();
  float fval() const;
  void set_fval(float value);
  private:
  float _internal_fval() const;
  void _internal_set_fval(float value);
  public:

  // int32 split_bid = 10;
  void clear_split_bid();
  int32_t split_bid() const;
  void set_split_bid(int32_t value);
  private:
  int32_t _internal_split_bid() const;
  void _internal_set_split_bid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:fedtree.SplitPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float gain_;
    float fea_missing_g_;
    float fea_missing_h_;
    float rch_sum_g_;
    float rch_sum_h_;
    int32_t nid_;
    int32_t split_fea_id_;
    bool default_right_;
    bool no_split_value_update_;
    float fval_;
    int32_t split_bid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class Score final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.Score) */ {
 public:
  inline Score() : Score(nullptr) {}
  ~Score() override;
  explicit PROTOBUF_CONSTEXPR Score(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Score(const Score& from);
  Score(Score&& from) noexcept
    : Score() {
    *this = ::std::move(from);
  }

  inline Score& operator=(const Score& from) {
    CopyFrom(from);
    return *this;
  }
  inline Score& operator=(Score&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Score& default_instance() {
    return *internal_default_instance();
  }
  static inline const Score* internal_default_instance() {
    return reinterpret_cast<const Score*>(
               &_Score_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Score& a, Score& b) {
    a.Swap(&b);
  }
  inline void Swap(Score* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Score* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Score* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Score>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Score& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Score& from) {
    Score::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Score* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.Score";
  }
  protected:
  explicit Score(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // float content = 1;
  void clear_content();
  float content() const;
  void set_content(float value);
  private:
  float _internal_content() const;
  void _internal_set_content(float value);
  public:

  // @@protoc_insertion_point(class_scope:fedtree.Score)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class PID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.PID) */ {
 public:
  inline PID() : PID(nullptr) {}
  ~PID() override;
  explicit PROTOBUF_CONSTEXPR PID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PID(const PID& from);
  PID(PID&& from) noexcept
    : PID() {
    *this = ::std::move(from);
  }

  inline PID& operator=(const PID& from) {
    CopyFrom(from);
    return *this;
  }
  inline PID& operator=(PID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PID& default_instance() {
    return *internal_default_instance();
  }
  static inline const PID* internal_default_instance() {
    return reinterpret_cast<const PID*>(
               &_PID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PID& a, PID& b) {
    a.Swap(&b);
  }
  inline void Swap(PID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PID& from) {
    PID::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PID* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.PID";
  }
  protected:
  explicit PID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:fedtree.PID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class Ready final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.Ready) */ {
 public:
  inline Ready() : Ready(nullptr) {}
  ~Ready() override;
  explicit PROTOBUF_CONSTEXPR Ready(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ready(const Ready& from);
  Ready(Ready&& from) noexcept
    : Ready() {
    *this = ::std::move(from);
  }

  inline Ready& operator=(const Ready& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ready& operator=(Ready&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ready& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ready* internal_default_instance() {
    return reinterpret_cast<const Ready*>(
               &_Ready_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Ready& a, Ready& b) {
    a.Swap(&b);
  }
  inline void Swap(Ready* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ready* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ready* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ready>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ready& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ready& from) {
    Ready::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ready* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.Ready";
  }
  protected:
  explicit Ready(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadyFieldNumber = 1,
  };
  // bool ready = 1;
  void clear_ready();
  bool ready() const;
  void set_ready(bool value);
  private:
  bool _internal_ready() const;
  void _internal_set_ready(bool value);
  public:

  // @@protoc_insertion_point(class_scope:fedtree.Ready)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool ready_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class DatasetInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.DatasetInfo) */ {
 public:
  inline DatasetInfo() : DatasetInfo(nullptr) {}
  ~DatasetInfo() override;
  explicit PROTOBUF_CONSTEXPR DatasetInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DatasetInfo(const DatasetInfo& from);
  DatasetInfo(DatasetInfo&& from) noexcept
    : DatasetInfo() {
    *this = ::std::move(from);
  }

  inline DatasetInfo& operator=(const DatasetInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DatasetInfo& operator=(DatasetInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DatasetInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DatasetInfo* internal_default_instance() {
    return reinterpret_cast<const DatasetInfo*>(
               &_DatasetInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DatasetInfo& a, DatasetInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DatasetInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DatasetInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DatasetInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DatasetInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DatasetInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DatasetInfo& from) {
    DatasetInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DatasetInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.DatasetInfo";
  }
  protected:
  explicit DatasetInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNBinsFieldNumber = 1,
    kNColumnsFieldNumber = 2,
  };
  // int32 n_bins = 1;
  void clear_n_bins();
  int32_t n_bins() const;
  void set_n_bins(int32_t value);
  private:
  int32_t _internal_n_bins() const;
  void _internal_set_n_bins(int32_t value);
  public:

  // int32 n_columns = 2;
  void clear_n_columns();
  int32_t n_columns() const;
  void set_n_columns(int32_t value);
  private:
  int32_t _internal_n_columns() const;
  void _internal_set_n_columns(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:fedtree.DatasetInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t n_bins_;
    int32_t n_columns_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class FID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.FID) */ {
 public:
  inline FID() : FID(nullptr) {}
  ~FID() override;
  explicit PROTOBUF_CONSTEXPR FID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FID(const FID& from);
  FID(FID&& from) noexcept
    : FID() {
    *this = ::std::move(from);
  }

  inline FID& operator=(const FID& from) {
    CopyFrom(from);
    return *this;
  }
  inline FID& operator=(FID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FID& default_instance() {
    return *internal_default_instance();
  }
  static inline const FID* internal_default_instance() {
    return reinterpret_cast<const FID*>(
               &_FID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(FID& a, FID& b) {
    a.Swap(&b);
  }
  inline void Swap(FID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FID& from) {
    FID::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FID* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.FID";
  }
  protected:
  explicit FID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:fedtree.FID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class BestInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.BestInfo) */ {
 public:
  inline BestInfo() : BestInfo(nullptr) {}
  ~BestInfo() override;
  explicit PROTOBUF_CONSTEXPR BestInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BestInfo(const BestInfo& from);
  BestInfo(BestInfo&& from) noexcept
    : BestInfo() {
    *this = ::std::move(from);
  }

  inline BestInfo& operator=(const BestInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BestInfo& operator=(BestInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BestInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BestInfo* internal_default_instance() {
    return reinterpret_cast<const BestInfo*>(
               &_BestInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(BestInfo& a, BestInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BestInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BestInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BestInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BestInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BestInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BestInfo& from) {
    BestInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BestInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.BestInfo";
  }
  protected:
  explicit BestInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
    kNidFieldNumber = 2,
    kIdxFieldNumber = 3,
    kGlobalFidFieldNumber = 4,
    kGainFieldNumber = 5,
  };
  // int32 pid = 1;
  void clear_pid();
  int32_t pid() const;
  void set_pid(int32_t value);
  private:
  int32_t _internal_pid() const;
  void _internal_set_pid(int32_t value);
  public:

  // int32 nid = 2;
  void clear_nid();
  int32_t nid() const;
  void set_nid(int32_t value);
  private:
  int32_t _internal_nid() const;
  void _internal_set_nid(int32_t value);
  public:

  // int32 idx = 3;
  void clear_idx();
  int32_t idx() const;
  void set_idx(int32_t value);
  private:
  int32_t _internal_idx() const;
  void _internal_set_idx(int32_t value);
  public:

  // int32 global_fid = 4;
  void clear_global_fid();
  int32_t global_fid() const;
  void set_global_fid(int32_t value);
  private:
  int32_t _internal_global_fid() const;
  void _internal_set_global_fid(int32_t value);
  public:

  // double gain = 5;
  void clear_gain();
  double gain() const;
  void set_gain(double value);
  private:
  double _internal_gain() const;
  void _internal_set_gain(double value);
  public:

  // @@protoc_insertion_point(class_scope:fedtree.BestInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t pid_;
    int32_t nid_;
    int32_t idx_;
    int32_t global_fid_;
    double gain_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class NodeEnc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.NodeEnc) */ {
 public:
  inline NodeEnc() : NodeEnc(nullptr) {}
  ~NodeEnc() override;
  explicit PROTOBUF_CONSTEXPR NodeEnc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeEnc(const NodeEnc& from);
  NodeEnc(NodeEnc&& from) noexcept
    : NodeEnc() {
    *this = ::std::move(from);
  }

  inline NodeEnc& operator=(const NodeEnc& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeEnc& operator=(NodeEnc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeEnc& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeEnc* internal_default_instance() {
    return reinterpret_cast<const NodeEnc*>(
               &_NodeEnc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(NodeEnc& a, NodeEnc& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeEnc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeEnc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeEnc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NodeEnc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NodeEnc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NodeEnc& from) {
    NodeEnc::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeEnc* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.NodeEnc";
  }
  protected:
  explicit NodeEnc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSumGhPairGEncFieldNumber = 15,
    kSumGhPairHEncFieldNumber = 16,
    kFinalIdFieldNumber = 1,
    kLchIndexFieldNumber = 2,
    kRchIndexFieldNumber = 3,
    kParentIndexFieldNumber = 4,
    kGainFieldNumber = 5,
    kBaseWeightFieldNumber = 6,
    kSplitFeatureIdFieldNumber = 7,
    kPidFieldNumber = 8,
    kSplitValueFieldNumber = 9,
    kSplitBidFieldNumber = 10,
    kDefaultRightFieldNumber = 11,
    kIsLeafFieldNumber = 12,
    kIsValidFieldNumber = 13,
    kIsPrunedFieldNumber = 14,
    kNInstancesFieldNumber = 17,
  };
  // string sum_gh_pair_g_enc = 15;
  void clear_sum_gh_pair_g_enc();
  const std::string& sum_gh_pair_g_enc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sum_gh_pair_g_enc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sum_gh_pair_g_enc();
  PROTOBUF_NODISCARD std::string* release_sum_gh_pair_g_enc();
  void set_allocated_sum_gh_pair_g_enc(std::string* sum_gh_pair_g_enc);
  private:
  const std::string& _internal_sum_gh_pair_g_enc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sum_gh_pair_g_enc(const std::string& value);
  std::string* _internal_mutable_sum_gh_pair_g_enc();
  public:

  // string sum_gh_pair_h_enc = 16;
  void clear_sum_gh_pair_h_enc();
  const std::string& sum_gh_pair_h_enc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sum_gh_pair_h_enc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sum_gh_pair_h_enc();
  PROTOBUF_NODISCARD std::string* release_sum_gh_pair_h_enc();
  void set_allocated_sum_gh_pair_h_enc(std::string* sum_gh_pair_h_enc);
  private:
  const std::string& _internal_sum_gh_pair_h_enc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sum_gh_pair_h_enc(const std::string& value);
  std::string* _internal_mutable_sum_gh_pair_h_enc();
  public:

  // int32 final_id = 1;
  void clear_final_id();
  int32_t final_id() const;
  void set_final_id(int32_t value);
  private:
  int32_t _internal_final_id() const;
  void _internal_set_final_id(int32_t value);
  public:

  // int32 lch_index = 2;
  void clear_lch_index();
  int32_t lch_index() const;
  void set_lch_index(int32_t value);
  private:
  int32_t _internal_lch_index() const;
  void _internal_set_lch_index(int32_t value);
  public:

  // int32 rch_index = 3;
  void clear_rch_index();
  int32_t rch_index() const;
  void set_rch_index(int32_t value);
  private:
  int32_t _internal_rch_index() const;
  void _internal_set_rch_index(int32_t value);
  public:

  // int32 parent_index = 4;
  void clear_parent_index();
  int32_t parent_index() const;
  void set_parent_index(int32_t value);
  private:
  int32_t _internal_parent_index() const;
  void _internal_set_parent_index(int32_t value);
  public:

  // float gain = 5;
  void clear_gain();
  float gain() const;
  void set_gain(float value);
  private:
  float _internal_gain() const;
  void _internal_set_gain(float value);
  public:

  // float base_weight = 6;
  void clear_base_weight();
  float base_weight() const;
  void set_base_weight(float value);
  private:
  float _internal_base_weight() const;
  void _internal_set_base_weight(float value);
  public:

  // int32 split_feature_id = 7;
  void clear_split_feature_id();
  int32_t split_feature_id() const;
  void set_split_feature_id(int32_t value);
  private:
  int32_t _internal_split_feature_id() const;
  void _internal_set_split_feature_id(int32_t value);
  public:

  // int32 pid = 8;
  void clear_pid();
  int32_t pid() const;
  void set_pid(int32_t value);
  private:
  int32_t _internal_pid() const;
  void _internal_set_pid(int32_t value);
  public:

  // float split_value = 9;
  void clear_split_value();
  float split_value() const;
  void set_split_value(float value);
  private:
  float _internal_split_value() const;
  void _internal_set_split_value(float value);
  public:

  // int32 split_bid = 10;
  void clear_split_bid();
  int32_t split_bid() const;
  void set_split_bid(int32_t value);
  private:
  int32_t _internal_split_bid() const;
  void _internal_set_split_bid(int32_t value);
  public:

  // bool default_right = 11;
  void clear_default_right();
  bool default_right() const;
  void set_default_right(bool value);
  private:
  bool _internal_default_right() const;
  void _internal_set_default_right(bool value);
  public:

  // bool is_leaf = 12;
  void clear_is_leaf();
  bool is_leaf() const;
  void set_is_leaf(bool value);
  private:
  bool _internal_is_leaf() const;
  void _internal_set_is_leaf(bool value);
  public:

  // bool is_valid = 13;
  void clear_is_valid();
  bool is_valid() const;
  void set_is_valid(bool value);
  private:
  bool _internal_is_valid() const;
  void _internal_set_is_valid(bool value);
  public:

  // bool is_pruned = 14;
  void clear_is_pruned();
  bool is_pruned() const;
  void set_is_pruned(bool value);
  private:
  bool _internal_is_pruned() const;
  void _internal_set_is_pruned(bool value);
  public:

  // int32 n_instances = 17;
  void clear_n_instances();
  int32_t n_instances() const;
  void set_n_instances(int32_t value);
  private:
  int32_t _internal_n_instances() const;
  void _internal_set_n_instances(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:fedtree.NodeEnc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sum_gh_pair_g_enc_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sum_gh_pair_h_enc_;
    int32_t final_id_;
    int32_t lch_index_;
    int32_t rch_index_;
    int32_t parent_index_;
    float gain_;
    float base_weight_;
    int32_t split_feature_id_;
    int32_t pid_;
    float split_value_;
    int32_t split_bid_;
    bool default_right_;
    bool is_leaf_;
    bool is_valid_;
    bool is_pruned_;
    int32_t n_instances_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class Node final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.Node) */ {
 public:
  inline Node() : Node(nullptr) {}
  ~Node() override;
  explicit PROTOBUF_CONSTEXPR Node(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Node& default_instance() {
    return *internal_default_instance();
  }
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Node& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Node& from) {
    Node::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.Node";
  }
  protected:
  explicit Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFinalIdFieldNumber = 1,
    kLchIndexFieldNumber = 2,
    kRchIndexFieldNumber = 3,
    kParentIndexFieldNumber = 4,
    kGainFieldNumber = 5,
    kBaseWeightFieldNumber = 6,
    kSplitFeatureIdFieldNumber = 7,
    kPidFieldNumber = 8,
    kSplitValueFieldNumber = 9,
    kSplitBidFieldNumber = 10,
    kDefaultRightFieldNumber = 11,
    kIsLeafFieldNumber = 12,
    kIsValidFieldNumber = 13,
    kIsPrunedFieldNumber = 14,
    kSumGhPairGFieldNumber = 15,
    kSumGhPairHFieldNumber = 16,
    kNInstancesFieldNumber = 17,
  };
  // int32 final_id = 1;
  void clear_final_id();
  int32_t final_id() const;
  void set_final_id(int32_t value);
  private:
  int32_t _internal_final_id() const;
  void _internal_set_final_id(int32_t value);
  public:

  // int32 lch_index = 2;
  void clear_lch_index();
  int32_t lch_index() const;
  void set_lch_index(int32_t value);
  private:
  int32_t _internal_lch_index() const;
  void _internal_set_lch_index(int32_t value);
  public:

  // int32 rch_index = 3;
  void clear_rch_index();
  int32_t rch_index() const;
  void set_rch_index(int32_t value);
  private:
  int32_t _internal_rch_index() const;
  void _internal_set_rch_index(int32_t value);
  public:

  // int32 parent_index = 4;
  void clear_parent_index();
  int32_t parent_index() const;
  void set_parent_index(int32_t value);
  private:
  int32_t _internal_parent_index() const;
  void _internal_set_parent_index(int32_t value);
  public:

  // float gain = 5;
  void clear_gain();
  float gain() const;
  void set_gain(float value);
  private:
  float _internal_gain() const;
  void _internal_set_gain(float value);
  public:

  // float base_weight = 6;
  void clear_base_weight();
  float base_weight() const;
  void set_base_weight(float value);
  private:
  float _internal_base_weight() const;
  void _internal_set_base_weight(float value);
  public:

  // int32 split_feature_id = 7;
  void clear_split_feature_id();
  int32_t split_feature_id() const;
  void set_split_feature_id(int32_t value);
  private:
  int32_t _internal_split_feature_id() const;
  void _internal_set_split_feature_id(int32_t value);
  public:

  // int32 pid = 8;
  void clear_pid();
  int32_t pid() const;
  void set_pid(int32_t value);
  private:
  int32_t _internal_pid() const;
  void _internal_set_pid(int32_t value);
  public:

  // float split_value = 9;
  void clear_split_value();
  float split_value() const;
  void set_split_value(float value);
  private:
  float _internal_split_value() const;
  void _internal_set_split_value(float value);
  public:

  // int32 split_bid = 10;
  void clear_split_bid();
  int32_t split_bid() const;
  void set_split_bid(int32_t value);
  private:
  int32_t _internal_split_bid() const;
  void _internal_set_split_bid(int32_t value);
  public:

  // bool default_right = 11;
  void clear_default_right();
  bool default_right() const;
  void set_default_right(bool value);
  private:
  bool _internal_default_right() const;
  void _internal_set_default_right(bool value);
  public:

  // bool is_leaf = 12;
  void clear_is_leaf();
  bool is_leaf() const;
  void set_is_leaf(bool value);
  private:
  bool _internal_is_leaf() const;
  void _internal_set_is_leaf(bool value);
  public:

  // bool is_valid = 13;
  void clear_is_valid();
  bool is_valid() const;
  void set_is_valid(bool value);
  private:
  bool _internal_is_valid() const;
  void _internal_set_is_valid(bool value);
  public:

  // bool is_pruned = 14;
  void clear_is_pruned();
  bool is_pruned() const;
  void set_is_pruned(bool value);
  private:
  bool _internal_is_pruned() const;
  void _internal_set_is_pruned(bool value);
  public:

  // float sum_gh_pair_g = 15;
  void clear_sum_gh_pair_g();
  float sum_gh_pair_g() const;
  void set_sum_gh_pair_g(float value);
  private:
  float _internal_sum_gh_pair_g() const;
  void _internal_set_sum_gh_pair_g(float value);
  public:

  // float sum_gh_pair_h = 16;
  void clear_sum_gh_pair_h();
  float sum_gh_pair_h() const;
  void set_sum_gh_pair_h(float value);
  private:
  float _internal_sum_gh_pair_h() const;
  void _internal_set_sum_gh_pair_h(float value);
  public:

  // int32 n_instances = 17;
  void clear_n_instances();
  int32_t n_instances() const;
  void set_n_instances(int32_t value);
  private:
  int32_t _internal_n_instances() const;
  void _internal_set_n_instances(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:fedtree.Node)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t final_id_;
    int32_t lch_index_;
    int32_t rch_index_;
    int32_t parent_index_;
    float gain_;
    float base_weight_;
    int32_t split_feature_id_;
    int32_t pid_;
    float split_value_;
    int32_t split_bid_;
    bool default_right_;
    bool is_leaf_;
    bool is_valid_;
    bool is_pruned_;
    float sum_gh_pair_g_;
    float sum_gh_pair_h_;
    int32_t n_instances_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class NodeEncArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.NodeEncArray) */ {
 public:
  inline NodeEncArray() : NodeEncArray(nullptr) {}
  ~NodeEncArray() override;
  explicit PROTOBUF_CONSTEXPR NodeEncArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeEncArray(const NodeEncArray& from);
  NodeEncArray(NodeEncArray&& from) noexcept
    : NodeEncArray() {
    *this = ::std::move(from);
  }

  inline NodeEncArray& operator=(const NodeEncArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeEncArray& operator=(NodeEncArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeEncArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeEncArray* internal_default_instance() {
    return reinterpret_cast<const NodeEncArray*>(
               &_NodeEncArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(NodeEncArray& a, NodeEncArray& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeEncArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeEncArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeEncArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NodeEncArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NodeEncArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NodeEncArray& from) {
    NodeEncArray::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeEncArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.NodeEncArray";
  }
  protected:
  explicit NodeEncArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFinalIdFieldNumber = 1,
    kLchIndexFieldNumber = 2,
    kRchIndexFieldNumber = 3,
    kParentIndexFieldNumber = 4,
    kGainFieldNumber = 5,
    kBaseWeightFieldNumber = 6,
    kSplitFeatureIdFieldNumber = 7,
    kPidFieldNumber = 8,
    kSplitValueFieldNumber = 9,
    kSplitBidFieldNumber = 10,
    kDefaultRightFieldNumber = 11,
    kIsLeafFieldNumber = 12,
    kIsValidFieldNumber = 13,
    kIsPrunedFieldNumber = 14,
    kSumGhPairGEncFieldNumber = 15,
    kSumGhPairHEncFieldNumber = 16,
    kNInstancesFieldNumber = 17,
  };
  // repeated int32 final_id = 1 [packed = true];
  int final_id_size() const;
  private:
  int _internal_final_id_size() const;
  public:
  void clear_final_id();
  private:
  int32_t _internal_final_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_final_id() const;
  void _internal_add_final_id(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_final_id();
  public:
  int32_t final_id(int index) const;
  void set_final_id(int index, int32_t value);
  void add_final_id(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      final_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_final_id();

  // repeated int32 lch_index = 2 [packed = true];
  int lch_index_size() const;
  private:
  int _internal_lch_index_size() const;
  public:
  void clear_lch_index();
  private:
  int32_t _internal_lch_index(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_lch_index() const;
  void _internal_add_lch_index(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_lch_index();
  public:
  int32_t lch_index(int index) const;
  void set_lch_index(int index, int32_t value);
  void add_lch_index(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      lch_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_lch_index();

  // repeated int32 rch_index = 3 [packed = true];
  int rch_index_size() const;
  private:
  int _internal_rch_index_size() const;
  public:
  void clear_rch_index();
  private:
  int32_t _internal_rch_index(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_rch_index() const;
  void _internal_add_rch_index(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_rch_index();
  public:
  int32_t rch_index(int index) const;
  void set_rch_index(int index, int32_t value);
  void add_rch_index(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      rch_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_rch_index();

  // repeated int32 parent_index = 4 [packed = true];
  int parent_index_size() const;
  private:
  int _internal_parent_index_size() const;
  public:
  void clear_parent_index();
  private:
  int32_t _internal_parent_index(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_parent_index() const;
  void _internal_add_parent_index(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_parent_index();
  public:
  int32_t parent_index(int index) const;
  void set_parent_index(int index, int32_t value);
  void add_parent_index(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      parent_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_parent_index();

  // repeated float gain = 5 [packed = true];
  int gain_size() const;
  private:
  int _internal_gain_size() const;
  public:
  void clear_gain();
  private:
  float _internal_gain(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_gain() const;
  void _internal_add_gain(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_gain();
  public:
  float gain(int index) const;
  void set_gain(int index, float value);
  void add_gain(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      gain() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_gain();

  // repeated float base_weight = 6 [packed = true];
  int base_weight_size() const;
  private:
  int _internal_base_weight_size() const;
  public:
  void clear_base_weight();
  private:
  float _internal_base_weight(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_base_weight() const;
  void _internal_add_base_weight(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_base_weight();
  public:
  float base_weight(int index) const;
  void set_base_weight(int index, float value);
  void add_base_weight(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      base_weight() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_base_weight();

  // repeated int32 split_feature_id = 7 [packed = true];
  int split_feature_id_size() const;
  private:
  int _internal_split_feature_id_size() const;
  public:
  void clear_split_feature_id();
  private:
  int32_t _internal_split_feature_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_split_feature_id() const;
  void _internal_add_split_feature_id(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_split_feature_id();
  public:
  int32_t split_feature_id(int index) const;
  void set_split_feature_id(int index, int32_t value);
  void add_split_feature_id(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      split_feature_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_split_feature_id();

  // repeated int32 pid = 8 [packed = true];
  int pid_size() const;
  private:
  int _internal_pid_size() const;
  public:
  void clear_pid();
  private:
  int32_t _internal_pid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_pid() const;
  void _internal_add_pid(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_pid();
  public:
  int32_t pid(int index) const;
  void set_pid(int index, int32_t value);
  void add_pid(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      pid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_pid();

  // repeated float split_value = 9 [packed = true];
  int split_value_size() const;
  private:
  int _internal_split_value_size() const;
  public:
  void clear_split_value();
  private:
  float _internal_split_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_split_value() const;
  void _internal_add_split_value(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_split_value();
  public:
  float split_value(int index) const;
  void set_split_value(int index, float value);
  void add_split_value(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      split_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_split_value();

  // repeated int32 split_bid = 10 [packed = true];
  int split_bid_size() const;
  private:
  int _internal_split_bid_size() const;
  public:
  void clear_split_bid();
  private:
  int32_t _internal_split_bid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_split_bid() const;
  void _internal_add_split_bid(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_split_bid();
  public:
  int32_t split_bid(int index) const;
  void set_split_bid(int index, int32_t value);
  void add_split_bid(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      split_bid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_split_bid();

  // repeated bool default_right = 11 [packed = true];
  int default_right_size() const;
  private:
  int _internal_default_right_size() const;
  public:
  void clear_default_right();
  private:
  bool _internal_default_right(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_default_right() const;
  void _internal_add_default_right(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_default_right();
  public:
  bool default_right(int index) const;
  void set_default_right(int index, bool value);
  void add_default_right(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      default_right() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_default_right();

  // repeated bool is_leaf = 12 [packed = true];
  int is_leaf_size() const;
  private:
  int _internal_is_leaf_size() const;
  public:
  void clear_is_leaf();
  private:
  bool _internal_is_leaf(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_is_leaf() const;
  void _internal_add_is_leaf(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_is_leaf();
  public:
  bool is_leaf(int index) const;
  void set_is_leaf(int index, bool value);
  void add_is_leaf(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      is_leaf() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_is_leaf();

  // repeated bool is_valid = 13 [packed = true];
  int is_valid_size() const;
  private:
  int _internal_is_valid_size() const;
  public:
  void clear_is_valid();
  private:
  bool _internal_is_valid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_is_valid() const;
  void _internal_add_is_valid(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_is_valid();
  public:
  bool is_valid(int index) const;
  void set_is_valid(int index, bool value);
  void add_is_valid(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      is_valid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_is_valid();

  // repeated bool is_pruned = 14 [packed = true];
  int is_pruned_size() const;
  private:
  int _internal_is_pruned_size() const;
  public:
  void clear_is_pruned();
  private:
  bool _internal_is_pruned(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_is_pruned() const;
  void _internal_add_is_pruned(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_is_pruned();
  public:
  bool is_pruned(int index) const;
  void set_is_pruned(int index, bool value);
  void add_is_pruned(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      is_pruned() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_is_pruned();

  // repeated string sum_gh_pair_g_enc = 15;
  int sum_gh_pair_g_enc_size() const;
  private:
  int _internal_sum_gh_pair_g_enc_size() const;
  public:
  void clear_sum_gh_pair_g_enc();
  const std::string& sum_gh_pair_g_enc(int index) const;
  std::string* mutable_sum_gh_pair_g_enc(int index);
  void set_sum_gh_pair_g_enc(int index, const std::string& value);
  void set_sum_gh_pair_g_enc(int index, std::string&& value);
  void set_sum_gh_pair_g_enc(int index, const char* value);
  void set_sum_gh_pair_g_enc(int index, const char* value, size_t size);
  std::string* add_sum_gh_pair_g_enc();
  void add_sum_gh_pair_g_enc(const std::string& value);
  void add_sum_gh_pair_g_enc(std::string&& value);
  void add_sum_gh_pair_g_enc(const char* value);
  void add_sum_gh_pair_g_enc(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& sum_gh_pair_g_enc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_sum_gh_pair_g_enc();
  private:
  const std::string& _internal_sum_gh_pair_g_enc(int index) const;
  std::string* _internal_add_sum_gh_pair_g_enc();
  public:

  // repeated string sum_gh_pair_h_enc = 16;
  int sum_gh_pair_h_enc_size() const;
  private:
  int _internal_sum_gh_pair_h_enc_size() const;
  public:
  void clear_sum_gh_pair_h_enc();
  const std::string& sum_gh_pair_h_enc(int index) const;
  std::string* mutable_sum_gh_pair_h_enc(int index);
  void set_sum_gh_pair_h_enc(int index, const std::string& value);
  void set_sum_gh_pair_h_enc(int index, std::string&& value);
  void set_sum_gh_pair_h_enc(int index, const char* value);
  void set_sum_gh_pair_h_enc(int index, const char* value, size_t size);
  std::string* add_sum_gh_pair_h_enc();
  void add_sum_gh_pair_h_enc(const std::string& value);
  void add_sum_gh_pair_h_enc(std::string&& value);
  void add_sum_gh_pair_h_enc(const char* value);
  void add_sum_gh_pair_h_enc(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& sum_gh_pair_h_enc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_sum_gh_pair_h_enc();
  private:
  const std::string& _internal_sum_gh_pair_h_enc(int index) const;
  std::string* _internal_add_sum_gh_pair_h_enc();
  public:

  // repeated int32 n_instances = 17 [packed = true];
  int n_instances_size() const;
  private:
  int _internal_n_instances_size() const;
  public:
  void clear_n_instances();
  private:
  int32_t _internal_n_instances(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_n_instances() const;
  void _internal_add_n_instances(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_n_instances();
  public:
  int32_t n_instances(int index) const;
  void set_n_instances(int index, int32_t value);
  void add_n_instances(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      n_instances() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_n_instances();

  // @@protoc_insertion_point(class_scope:fedtree.NodeEncArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > final_id_;
    mutable std::atomic<int> _final_id_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > lch_index_;
    mutable std::atomic<int> _lch_index_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > rch_index_;
    mutable std::atomic<int> _rch_index_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > parent_index_;
    mutable std::atomic<int> _parent_index_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > gain_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > base_weight_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > split_feature_id_;
    mutable std::atomic<int> _split_feature_id_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > pid_;
    mutable std::atomic<int> _pid_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > split_value_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > split_bid_;
    mutable std::atomic<int> _split_bid_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > default_right_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > is_leaf_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > is_valid_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > is_pruned_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> sum_gh_pair_g_enc_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> sum_gh_pair_h_enc_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > n_instances_;
    mutable std::atomic<int> _n_instances_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class NodeArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.NodeArray) */ {
 public:
  inline NodeArray() : NodeArray(nullptr) {}
  ~NodeArray() override;
  explicit PROTOBUF_CONSTEXPR NodeArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeArray(const NodeArray& from);
  NodeArray(NodeArray&& from) noexcept
    : NodeArray() {
    *this = ::std::move(from);
  }

  inline NodeArray& operator=(const NodeArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeArray& operator=(NodeArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeArray* internal_default_instance() {
    return reinterpret_cast<const NodeArray*>(
               &_NodeArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(NodeArray& a, NodeArray& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NodeArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NodeArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NodeArray& from) {
    NodeArray::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.NodeArray";
  }
  protected:
  explicit NodeArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFinalIdFieldNumber = 1,
    kLchIndexFieldNumber = 2,
    kRchIndexFieldNumber = 3,
    kParentIndexFieldNumber = 4,
    kGainFieldNumber = 5,
    kBaseWeightFieldNumber = 6,
    kSplitFeatureIdFieldNumber = 7,
    kPidFieldNumber = 8,
    kSplitValueFieldNumber = 9,
    kSplitBidFieldNumber = 10,
    kDefaultRightFieldNumber = 11,
    kIsLeafFieldNumber = 12,
    kIsValidFieldNumber = 13,
    kIsPrunedFieldNumber = 14,
    kSumGhPairGFieldNumber = 15,
    kSumGhPairHFieldNumber = 16,
    kNInstancesFieldNumber = 17,
  };
  // repeated int32 final_id = 1 [packed = true];
  int final_id_size() const;
  private:
  int _internal_final_id_size() const;
  public:
  void clear_final_id();
  private:
  int32_t _internal_final_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_final_id() const;
  void _internal_add_final_id(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_final_id();
  public:
  int32_t final_id(int index) const;
  void set_final_id(int index, int32_t value);
  void add_final_id(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      final_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_final_id();

  // repeated int32 lch_index = 2 [packed = true];
  int lch_index_size() const;
  private:
  int _internal_lch_index_size() const;
  public:
  void clear_lch_index();
  private:
  int32_t _internal_lch_index(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_lch_index() const;
  void _internal_add_lch_index(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_lch_index();
  public:
  int32_t lch_index(int index) const;
  void set_lch_index(int index, int32_t value);
  void add_lch_index(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      lch_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_lch_index();

  // repeated int32 rch_index = 3 [packed = true];
  int rch_index_size() const;
  private:
  int _internal_rch_index_size() const;
  public:
  void clear_rch_index();
  private:
  int32_t _internal_rch_index(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_rch_index() const;
  void _internal_add_rch_index(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_rch_index();
  public:
  int32_t rch_index(int index) const;
  void set_rch_index(int index, int32_t value);
  void add_rch_index(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      rch_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_rch_index();

  // repeated int32 parent_index = 4 [packed = true];
  int parent_index_size() const;
  private:
  int _internal_parent_index_size() const;
  public:
  void clear_parent_index();
  private:
  int32_t _internal_parent_index(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_parent_index() const;
  void _internal_add_parent_index(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_parent_index();
  public:
  int32_t parent_index(int index) const;
  void set_parent_index(int index, int32_t value);
  void add_parent_index(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      parent_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_parent_index();

  // repeated float gain = 5 [packed = true];
  int gain_size() const;
  private:
  int _internal_gain_size() const;
  public:
  void clear_gain();
  private:
  float _internal_gain(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_gain() const;
  void _internal_add_gain(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_gain();
  public:
  float gain(int index) const;
  void set_gain(int index, float value);
  void add_gain(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      gain() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_gain();

  // repeated float base_weight = 6 [packed = true];
  int base_weight_size() const;
  private:
  int _internal_base_weight_size() const;
  public:
  void clear_base_weight();
  private:
  float _internal_base_weight(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_base_weight() const;
  void _internal_add_base_weight(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_base_weight();
  public:
  float base_weight(int index) const;
  void set_base_weight(int index, float value);
  void add_base_weight(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      base_weight() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_base_weight();

  // repeated int32 split_feature_id = 7 [packed = true];
  int split_feature_id_size() const;
  private:
  int _internal_split_feature_id_size() const;
  public:
  void clear_split_feature_id();
  private:
  int32_t _internal_split_feature_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_split_feature_id() const;
  void _internal_add_split_feature_id(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_split_feature_id();
  public:
  int32_t split_feature_id(int index) const;
  void set_split_feature_id(int index, int32_t value);
  void add_split_feature_id(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      split_feature_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_split_feature_id();

  // repeated int32 pid = 8 [packed = true];
  int pid_size() const;
  private:
  int _internal_pid_size() const;
  public:
  void clear_pid();
  private:
  int32_t _internal_pid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_pid() const;
  void _internal_add_pid(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_pid();
  public:
  int32_t pid(int index) const;
  void set_pid(int index, int32_t value);
  void add_pid(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      pid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_pid();

  // repeated float split_value = 9 [packed = true];
  int split_value_size() const;
  private:
  int _internal_split_value_size() const;
  public:
  void clear_split_value();
  private:
  float _internal_split_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_split_value() const;
  void _internal_add_split_value(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_split_value();
  public:
  float split_value(int index) const;
  void set_split_value(int index, float value);
  void add_split_value(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      split_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_split_value();

  // repeated int32 split_bid = 10 [packed = true];
  int split_bid_size() const;
  private:
  int _internal_split_bid_size() const;
  public:
  void clear_split_bid();
  private:
  int32_t _internal_split_bid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_split_bid() const;
  void _internal_add_split_bid(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_split_bid();
  public:
  int32_t split_bid(int index) const;
  void set_split_bid(int index, int32_t value);
  void add_split_bid(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      split_bid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_split_bid();

  // repeated bool default_right = 11 [packed = true];
  int default_right_size() const;
  private:
  int _internal_default_right_size() const;
  public:
  void clear_default_right();
  private:
  bool _internal_default_right(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_default_right() const;
  void _internal_add_default_right(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_default_right();
  public:
  bool default_right(int index) const;
  void set_default_right(int index, bool value);
  void add_default_right(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      default_right() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_default_right();

  // repeated bool is_leaf = 12 [packed = true];
  int is_leaf_size() const;
  private:
  int _internal_is_leaf_size() const;
  public:
  void clear_is_leaf();
  private:
  bool _internal_is_leaf(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_is_leaf() const;
  void _internal_add_is_leaf(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_is_leaf();
  public:
  bool is_leaf(int index) const;
  void set_is_leaf(int index, bool value);
  void add_is_leaf(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      is_leaf() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_is_leaf();

  // repeated bool is_valid = 13 [packed = true];
  int is_valid_size() const;
  private:
  int _internal_is_valid_size() const;
  public:
  void clear_is_valid();
  private:
  bool _internal_is_valid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_is_valid() const;
  void _internal_add_is_valid(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_is_valid();
  public:
  bool is_valid(int index) const;
  void set_is_valid(int index, bool value);
  void add_is_valid(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      is_valid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_is_valid();

  // repeated bool is_pruned = 14 [packed = true];
  int is_pruned_size() const;
  private:
  int _internal_is_pruned_size() const;
  public:
  void clear_is_pruned();
  private:
  bool _internal_is_pruned(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_is_pruned() const;
  void _internal_add_is_pruned(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_is_pruned();
  public:
  bool is_pruned(int index) const;
  void set_is_pruned(int index, bool value);
  void add_is_pruned(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      is_pruned() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_is_pruned();

  // repeated float sum_gh_pair_g = 15 [packed = true];
  int sum_gh_pair_g_size() const;
  private:
  int _internal_sum_gh_pair_g_size() const;
  public:
  void clear_sum_gh_pair_g();
  private:
  float _internal_sum_gh_pair_g(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_sum_gh_pair_g() const;
  void _internal_add_sum_gh_pair_g(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_sum_gh_pair_g();
  public:
  float sum_gh_pair_g(int index) const;
  void set_sum_gh_pair_g(int index, float value);
  void add_sum_gh_pair_g(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      sum_gh_pair_g() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_sum_gh_pair_g();

  // repeated float sum_gh_pair_h = 16 [packed = true];
  int sum_gh_pair_h_size() const;
  private:
  int _internal_sum_gh_pair_h_size() const;
  public:
  void clear_sum_gh_pair_h();
  private:
  float _internal_sum_gh_pair_h(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_sum_gh_pair_h() const;
  void _internal_add_sum_gh_pair_h(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_sum_gh_pair_h();
  public:
  float sum_gh_pair_h(int index) const;
  void set_sum_gh_pair_h(int index, float value);
  void add_sum_gh_pair_h(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      sum_gh_pair_h() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_sum_gh_pair_h();

  // repeated int32 n_instances = 17 [packed = true];
  int n_instances_size() const;
  private:
  int _internal_n_instances_size() const;
  public:
  void clear_n_instances();
  private:
  int32_t _internal_n_instances(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_n_instances() const;
  void _internal_add_n_instances(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_n_instances();
  public:
  int32_t n_instances(int index) const;
  void set_n_instances(int index, int32_t value);
  void add_n_instances(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      n_instances() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_n_instances();

  // @@protoc_insertion_point(class_scope:fedtree.NodeArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > final_id_;
    mutable std::atomic<int> _final_id_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > lch_index_;
    mutable std::atomic<int> _lch_index_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > rch_index_;
    mutable std::atomic<int> _rch_index_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > parent_index_;
    mutable std::atomic<int> _parent_index_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > gain_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > base_weight_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > split_feature_id_;
    mutable std::atomic<int> _split_feature_id_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > pid_;
    mutable std::atomic<int> _pid_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > split_value_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > split_bid_;
    mutable std::atomic<int> _split_bid_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > default_right_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > is_leaf_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > is_valid_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > is_pruned_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > sum_gh_pair_g_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > sum_gh_pair_h_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > n_instances_;
    mutable std::atomic<int> _n_instances_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class Ins2NodeID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.Ins2NodeID) */ {
 public:
  inline Ins2NodeID() : Ins2NodeID(nullptr) {}
  ~Ins2NodeID() override;
  explicit PROTOBUF_CONSTEXPR Ins2NodeID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ins2NodeID(const Ins2NodeID& from);
  Ins2NodeID(Ins2NodeID&& from) noexcept
    : Ins2NodeID() {
    *this = ::std::move(from);
  }

  inline Ins2NodeID& operator=(const Ins2NodeID& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ins2NodeID& operator=(Ins2NodeID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ins2NodeID& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ins2NodeID* internal_default_instance() {
    return reinterpret_cast<const Ins2NodeID*>(
               &_Ins2NodeID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Ins2NodeID& a, Ins2NodeID& b) {
    a.Swap(&b);
  }
  inline void Swap(Ins2NodeID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ins2NodeID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ins2NodeID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ins2NodeID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ins2NodeID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ins2NodeID& from) {
    Ins2NodeID::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ins2NodeID* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.Ins2NodeID";
  }
  protected:
  explicit Ins2NodeID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIidFieldNumber = 1,
    kNidFieldNumber = 2,
  };
  // int32 iid = 1;
  void clear_iid();
  int32_t iid() const;
  void set_iid(int32_t value);
  private:
  int32_t _internal_iid() const;
  void _internal_set_iid(int32_t value);
  public:

  // int32 nid = 2;
  void clear_nid();
  int32_t nid() const;
  void set_nid(int32_t value);
  private:
  int32_t _internal_nid() const;
  void _internal_set_nid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:fedtree.Ins2NodeID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t iid_;
    int32_t nid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class Ins2NodeIDBatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.Ins2NodeIDBatch) */ {
 public:
  inline Ins2NodeIDBatch() : Ins2NodeIDBatch(nullptr) {}
  ~Ins2NodeIDBatch() override;
  explicit PROTOBUF_CONSTEXPR Ins2NodeIDBatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ins2NodeIDBatch(const Ins2NodeIDBatch& from);
  Ins2NodeIDBatch(Ins2NodeIDBatch&& from) noexcept
    : Ins2NodeIDBatch() {
    *this = ::std::move(from);
  }

  inline Ins2NodeIDBatch& operator=(const Ins2NodeIDBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ins2NodeIDBatch& operator=(Ins2NodeIDBatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ins2NodeIDBatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ins2NodeIDBatch* internal_default_instance() {
    return reinterpret_cast<const Ins2NodeIDBatch*>(
               &_Ins2NodeIDBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Ins2NodeIDBatch& a, Ins2NodeIDBatch& b) {
    a.Swap(&b);
  }
  inline void Swap(Ins2NodeIDBatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ins2NodeIDBatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ins2NodeIDBatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ins2NodeIDBatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ins2NodeIDBatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ins2NodeIDBatch& from) {
    Ins2NodeIDBatch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ins2NodeIDBatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.Ins2NodeIDBatch";
  }
  protected:
  explicit Ins2NodeIDBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIidFieldNumber = 1,
    kNidFieldNumber = 2,
  };
  // repeated int32 iid = 1 [packed = true];
  int iid_size() const;
  private:
  int _internal_iid_size() const;
  public:
  void clear_iid();
  private:
  int32_t _internal_iid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_iid() const;
  void _internal_add_iid(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_iid();
  public:
  int32_t iid(int index) const;
  void set_iid(int index, int32_t value);
  void add_iid(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      iid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_iid();

  // repeated int32 nid = 2 [packed = true];
  int nid_size() const;
  private:
  int _internal_nid_size() const;
  public:
  void clear_nid();
  private:
  int32_t _internal_nid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_nid() const;
  void _internal_add_nid(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_nid();
  public:
  int32_t nid(int index) const;
  void set_nid(int index, int32_t value);
  void add_nid(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      nid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_nid();

  // @@protoc_insertion_point(class_scope:fedtree.Ins2NodeIDBatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > iid_;
    mutable std::atomic<int> _iid_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > nid_;
    mutable std::atomic<int> _nid_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class DHPublicKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.DHPublicKey) */ {
 public:
  inline DHPublicKey() : DHPublicKey(nullptr) {}
  ~DHPublicKey() override;
  explicit PROTOBUF_CONSTEXPR DHPublicKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DHPublicKey(const DHPublicKey& from);
  DHPublicKey(DHPublicKey&& from) noexcept
    : DHPublicKey() {
    *this = ::std::move(from);
  }

  inline DHPublicKey& operator=(const DHPublicKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline DHPublicKey& operator=(DHPublicKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DHPublicKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const DHPublicKey* internal_default_instance() {
    return reinterpret_cast<const DHPublicKey*>(
               &_DHPublicKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(DHPublicKey& a, DHPublicKey& b) {
    a.Swap(&b);
  }
  inline void Swap(DHPublicKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DHPublicKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DHPublicKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DHPublicKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DHPublicKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DHPublicKey& from) {
    DHPublicKey::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DHPublicKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.DHPublicKey";
  }
  protected:
  explicit DHPublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPkFieldNumber = 1,
  };
  // string pk = 1;
  void clear_pk();
  const std::string& pk() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pk(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pk();
  PROTOBUF_NODISCARD std::string* release_pk();
  void set_allocated_pk(std::string* pk);
  private:
  const std::string& _internal_pk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pk(const std::string& value);
  std::string* _internal_mutable_pk();
  public:

  // @@protoc_insertion_point(class_scope:fedtree.DHPublicKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pk_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class DHPublicKeys final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.DHPublicKeys) */ {
 public:
  inline DHPublicKeys() : DHPublicKeys(nullptr) {}
  ~DHPublicKeys() override;
  explicit PROTOBUF_CONSTEXPR DHPublicKeys(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DHPublicKeys(const DHPublicKeys& from);
  DHPublicKeys(DHPublicKeys&& from) noexcept
    : DHPublicKeys() {
    *this = ::std::move(from);
  }

  inline DHPublicKeys& operator=(const DHPublicKeys& from) {
    CopyFrom(from);
    return *this;
  }
  inline DHPublicKeys& operator=(DHPublicKeys&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DHPublicKeys& default_instance() {
    return *internal_default_instance();
  }
  static inline const DHPublicKeys* internal_default_instance() {
    return reinterpret_cast<const DHPublicKeys*>(
               &_DHPublicKeys_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(DHPublicKeys& a, DHPublicKeys& b) {
    a.Swap(&b);
  }
  inline void Swap(DHPublicKeys* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DHPublicKeys* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DHPublicKeys* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DHPublicKeys>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DHPublicKeys& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DHPublicKeys& from) {
    DHPublicKeys::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DHPublicKeys* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.DHPublicKeys";
  }
  protected:
  explicit DHPublicKeys(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPkFieldNumber = 1,
  };
  // repeated string pk = 1;
  int pk_size() const;
  private:
  int _internal_pk_size() const;
  public:
  void clear_pk();
  const std::string& pk(int index) const;
  std::string* mutable_pk(int index);
  void set_pk(int index, const std::string& value);
  void set_pk(int index, std::string&& value);
  void set_pk(int index, const char* value);
  void set_pk(int index, const char* value, size_t size);
  std::string* add_pk();
  void add_pk(const std::string& value);
  void add_pk(std::string&& value);
  void add_pk(const char* value);
  void add_pk(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pk() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pk();
  private:
  const std::string& _internal_pk(int index) const;
  std::string* _internal_add_pk();
  public:

  // @@protoc_insertion_point(class_scope:fedtree.DHPublicKeys)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pk_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class SANoise final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.SANoise) */ {
 public:
  inline SANoise() : SANoise(nullptr) {}
  ~SANoise() override;
  explicit PROTOBUF_CONSTEXPR SANoise(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SANoise(const SANoise& from);
  SANoise(SANoise&& from) noexcept
    : SANoise() {
    *this = ::std::move(from);
  }

  inline SANoise& operator=(const SANoise& from) {
    CopyFrom(from);
    return *this;
  }
  inline SANoise& operator=(SANoise&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SANoise& default_instance() {
    return *internal_default_instance();
  }
  static inline const SANoise* internal_default_instance() {
    return reinterpret_cast<const SANoise*>(
               &_SANoise_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SANoise& a, SANoise& b) {
    a.Swap(&b);
  }
  inline void Swap(SANoise* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SANoise* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SANoise* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SANoise>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SANoise& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SANoise& from) {
    SANoise::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SANoise* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.SANoise";
  }
  protected:
  explicit SANoise(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNoiseFieldNumber = 1,
  };
  // string noise = 1;
  void clear_noise();
  const std::string& noise() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_noise(ArgT0&& arg0, ArgT... args);
  std::string* mutable_noise();
  PROTOBUF_NODISCARD std::string* release_noise();
  void set_allocated_noise(std::string* noise);
  private:
  const std::string& _internal_noise() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_noise(const std::string& value);
  std::string* _internal_mutable_noise();
  public:

  // @@protoc_insertion_point(class_scope:fedtree.SANoise)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr noise_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class SANoises final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.SANoises) */ {
 public:
  inline SANoises() : SANoises(nullptr) {}
  ~SANoises() override;
  explicit PROTOBUF_CONSTEXPR SANoises(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SANoises(const SANoises& from);
  SANoises(SANoises&& from) noexcept
    : SANoises() {
    *this = ::std::move(from);
  }

  inline SANoises& operator=(const SANoises& from) {
    CopyFrom(from);
    return *this;
  }
  inline SANoises& operator=(SANoises&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SANoises& default_instance() {
    return *internal_default_instance();
  }
  static inline const SANoises* internal_default_instance() {
    return reinterpret_cast<const SANoises*>(
               &_SANoises_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SANoises& a, SANoises& b) {
    a.Swap(&b);
  }
  inline void Swap(SANoises* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SANoises* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SANoises* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SANoises>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SANoises& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SANoises& from) {
    SANoises::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SANoises* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.SANoises";
  }
  protected:
  explicit SANoises(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNoisesFieldNumber = 1,
  };
  // repeated string noises = 1;
  int noises_size() const;
  private:
  int _internal_noises_size() const;
  public:
  void clear_noises();
  const std::string& noises(int index) const;
  std::string* mutable_noises(int index);
  void set_noises(int index, const std::string& value);
  void set_noises(int index, std::string&& value);
  void set_noises(int index, const char* value);
  void set_noises(int index, const char* value, size_t size);
  std::string* add_noises();
  void add_noises(const std::string& value);
  void add_noises(std::string&& value);
  void add_noises(const char* value);
  void add_noises(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& noises() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_noises();
  private:
  const std::string& _internal_noises(int index) const;
  std::string* _internal_add_noises();
  public:

  // @@protoc_insertion_point(class_scope:fedtree.SANoises)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> noises_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class CutPoints final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.CutPoints) */ {
 public:
  inline CutPoints() : CutPoints(nullptr) {}
  ~CutPoints() override;
  explicit PROTOBUF_CONSTEXPR CutPoints(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CutPoints(const CutPoints& from);
  CutPoints(CutPoints&& from) noexcept
    : CutPoints() {
    *this = ::std::move(from);
  }

  inline CutPoints& operator=(const CutPoints& from) {
    CopyFrom(from);
    return *this;
  }
  inline CutPoints& operator=(CutPoints&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CutPoints& default_instance() {
    return *internal_default_instance();
  }
  static inline const CutPoints* internal_default_instance() {
    return reinterpret_cast<const CutPoints*>(
               &_CutPoints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CutPoints& a, CutPoints& b) {
    a.Swap(&b);
  }
  inline void Swap(CutPoints* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CutPoints* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CutPoints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CutPoints>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CutPoints& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CutPoints& from) {
    CutPoints::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CutPoints* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.CutPoints";
  }
  protected:
  explicit CutPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCutPointsValFieldNumber = 1,
    kCutColPtrFieldNumber = 2,
    kCutFidFieldNumber = 3,
  };
  // repeated double cut_points_val = 1 [packed = true];
  int cut_points_val_size() const;
  private:
  int _internal_cut_points_val_size() const;
  public:
  void clear_cut_points_val();
  private:
  double _internal_cut_points_val(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_cut_points_val() const;
  void _internal_add_cut_points_val(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_cut_points_val();
  public:
  double cut_points_val(int index) const;
  void set_cut_points_val(int index, double value);
  void add_cut_points_val(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      cut_points_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_cut_points_val();

  // repeated int32 cut_col_ptr = 2 [packed = true];
  int cut_col_ptr_size() const;
  private:
  int _internal_cut_col_ptr_size() const;
  public:
  void clear_cut_col_ptr();
  private:
  int32_t _internal_cut_col_ptr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_cut_col_ptr() const;
  void _internal_add_cut_col_ptr(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_cut_col_ptr();
  public:
  int32_t cut_col_ptr(int index) const;
  void set_cut_col_ptr(int index, int32_t value);
  void add_cut_col_ptr(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      cut_col_ptr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_cut_col_ptr();

  // repeated int32 cut_fid = 3 [packed = true];
  int cut_fid_size() const;
  private:
  int _internal_cut_fid_size() const;
  public:
  void clear_cut_fid();
  private:
  int32_t _internal_cut_fid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_cut_fid() const;
  void _internal_add_cut_fid(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_cut_fid();
  public:
  int32_t cut_fid(int index) const;
  void set_cut_fid(int index, int32_t value);
  void add_cut_fid(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      cut_fid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_cut_fid();

  // @@protoc_insertion_point(class_scope:fedtree.CutPoints)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > cut_points_val_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > cut_col_ptr_;
    mutable std::atomic<int> _cut_col_ptr_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > cut_fid_;
    mutable std::atomic<int> _cut_fid_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fedtree_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FIDBatch

// repeated int32 id = 1 [packed = true];
inline int FIDBatch::_internal_id_size() const {
  return _impl_.id_.size();
}
inline int FIDBatch::id_size() const {
  return _internal_id_size();
}
inline void FIDBatch::clear_id() {
  _impl_.id_.Clear();
}
inline int32_t FIDBatch::_internal_id(int index) const {
  return _impl_.id_.Get(index);
}
inline int32_t FIDBatch::id(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.FIDBatch.id)
  return _internal_id(index);
}
inline void FIDBatch::set_id(int index, int32_t value) {
  _impl_.id_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.FIDBatch.id)
}
inline void FIDBatch::_internal_add_id(int32_t value) {
  _impl_.id_.Add(value);
}
inline void FIDBatch::add_id(int32_t value) {
  _internal_add_id(value);
  // @@protoc_insertion_point(field_add:fedtree.FIDBatch.id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
FIDBatch::_internal_id() const {
  return _impl_.id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
FIDBatch::id() const {
  // @@protoc_insertion_point(field_list:fedtree.FIDBatch.id)
  return _internal_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
FIDBatch::_internal_mutable_id() {
  return &_impl_.id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
FIDBatch::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.FIDBatch.id)
  return _internal_mutable_id();
}

// -------------------------------------------------------------------

// GHBatch

// repeated double g = 1 [packed = true];
inline int GHBatch::_internal_g_size() const {
  return _impl_.g_.size();
}
inline int GHBatch::g_size() const {
  return _internal_g_size();
}
inline void GHBatch::clear_g() {
  _impl_.g_.Clear();
}
inline double GHBatch::_internal_g(int index) const {
  return _impl_.g_.Get(index);
}
inline double GHBatch::g(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.GHBatch.g)
  return _internal_g(index);
}
inline void GHBatch::set_g(int index, double value) {
  _impl_.g_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.GHBatch.g)
}
inline void GHBatch::_internal_add_g(double value) {
  _impl_.g_.Add(value);
}
inline void GHBatch::add_g(double value) {
  _internal_add_g(value);
  // @@protoc_insertion_point(field_add:fedtree.GHBatch.g)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GHBatch::_internal_g() const {
  return _impl_.g_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GHBatch::g() const {
  // @@protoc_insertion_point(field_list:fedtree.GHBatch.g)
  return _internal_g();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GHBatch::_internal_mutable_g() {
  return &_impl_.g_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GHBatch::mutable_g() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.GHBatch.g)
  return _internal_mutable_g();
}

// repeated double h = 2 [packed = true];
inline int GHBatch::_internal_h_size() const {
  return _impl_.h_.size();
}
inline int GHBatch::h_size() const {
  return _internal_h_size();
}
inline void GHBatch::clear_h() {
  _impl_.h_.Clear();
}
inline double GHBatch::_internal_h(int index) const {
  return _impl_.h_.Get(index);
}
inline double GHBatch::h(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.GHBatch.h)
  return _internal_h(index);
}
inline void GHBatch::set_h(int index, double value) {
  _impl_.h_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.GHBatch.h)
}
inline void GHBatch::_internal_add_h(double value) {
  _impl_.h_.Add(value);
}
inline void GHBatch::add_h(double value) {
  _internal_add_h(value);
  // @@protoc_insertion_point(field_add:fedtree.GHBatch.h)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GHBatch::_internal_h() const {
  return _impl_.h_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GHBatch::h() const {
  // @@protoc_insertion_point(field_list:fedtree.GHBatch.h)
  return _internal_h();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GHBatch::_internal_mutable_h() {
  return &_impl_.h_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GHBatch::mutable_h() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.GHBatch.h)
  return _internal_mutable_h();
}

// -------------------------------------------------------------------

// GHEncBatch

// repeated string g_enc = 1;
inline int GHEncBatch::_internal_g_enc_size() const {
  return _impl_.g_enc_.size();
}
inline int GHEncBatch::g_enc_size() const {
  return _internal_g_enc_size();
}
inline void GHEncBatch::clear_g_enc() {
  _impl_.g_enc_.Clear();
}
inline std::string* GHEncBatch::add_g_enc() {
  std::string* _s = _internal_add_g_enc();
  // @@protoc_insertion_point(field_add_mutable:fedtree.GHEncBatch.g_enc)
  return _s;
}
inline const std::string& GHEncBatch::_internal_g_enc(int index) const {
  return _impl_.g_enc_.Get(index);
}
inline const std::string& GHEncBatch::g_enc(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.GHEncBatch.g_enc)
  return _internal_g_enc(index);
}
inline std::string* GHEncBatch::mutable_g_enc(int index) {
  // @@protoc_insertion_point(field_mutable:fedtree.GHEncBatch.g_enc)
  return _impl_.g_enc_.Mutable(index);
}
inline void GHEncBatch::set_g_enc(int index, const std::string& value) {
  _impl_.g_enc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:fedtree.GHEncBatch.g_enc)
}
inline void GHEncBatch::set_g_enc(int index, std::string&& value) {
  _impl_.g_enc_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:fedtree.GHEncBatch.g_enc)
}
inline void GHEncBatch::set_g_enc(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.g_enc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fedtree.GHEncBatch.g_enc)
}
inline void GHEncBatch::set_g_enc(int index, const char* value, size_t size) {
  _impl_.g_enc_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fedtree.GHEncBatch.g_enc)
}
inline std::string* GHEncBatch::_internal_add_g_enc() {
  return _impl_.g_enc_.Add();
}
inline void GHEncBatch::add_g_enc(const std::string& value) {
  _impl_.g_enc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fedtree.GHEncBatch.g_enc)
}
inline void GHEncBatch::add_g_enc(std::string&& value) {
  _impl_.g_enc_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:fedtree.GHEncBatch.g_enc)
}
inline void GHEncBatch::add_g_enc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.g_enc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fedtree.GHEncBatch.g_enc)
}
inline void GHEncBatch::add_g_enc(const char* value, size_t size) {
  _impl_.g_enc_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fedtree.GHEncBatch.g_enc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GHEncBatch::g_enc() const {
  // @@protoc_insertion_point(field_list:fedtree.GHEncBatch.g_enc)
  return _impl_.g_enc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GHEncBatch::mutable_g_enc() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.GHEncBatch.g_enc)
  return &_impl_.g_enc_;
}

// repeated string h_enc = 2;
inline int GHEncBatch::_internal_h_enc_size() const {
  return _impl_.h_enc_.size();
}
inline int GHEncBatch::h_enc_size() const {
  return _internal_h_enc_size();
}
inline void GHEncBatch::clear_h_enc() {
  _impl_.h_enc_.Clear();
}
inline std::string* GHEncBatch::add_h_enc() {
  std::string* _s = _internal_add_h_enc();
  // @@protoc_insertion_point(field_add_mutable:fedtree.GHEncBatch.h_enc)
  return _s;
}
inline const std::string& GHEncBatch::_internal_h_enc(int index) const {
  return _impl_.h_enc_.Get(index);
}
inline const std::string& GHEncBatch::h_enc(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.GHEncBatch.h_enc)
  return _internal_h_enc(index);
}
inline std::string* GHEncBatch::mutable_h_enc(int index) {
  // @@protoc_insertion_point(field_mutable:fedtree.GHEncBatch.h_enc)
  return _impl_.h_enc_.Mutable(index);
}
inline void GHEncBatch::set_h_enc(int index, const std::string& value) {
  _impl_.h_enc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:fedtree.GHEncBatch.h_enc)
}
inline void GHEncBatch::set_h_enc(int index, std::string&& value) {
  _impl_.h_enc_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:fedtree.GHEncBatch.h_enc)
}
inline void GHEncBatch::set_h_enc(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.h_enc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fedtree.GHEncBatch.h_enc)
}
inline void GHEncBatch::set_h_enc(int index, const char* value, size_t size) {
  _impl_.h_enc_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fedtree.GHEncBatch.h_enc)
}
inline std::string* GHEncBatch::_internal_add_h_enc() {
  return _impl_.h_enc_.Add();
}
inline void GHEncBatch::add_h_enc(const std::string& value) {
  _impl_.h_enc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fedtree.GHEncBatch.h_enc)
}
inline void GHEncBatch::add_h_enc(std::string&& value) {
  _impl_.h_enc_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:fedtree.GHEncBatch.h_enc)
}
inline void GHEncBatch::add_h_enc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.h_enc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fedtree.GHEncBatch.h_enc)
}
inline void GHEncBatch::add_h_enc(const char* value, size_t size) {
  _impl_.h_enc_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fedtree.GHEncBatch.h_enc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GHEncBatch::h_enc() const {
  // @@protoc_insertion_point(field_list:fedtree.GHEncBatch.h_enc)
  return _impl_.h_enc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GHEncBatch::mutable_h_enc() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.GHEncBatch.h_enc)
  return &_impl_.h_enc_;
}

// -------------------------------------------------------------------

// GHPair

// double g = 1;
inline void GHPair::clear_g() {
  _impl_.g_ = 0;
}
inline double GHPair::_internal_g() const {
  return _impl_.g_;
}
inline double GHPair::g() const {
  // @@protoc_insertion_point(field_get:fedtree.GHPair.g)
  return _internal_g();
}
inline void GHPair::_internal_set_g(double value) {
  
  _impl_.g_ = value;
}
inline void GHPair::set_g(double value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:fedtree.GHPair.g)
}

// double h = 2;
inline void GHPair::clear_h() {
  _impl_.h_ = 0;
}
inline double GHPair::_internal_h() const {
  return _impl_.h_;
}
inline double GHPair::h() const {
  // @@protoc_insertion_point(field_get:fedtree.GHPair.h)
  return _internal_h();
}
inline void GHPair::_internal_set_h(double value) {
  
  _impl_.h_ = value;
}
inline void GHPair::set_h(double value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:fedtree.GHPair.h)
}

// -------------------------------------------------------------------

// GHArray

// repeated double g = 1 [packed = true];
inline int GHArray::_internal_g_size() const {
  return _impl_.g_.size();
}
inline int GHArray::g_size() const {
  return _internal_g_size();
}
inline void GHArray::clear_g() {
  _impl_.g_.Clear();
}
inline double GHArray::_internal_g(int index) const {
  return _impl_.g_.Get(index);
}
inline double GHArray::g(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.GHArray.g)
  return _internal_g(index);
}
inline void GHArray::set_g(int index, double value) {
  _impl_.g_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.GHArray.g)
}
inline void GHArray::_internal_add_g(double value) {
  _impl_.g_.Add(value);
}
inline void GHArray::add_g(double value) {
  _internal_add_g(value);
  // @@protoc_insertion_point(field_add:fedtree.GHArray.g)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GHArray::_internal_g() const {
  return _impl_.g_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GHArray::g() const {
  // @@protoc_insertion_point(field_list:fedtree.GHArray.g)
  return _internal_g();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GHArray::_internal_mutable_g() {
  return &_impl_.g_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GHArray::mutable_g() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.GHArray.g)
  return _internal_mutable_g();
}

// -------------------------------------------------------------------

// GHPairEnc

// string g_enc = 1;
inline void GHPairEnc::clear_g_enc() {
  _impl_.g_enc_.ClearToEmpty();
}
inline const std::string& GHPairEnc::g_enc() const {
  // @@protoc_insertion_point(field_get:fedtree.GHPairEnc.g_enc)
  return _internal_g_enc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GHPairEnc::set_g_enc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.g_enc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fedtree.GHPairEnc.g_enc)
}
inline std::string* GHPairEnc::mutable_g_enc() {
  std::string* _s = _internal_mutable_g_enc();
  // @@protoc_insertion_point(field_mutable:fedtree.GHPairEnc.g_enc)
  return _s;
}
inline const std::string& GHPairEnc::_internal_g_enc() const {
  return _impl_.g_enc_.Get();
}
inline void GHPairEnc::_internal_set_g_enc(const std::string& value) {
  
  _impl_.g_enc_.Set(value, GetArenaForAllocation());
}
inline std::string* GHPairEnc::_internal_mutable_g_enc() {
  
  return _impl_.g_enc_.Mutable(GetArenaForAllocation());
}
inline std::string* GHPairEnc::release_g_enc() {
  // @@protoc_insertion_point(field_release:fedtree.GHPairEnc.g_enc)
  return _impl_.g_enc_.Release();
}
inline void GHPairEnc::set_allocated_g_enc(std::string* g_enc) {
  if (g_enc != nullptr) {
    
  } else {
    
  }
  _impl_.g_enc_.SetAllocated(g_enc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.g_enc_.IsDefault()) {
    _impl_.g_enc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fedtree.GHPairEnc.g_enc)
}

// string h_enc = 2;
inline void GHPairEnc::clear_h_enc() {
  _impl_.h_enc_.ClearToEmpty();
}
inline const std::string& GHPairEnc::h_enc() const {
  // @@protoc_insertion_point(field_get:fedtree.GHPairEnc.h_enc)
  return _internal_h_enc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GHPairEnc::set_h_enc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.h_enc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fedtree.GHPairEnc.h_enc)
}
inline std::string* GHPairEnc::mutable_h_enc() {
  std::string* _s = _internal_mutable_h_enc();
  // @@protoc_insertion_point(field_mutable:fedtree.GHPairEnc.h_enc)
  return _s;
}
inline const std::string& GHPairEnc::_internal_h_enc() const {
  return _impl_.h_enc_.Get();
}
inline void GHPairEnc::_internal_set_h_enc(const std::string& value) {
  
  _impl_.h_enc_.Set(value, GetArenaForAllocation());
}
inline std::string* GHPairEnc::_internal_mutable_h_enc() {
  
  return _impl_.h_enc_.Mutable(GetArenaForAllocation());
}
inline std::string* GHPairEnc::release_h_enc() {
  // @@protoc_insertion_point(field_release:fedtree.GHPairEnc.h_enc)
  return _impl_.h_enc_.Release();
}
inline void GHPairEnc::set_allocated_h_enc(std::string* h_enc) {
  if (h_enc != nullptr) {
    
  } else {
    
  }
  _impl_.h_enc_.SetAllocated(h_enc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.h_enc_.IsDefault()) {
    _impl_.h_enc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fedtree.GHPairEnc.h_enc)
}

// -------------------------------------------------------------------

// Paillier

// string modulus = 1;
inline void Paillier::clear_modulus() {
  _impl_.modulus_.ClearToEmpty();
}
inline const std::string& Paillier::modulus() const {
  // @@protoc_insertion_point(field_get:fedtree.Paillier.modulus)
  return _internal_modulus();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Paillier::set_modulus(ArgT0&& arg0, ArgT... args) {
 
 _impl_.modulus_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fedtree.Paillier.modulus)
}
inline std::string* Paillier::mutable_modulus() {
  std::string* _s = _internal_mutable_modulus();
  // @@protoc_insertion_point(field_mutable:fedtree.Paillier.modulus)
  return _s;
}
inline const std::string& Paillier::_internal_modulus() const {
  return _impl_.modulus_.Get();
}
inline void Paillier::_internal_set_modulus(const std::string& value) {
  
  _impl_.modulus_.Set(value, GetArenaForAllocation());
}
inline std::string* Paillier::_internal_mutable_modulus() {
  
  return _impl_.modulus_.Mutable(GetArenaForAllocation());
}
inline std::string* Paillier::release_modulus() {
  // @@protoc_insertion_point(field_release:fedtree.Paillier.modulus)
  return _impl_.modulus_.Release();
}
inline void Paillier::set_allocated_modulus(std::string* modulus) {
  if (modulus != nullptr) {
    
  } else {
    
  }
  _impl_.modulus_.SetAllocated(modulus, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.modulus_.IsDefault()) {
    _impl_.modulus_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fedtree.Paillier.modulus)
}

// string generator = 2;
inline void Paillier::clear_generator() {
  _impl_.generator_.ClearToEmpty();
}
inline const std::string& Paillier::generator() const {
  // @@protoc_insertion_point(field_get:fedtree.Paillier.generator)
  return _internal_generator();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Paillier::set_generator(ArgT0&& arg0, ArgT... args) {
 
 _impl_.generator_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fedtree.Paillier.generator)
}
inline std::string* Paillier::mutable_generator() {
  std::string* _s = _internal_mutable_generator();
  // @@protoc_insertion_point(field_mutable:fedtree.Paillier.generator)
  return _s;
}
inline const std::string& Paillier::_internal_generator() const {
  return _impl_.generator_.Get();
}
inline void Paillier::_internal_set_generator(const std::string& value) {
  
  _impl_.generator_.Set(value, GetArenaForAllocation());
}
inline std::string* Paillier::_internal_mutable_generator() {
  
  return _impl_.generator_.Mutable(GetArenaForAllocation());
}
inline std::string* Paillier::release_generator() {
  // @@protoc_insertion_point(field_release:fedtree.Paillier.generator)
  return _impl_.generator_.Release();
}
inline void Paillier::set_allocated_generator(std::string* generator) {
  if (generator != nullptr) {
    
  } else {
    
  }
  _impl_.generator_.SetAllocated(generator, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.generator_.IsDefault()) {
    _impl_.generator_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fedtree.Paillier.generator)
}

// -------------------------------------------------------------------

// SplitPoint

// float gain = 1;
inline void SplitPoint::clear_gain() {
  _impl_.gain_ = 0;
}
inline float SplitPoint::_internal_gain() const {
  return _impl_.gain_;
}
inline float SplitPoint::gain() const {
  // @@protoc_insertion_point(field_get:fedtree.SplitPoint.gain)
  return _internal_gain();
}
inline void SplitPoint::_internal_set_gain(float value) {
  
  _impl_.gain_ = value;
}
inline void SplitPoint::set_gain(float value) {
  _internal_set_gain(value);
  // @@protoc_insertion_point(field_set:fedtree.SplitPoint.gain)
}

// float fea_missing_g = 2;
inline void SplitPoint::clear_fea_missing_g() {
  _impl_.fea_missing_g_ = 0;
}
inline float SplitPoint::_internal_fea_missing_g() const {
  return _impl_.fea_missing_g_;
}
inline float SplitPoint::fea_missing_g() const {
  // @@protoc_insertion_point(field_get:fedtree.SplitPoint.fea_missing_g)
  return _internal_fea_missing_g();
}
inline void SplitPoint::_internal_set_fea_missing_g(float value) {
  
  _impl_.fea_missing_g_ = value;
}
inline void SplitPoint::set_fea_missing_g(float value) {
  _internal_set_fea_missing_g(value);
  // @@protoc_insertion_point(field_set:fedtree.SplitPoint.fea_missing_g)
}

// float fea_missing_h = 3;
inline void SplitPoint::clear_fea_missing_h() {
  _impl_.fea_missing_h_ = 0;
}
inline float SplitPoint::_internal_fea_missing_h() const {
  return _impl_.fea_missing_h_;
}
inline float SplitPoint::fea_missing_h() const {
  // @@protoc_insertion_point(field_get:fedtree.SplitPoint.fea_missing_h)
  return _internal_fea_missing_h();
}
inline void SplitPoint::_internal_set_fea_missing_h(float value) {
  
  _impl_.fea_missing_h_ = value;
}
inline void SplitPoint::set_fea_missing_h(float value) {
  _internal_set_fea_missing_h(value);
  // @@protoc_insertion_point(field_set:fedtree.SplitPoint.fea_missing_h)
}

// float rch_sum_g = 4;
inline void SplitPoint::clear_rch_sum_g() {
  _impl_.rch_sum_g_ = 0;
}
inline float SplitPoint::_internal_rch_sum_g() const {
  return _impl_.rch_sum_g_;
}
inline float SplitPoint::rch_sum_g() const {
  // @@protoc_insertion_point(field_get:fedtree.SplitPoint.rch_sum_g)
  return _internal_rch_sum_g();
}
inline void SplitPoint::_internal_set_rch_sum_g(float value) {
  
  _impl_.rch_sum_g_ = value;
}
inline void SplitPoint::set_rch_sum_g(float value) {
  _internal_set_rch_sum_g(value);
  // @@protoc_insertion_point(field_set:fedtree.SplitPoint.rch_sum_g)
}

// float rch_sum_h = 5;
inline void SplitPoint::clear_rch_sum_h() {
  _impl_.rch_sum_h_ = 0;
}
inline float SplitPoint::_internal_rch_sum_h() const {
  return _impl_.rch_sum_h_;
}
inline float SplitPoint::rch_sum_h() const {
  // @@protoc_insertion_point(field_get:fedtree.SplitPoint.rch_sum_h)
  return _internal_rch_sum_h();
}
inline void SplitPoint::_internal_set_rch_sum_h(float value) {
  
  _impl_.rch_sum_h_ = value;
}
inline void SplitPoint::set_rch_sum_h(float value) {
  _internal_set_rch_sum_h(value);
  // @@protoc_insertion_point(field_set:fedtree.SplitPoint.rch_sum_h)
}

// bool default_right = 6;
inline void SplitPoint::clear_default_right() {
  _impl_.default_right_ = false;
}
inline bool SplitPoint::_internal_default_right() const {
  return _impl_.default_right_;
}
inline bool SplitPoint::default_right() const {
  // @@protoc_insertion_point(field_get:fedtree.SplitPoint.default_right)
  return _internal_default_right();
}
inline void SplitPoint::_internal_set_default_right(bool value) {
  
  _impl_.default_right_ = value;
}
inline void SplitPoint::set_default_right(bool value) {
  _internal_set_default_right(value);
  // @@protoc_insertion_point(field_set:fedtree.SplitPoint.default_right)
}

// int32 nid = 7;
inline void SplitPoint::clear_nid() {
  _impl_.nid_ = 0;
}
inline int32_t SplitPoint::_internal_nid() const {
  return _impl_.nid_;
}
inline int32_t SplitPoint::nid() const {
  // @@protoc_insertion_point(field_get:fedtree.SplitPoint.nid)
  return _internal_nid();
}
inline void SplitPoint::_internal_set_nid(int32_t value) {
  
  _impl_.nid_ = value;
}
inline void SplitPoint::set_nid(int32_t value) {
  _internal_set_nid(value);
  // @@protoc_insertion_point(field_set:fedtree.SplitPoint.nid)
}

// int32 split_fea_id = 8;
inline void SplitPoint::clear_split_fea_id() {
  _impl_.split_fea_id_ = 0;
}
inline int32_t SplitPoint::_internal_split_fea_id() const {
  return _impl_.split_fea_id_;
}
inline int32_t SplitPoint::split_fea_id() const {
  // @@protoc_insertion_point(field_get:fedtree.SplitPoint.split_fea_id)
  return _internal_split_fea_id();
}
inline void SplitPoint::_internal_set_split_fea_id(int32_t value) {
  
  _impl_.split_fea_id_ = value;
}
inline void SplitPoint::set_split_fea_id(int32_t value) {
  _internal_set_split_fea_id(value);
  // @@protoc_insertion_point(field_set:fedtree.SplitPoint.split_fea_id)
}

// float fval = 9;
inline void SplitPoint::clear_fval() {
  _impl_.fval_ = 0;
}
inline float SplitPoint::_internal_fval() const {
  return _impl_.fval_;
}
inline float SplitPoint::fval() const {
  // @@protoc_insertion_point(field_get:fedtree.SplitPoint.fval)
  return _internal_fval();
}
inline void SplitPoint::_internal_set_fval(float value) {
  
  _impl_.fval_ = value;
}
inline void SplitPoint::set_fval(float value) {
  _internal_set_fval(value);
  // @@protoc_insertion_point(field_set:fedtree.SplitPoint.fval)
}

// int32 split_bid = 10;
inline void SplitPoint::clear_split_bid() {
  _impl_.split_bid_ = 0;
}
inline int32_t SplitPoint::_internal_split_bid() const {
  return _impl_.split_bid_;
}
inline int32_t SplitPoint::split_bid() const {
  // @@protoc_insertion_point(field_get:fedtree.SplitPoint.split_bid)
  return _internal_split_bid();
}
inline void SplitPoint::_internal_set_split_bid(int32_t value) {
  
  _impl_.split_bid_ = value;
}
inline void SplitPoint::set_split_bid(int32_t value) {
  _internal_set_split_bid(value);
  // @@protoc_insertion_point(field_set:fedtree.SplitPoint.split_bid)
}

// bool no_split_value_update = 11;
inline void SplitPoint::clear_no_split_value_update() {
  _impl_.no_split_value_update_ = false;
}
inline bool SplitPoint::_internal_no_split_value_update() const {
  return _impl_.no_split_value_update_;
}
inline bool SplitPoint::no_split_value_update() const {
  // @@protoc_insertion_point(field_get:fedtree.SplitPoint.no_split_value_update)
  return _internal_no_split_value_update();
}
inline void SplitPoint::_internal_set_no_split_value_update(bool value) {
  
  _impl_.no_split_value_update_ = value;
}
inline void SplitPoint::set_no_split_value_update(bool value) {
  _internal_set_no_split_value_update(value);
  // @@protoc_insertion_point(field_set:fedtree.SplitPoint.no_split_value_update)
}

// -------------------------------------------------------------------

// Score

// float content = 1;
inline void Score::clear_content() {
  _impl_.content_ = 0;
}
inline float Score::_internal_content() const {
  return _impl_.content_;
}
inline float Score::content() const {
  // @@protoc_insertion_point(field_get:fedtree.Score.content)
  return _internal_content();
}
inline void Score::_internal_set_content(float value) {
  
  _impl_.content_ = value;
}
inline void Score::set_content(float value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:fedtree.Score.content)
}

// -------------------------------------------------------------------

// PID

// int32 id = 1;
inline void PID::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t PID::_internal_id() const {
  return _impl_.id_;
}
inline int32_t PID::id() const {
  // @@protoc_insertion_point(field_get:fedtree.PID.id)
  return _internal_id();
}
inline void PID::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void PID::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:fedtree.PID.id)
}

// -------------------------------------------------------------------

// Ready

// bool ready = 1;
inline void Ready::clear_ready() {
  _impl_.ready_ = false;
}
inline bool Ready::_internal_ready() const {
  return _impl_.ready_;
}
inline bool Ready::ready() const {
  // @@protoc_insertion_point(field_get:fedtree.Ready.ready)
  return _internal_ready();
}
inline void Ready::_internal_set_ready(bool value) {
  
  _impl_.ready_ = value;
}
inline void Ready::set_ready(bool value) {
  _internal_set_ready(value);
  // @@protoc_insertion_point(field_set:fedtree.Ready.ready)
}

// -------------------------------------------------------------------

// DatasetInfo

// int32 n_bins = 1;
inline void DatasetInfo::clear_n_bins() {
  _impl_.n_bins_ = 0;
}
inline int32_t DatasetInfo::_internal_n_bins() const {
  return _impl_.n_bins_;
}
inline int32_t DatasetInfo::n_bins() const {
  // @@protoc_insertion_point(field_get:fedtree.DatasetInfo.n_bins)
  return _internal_n_bins();
}
inline void DatasetInfo::_internal_set_n_bins(int32_t value) {
  
  _impl_.n_bins_ = value;
}
inline void DatasetInfo::set_n_bins(int32_t value) {
  _internal_set_n_bins(value);
  // @@protoc_insertion_point(field_set:fedtree.DatasetInfo.n_bins)
}

// int32 n_columns = 2;
inline void DatasetInfo::clear_n_columns() {
  _impl_.n_columns_ = 0;
}
inline int32_t DatasetInfo::_internal_n_columns() const {
  return _impl_.n_columns_;
}
inline int32_t DatasetInfo::n_columns() const {
  // @@protoc_insertion_point(field_get:fedtree.DatasetInfo.n_columns)
  return _internal_n_columns();
}
inline void DatasetInfo::_internal_set_n_columns(int32_t value) {
  
  _impl_.n_columns_ = value;
}
inline void DatasetInfo::set_n_columns(int32_t value) {
  _internal_set_n_columns(value);
  // @@protoc_insertion_point(field_set:fedtree.DatasetInfo.n_columns)
}

// -------------------------------------------------------------------

// FID

// int32 id = 1;
inline void FID::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t FID::_internal_id() const {
  return _impl_.id_;
}
inline int32_t FID::id() const {
  // @@protoc_insertion_point(field_get:fedtree.FID.id)
  return _internal_id();
}
inline void FID::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void FID::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:fedtree.FID.id)
}

// -------------------------------------------------------------------

// BestInfo

// int32 pid = 1;
inline void BestInfo::clear_pid() {
  _impl_.pid_ = 0;
}
inline int32_t BestInfo::_internal_pid() const {
  return _impl_.pid_;
}
inline int32_t BestInfo::pid() const {
  // @@protoc_insertion_point(field_get:fedtree.BestInfo.pid)
  return _internal_pid();
}
inline void BestInfo::_internal_set_pid(int32_t value) {
  
  _impl_.pid_ = value;
}
inline void BestInfo::set_pid(int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:fedtree.BestInfo.pid)
}

// int32 nid = 2;
inline void BestInfo::clear_nid() {
  _impl_.nid_ = 0;
}
inline int32_t BestInfo::_internal_nid() const {
  return _impl_.nid_;
}
inline int32_t BestInfo::nid() const {
  // @@protoc_insertion_point(field_get:fedtree.BestInfo.nid)
  return _internal_nid();
}
inline void BestInfo::_internal_set_nid(int32_t value) {
  
  _impl_.nid_ = value;
}
inline void BestInfo::set_nid(int32_t value) {
  _internal_set_nid(value);
  // @@protoc_insertion_point(field_set:fedtree.BestInfo.nid)
}

// int32 idx = 3;
inline void BestInfo::clear_idx() {
  _impl_.idx_ = 0;
}
inline int32_t BestInfo::_internal_idx() const {
  return _impl_.idx_;
}
inline int32_t BestInfo::idx() const {
  // @@protoc_insertion_point(field_get:fedtree.BestInfo.idx)
  return _internal_idx();
}
inline void BestInfo::_internal_set_idx(int32_t value) {
  
  _impl_.idx_ = value;
}
inline void BestInfo::set_idx(int32_t value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:fedtree.BestInfo.idx)
}

// int32 global_fid = 4;
inline void BestInfo::clear_global_fid() {
  _impl_.global_fid_ = 0;
}
inline int32_t BestInfo::_internal_global_fid() const {
  return _impl_.global_fid_;
}
inline int32_t BestInfo::global_fid() const {
  // @@protoc_insertion_point(field_get:fedtree.BestInfo.global_fid)
  return _internal_global_fid();
}
inline void BestInfo::_internal_set_global_fid(int32_t value) {
  
  _impl_.global_fid_ = value;
}
inline void BestInfo::set_global_fid(int32_t value) {
  _internal_set_global_fid(value);
  // @@protoc_insertion_point(field_set:fedtree.BestInfo.global_fid)
}

// double gain = 5;
inline void BestInfo::clear_gain() {
  _impl_.gain_ = 0;
}
inline double BestInfo::_internal_gain() const {
  return _impl_.gain_;
}
inline double BestInfo::gain() const {
  // @@protoc_insertion_point(field_get:fedtree.BestInfo.gain)
  return _internal_gain();
}
inline void BestInfo::_internal_set_gain(double value) {
  
  _impl_.gain_ = value;
}
inline void BestInfo::set_gain(double value) {
  _internal_set_gain(value);
  // @@protoc_insertion_point(field_set:fedtree.BestInfo.gain)
}

// -------------------------------------------------------------------

// NodeEnc

// int32 final_id = 1;
inline void NodeEnc::clear_final_id() {
  _impl_.final_id_ = 0;
}
inline int32_t NodeEnc::_internal_final_id() const {
  return _impl_.final_id_;
}
inline int32_t NodeEnc::final_id() const {
  // @@protoc_insertion_point(field_get:fedtree.NodeEnc.final_id)
  return _internal_final_id();
}
inline void NodeEnc::_internal_set_final_id(int32_t value) {
  
  _impl_.final_id_ = value;
}
inline void NodeEnc::set_final_id(int32_t value) {
  _internal_set_final_id(value);
  // @@protoc_insertion_point(field_set:fedtree.NodeEnc.final_id)
}

// int32 lch_index = 2;
inline void NodeEnc::clear_lch_index() {
  _impl_.lch_index_ = 0;
}
inline int32_t NodeEnc::_internal_lch_index() const {
  return _impl_.lch_index_;
}
inline int32_t NodeEnc::lch_index() const {
  // @@protoc_insertion_point(field_get:fedtree.NodeEnc.lch_index)
  return _internal_lch_index();
}
inline void NodeEnc::_internal_set_lch_index(int32_t value) {
  
  _impl_.lch_index_ = value;
}
inline void NodeEnc::set_lch_index(int32_t value) {
  _internal_set_lch_index(value);
  // @@protoc_insertion_point(field_set:fedtree.NodeEnc.lch_index)
}

// int32 rch_index = 3;
inline void NodeEnc::clear_rch_index() {
  _impl_.rch_index_ = 0;
}
inline int32_t NodeEnc::_internal_rch_index() const {
  return _impl_.rch_index_;
}
inline int32_t NodeEnc::rch_index() const {
  // @@protoc_insertion_point(field_get:fedtree.NodeEnc.rch_index)
  return _internal_rch_index();
}
inline void NodeEnc::_internal_set_rch_index(int32_t value) {
  
  _impl_.rch_index_ = value;
}
inline void NodeEnc::set_rch_index(int32_t value) {
  _internal_set_rch_index(value);
  // @@protoc_insertion_point(field_set:fedtree.NodeEnc.rch_index)
}

// int32 parent_index = 4;
inline void NodeEnc::clear_parent_index() {
  _impl_.parent_index_ = 0;
}
inline int32_t NodeEnc::_internal_parent_index() const {
  return _impl_.parent_index_;
}
inline int32_t NodeEnc::parent_index() const {
  // @@protoc_insertion_point(field_get:fedtree.NodeEnc.parent_index)
  return _internal_parent_index();
}
inline void NodeEnc::_internal_set_parent_index(int32_t value) {
  
  _impl_.parent_index_ = value;
}
inline void NodeEnc::set_parent_index(int32_t value) {
  _internal_set_parent_index(value);
  // @@protoc_insertion_point(field_set:fedtree.NodeEnc.parent_index)
}

// float gain = 5;
inline void NodeEnc::clear_gain() {
  _impl_.gain_ = 0;
}
inline float NodeEnc::_internal_gain() const {
  return _impl_.gain_;
}
inline float NodeEnc::gain() const {
  // @@protoc_insertion_point(field_get:fedtree.NodeEnc.gain)
  return _internal_gain();
}
inline void NodeEnc::_internal_set_gain(float value) {
  
  _impl_.gain_ = value;
}
inline void NodeEnc::set_gain(float value) {
  _internal_set_gain(value);
  // @@protoc_insertion_point(field_set:fedtree.NodeEnc.gain)
}

// float base_weight = 6;
inline void NodeEnc::clear_base_weight() {
  _impl_.base_weight_ = 0;
}
inline float NodeEnc::_internal_base_weight() const {
  return _impl_.base_weight_;
}
inline float NodeEnc::base_weight() const {
  // @@protoc_insertion_point(field_get:fedtree.NodeEnc.base_weight)
  return _internal_base_weight();
}
inline void NodeEnc::_internal_set_base_weight(float value) {
  
  _impl_.base_weight_ = value;
}
inline void NodeEnc::set_base_weight(float value) {
  _internal_set_base_weight(value);
  // @@protoc_insertion_point(field_set:fedtree.NodeEnc.base_weight)
}

// int32 split_feature_id = 7;
inline void NodeEnc::clear_split_feature_id() {
  _impl_.split_feature_id_ = 0;
}
inline int32_t NodeEnc::_internal_split_feature_id() const {
  return _impl_.split_feature_id_;
}
inline int32_t NodeEnc::split_feature_id() const {
  // @@protoc_insertion_point(field_get:fedtree.NodeEnc.split_feature_id)
  return _internal_split_feature_id();
}
inline void NodeEnc::_internal_set_split_feature_id(int32_t value) {
  
  _impl_.split_feature_id_ = value;
}
inline void NodeEnc::set_split_feature_id(int32_t value) {
  _internal_set_split_feature_id(value);
  // @@protoc_insertion_point(field_set:fedtree.NodeEnc.split_feature_id)
}

// int32 pid = 8;
inline void NodeEnc::clear_pid() {
  _impl_.pid_ = 0;
}
inline int32_t NodeEnc::_internal_pid() const {
  return _impl_.pid_;
}
inline int32_t NodeEnc::pid() const {
  // @@protoc_insertion_point(field_get:fedtree.NodeEnc.pid)
  return _internal_pid();
}
inline void NodeEnc::_internal_set_pid(int32_t value) {
  
  _impl_.pid_ = value;
}
inline void NodeEnc::set_pid(int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:fedtree.NodeEnc.pid)
}

// float split_value = 9;
inline void NodeEnc::clear_split_value() {
  _impl_.split_value_ = 0;
}
inline float NodeEnc::_internal_split_value() const {
  return _impl_.split_value_;
}
inline float NodeEnc::split_value() const {
  // @@protoc_insertion_point(field_get:fedtree.NodeEnc.split_value)
  return _internal_split_value();
}
inline void NodeEnc::_internal_set_split_value(float value) {
  
  _impl_.split_value_ = value;
}
inline void NodeEnc::set_split_value(float value) {
  _internal_set_split_value(value);
  // @@protoc_insertion_point(field_set:fedtree.NodeEnc.split_value)
}

// int32 split_bid = 10;
inline void NodeEnc::clear_split_bid() {
  _impl_.split_bid_ = 0;
}
inline int32_t NodeEnc::_internal_split_bid() const {
  return _impl_.split_bid_;
}
inline int32_t NodeEnc::split_bid() const {
  // @@protoc_insertion_point(field_get:fedtree.NodeEnc.split_bid)
  return _internal_split_bid();
}
inline void NodeEnc::_internal_set_split_bid(int32_t value) {
  
  _impl_.split_bid_ = value;
}
inline void NodeEnc::set_split_bid(int32_t value) {
  _internal_set_split_bid(value);
  // @@protoc_insertion_point(field_set:fedtree.NodeEnc.split_bid)
}

// bool default_right = 11;
inline void NodeEnc::clear_default_right() {
  _impl_.default_right_ = false;
}
inline bool NodeEnc::_internal_default_right() const {
  return _impl_.default_right_;
}
inline bool NodeEnc::default_right() const {
  // @@protoc_insertion_point(field_get:fedtree.NodeEnc.default_right)
  return _internal_default_right();
}
inline void NodeEnc::_internal_set_default_right(bool value) {
  
  _impl_.default_right_ = value;
}
inline void NodeEnc::set_default_right(bool value) {
  _internal_set_default_right(value);
  // @@protoc_insertion_point(field_set:fedtree.NodeEnc.default_right)
}

// bool is_leaf = 12;
inline void NodeEnc::clear_is_leaf() {
  _impl_.is_leaf_ = false;
}
inline bool NodeEnc::_internal_is_leaf() const {
  return _impl_.is_leaf_;
}
inline bool NodeEnc::is_leaf() const {
  // @@protoc_insertion_point(field_get:fedtree.NodeEnc.is_leaf)
  return _internal_is_leaf();
}
inline void NodeEnc::_internal_set_is_leaf(bool value) {
  
  _impl_.is_leaf_ = value;
}
inline void NodeEnc::set_is_leaf(bool value) {
  _internal_set_is_leaf(value);
  // @@protoc_insertion_point(field_set:fedtree.NodeEnc.is_leaf)
}

// bool is_valid = 13;
inline void NodeEnc::clear_is_valid() {
  _impl_.is_valid_ = false;
}
inline bool NodeEnc::_internal_is_valid() const {
  return _impl_.is_valid_;
}
inline bool NodeEnc::is_valid() const {
  // @@protoc_insertion_point(field_get:fedtree.NodeEnc.is_valid)
  return _internal_is_valid();
}
inline void NodeEnc::_internal_set_is_valid(bool value) {
  
  _impl_.is_valid_ = value;
}
inline void NodeEnc::set_is_valid(bool value) {
  _internal_set_is_valid(value);
  // @@protoc_insertion_point(field_set:fedtree.NodeEnc.is_valid)
}

// bool is_pruned = 14;
inline void NodeEnc::clear_is_pruned() {
  _impl_.is_pruned_ = false;
}
inline bool NodeEnc::_internal_is_pruned() const {
  return _impl_.is_pruned_;
}
inline bool NodeEnc::is_pruned() const {
  // @@protoc_insertion_point(field_get:fedtree.NodeEnc.is_pruned)
  return _internal_is_pruned();
}
inline void NodeEnc::_internal_set_is_pruned(bool value) {
  
  _impl_.is_pruned_ = value;
}
inline void NodeEnc::set_is_pruned(bool value) {
  _internal_set_is_pruned(value);
  // @@protoc_insertion_point(field_set:fedtree.NodeEnc.is_pruned)
}

// string sum_gh_pair_g_enc = 15;
inline void NodeEnc::clear_sum_gh_pair_g_enc() {
  _impl_.sum_gh_pair_g_enc_.ClearToEmpty();
}
inline const std::string& NodeEnc::sum_gh_pair_g_enc() const {
  // @@protoc_insertion_point(field_get:fedtree.NodeEnc.sum_gh_pair_g_enc)
  return _internal_sum_gh_pair_g_enc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeEnc::set_sum_gh_pair_g_enc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sum_gh_pair_g_enc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fedtree.NodeEnc.sum_gh_pair_g_enc)
}
inline std::string* NodeEnc::mutable_sum_gh_pair_g_enc() {
  std::string* _s = _internal_mutable_sum_gh_pair_g_enc();
  // @@protoc_insertion_point(field_mutable:fedtree.NodeEnc.sum_gh_pair_g_enc)
  return _s;
}
inline const std::string& NodeEnc::_internal_sum_gh_pair_g_enc() const {
  return _impl_.sum_gh_pair_g_enc_.Get();
}
inline void NodeEnc::_internal_set_sum_gh_pair_g_enc(const std::string& value) {
  
  _impl_.sum_gh_pair_g_enc_.Set(value, GetArenaForAllocation());
}
inline std::string* NodeEnc::_internal_mutable_sum_gh_pair_g_enc() {
  
  return _impl_.sum_gh_pair_g_enc_.Mutable(GetArenaForAllocation());
}
inline std::string* NodeEnc::release_sum_gh_pair_g_enc() {
  // @@protoc_insertion_point(field_release:fedtree.NodeEnc.sum_gh_pair_g_enc)
  return _impl_.sum_gh_pair_g_enc_.Release();
}
inline void NodeEnc::set_allocated_sum_gh_pair_g_enc(std::string* sum_gh_pair_g_enc) {
  if (sum_gh_pair_g_enc != nullptr) {
    
  } else {
    
  }
  _impl_.sum_gh_pair_g_enc_.SetAllocated(sum_gh_pair_g_enc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sum_gh_pair_g_enc_.IsDefault()) {
    _impl_.sum_gh_pair_g_enc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fedtree.NodeEnc.sum_gh_pair_g_enc)
}

// string sum_gh_pair_h_enc = 16;
inline void NodeEnc::clear_sum_gh_pair_h_enc() {
  _impl_.sum_gh_pair_h_enc_.ClearToEmpty();
}
inline const std::string& NodeEnc::sum_gh_pair_h_enc() const {
  // @@protoc_insertion_point(field_get:fedtree.NodeEnc.sum_gh_pair_h_enc)
  return _internal_sum_gh_pair_h_enc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeEnc::set_sum_gh_pair_h_enc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sum_gh_pair_h_enc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fedtree.NodeEnc.sum_gh_pair_h_enc)
}
inline std::string* NodeEnc::mutable_sum_gh_pair_h_enc() {
  std::string* _s = _internal_mutable_sum_gh_pair_h_enc();
  // @@protoc_insertion_point(field_mutable:fedtree.NodeEnc.sum_gh_pair_h_enc)
  return _s;
}
inline const std::string& NodeEnc::_internal_sum_gh_pair_h_enc() const {
  return _impl_.sum_gh_pair_h_enc_.Get();
}
inline void NodeEnc::_internal_set_sum_gh_pair_h_enc(const std::string& value) {
  
  _impl_.sum_gh_pair_h_enc_.Set(value, GetArenaForAllocation());
}
inline std::string* NodeEnc::_internal_mutable_sum_gh_pair_h_enc() {
  
  return _impl_.sum_gh_pair_h_enc_.Mutable(GetArenaForAllocation());
}
inline std::string* NodeEnc::release_sum_gh_pair_h_enc() {
  // @@protoc_insertion_point(field_release:fedtree.NodeEnc.sum_gh_pair_h_enc)
  return _impl_.sum_gh_pair_h_enc_.Release();
}
inline void NodeEnc::set_allocated_sum_gh_pair_h_enc(std::string* sum_gh_pair_h_enc) {
  if (sum_gh_pair_h_enc != nullptr) {
    
  } else {
    
  }
  _impl_.sum_gh_pair_h_enc_.SetAllocated(sum_gh_pair_h_enc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sum_gh_pair_h_enc_.IsDefault()) {
    _impl_.sum_gh_pair_h_enc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fedtree.NodeEnc.sum_gh_pair_h_enc)
}

// int32 n_instances = 17;
inline void NodeEnc::clear_n_instances() {
  _impl_.n_instances_ = 0;
}
inline int32_t NodeEnc::_internal_n_instances() const {
  return _impl_.n_instances_;
}
inline int32_t NodeEnc::n_instances() const {
  // @@protoc_insertion_point(field_get:fedtree.NodeEnc.n_instances)
  return _internal_n_instances();
}
inline void NodeEnc::_internal_set_n_instances(int32_t value) {
  
  _impl_.n_instances_ = value;
}
inline void NodeEnc::set_n_instances(int32_t value) {
  _internal_set_n_instances(value);
  // @@protoc_insertion_point(field_set:fedtree.NodeEnc.n_instances)
}

// -------------------------------------------------------------------

// Node

// int32 final_id = 1;
inline void Node::clear_final_id() {
  _impl_.final_id_ = 0;
}
inline int32_t Node::_internal_final_id() const {
  return _impl_.final_id_;
}
inline int32_t Node::final_id() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.final_id)
  return _internal_final_id();
}
inline void Node::_internal_set_final_id(int32_t value) {
  
  _impl_.final_id_ = value;
}
inline void Node::set_final_id(int32_t value) {
  _internal_set_final_id(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.final_id)
}

// int32 lch_index = 2;
inline void Node::clear_lch_index() {
  _impl_.lch_index_ = 0;
}
inline int32_t Node::_internal_lch_index() const {
  return _impl_.lch_index_;
}
inline int32_t Node::lch_index() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.lch_index)
  return _internal_lch_index();
}
inline void Node::_internal_set_lch_index(int32_t value) {
  
  _impl_.lch_index_ = value;
}
inline void Node::set_lch_index(int32_t value) {
  _internal_set_lch_index(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.lch_index)
}

// int32 rch_index = 3;
inline void Node::clear_rch_index() {
  _impl_.rch_index_ = 0;
}
inline int32_t Node::_internal_rch_index() const {
  return _impl_.rch_index_;
}
inline int32_t Node::rch_index() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.rch_index)
  return _internal_rch_index();
}
inline void Node::_internal_set_rch_index(int32_t value) {
  
  _impl_.rch_index_ = value;
}
inline void Node::set_rch_index(int32_t value) {
  _internal_set_rch_index(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.rch_index)
}

// int32 parent_index = 4;
inline void Node::clear_parent_index() {
  _impl_.parent_index_ = 0;
}
inline int32_t Node::_internal_parent_index() const {
  return _impl_.parent_index_;
}
inline int32_t Node::parent_index() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.parent_index)
  return _internal_parent_index();
}
inline void Node::_internal_set_parent_index(int32_t value) {
  
  _impl_.parent_index_ = value;
}
inline void Node::set_parent_index(int32_t value) {
  _internal_set_parent_index(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.parent_index)
}

// float gain = 5;
inline void Node::clear_gain() {
  _impl_.gain_ = 0;
}
inline float Node::_internal_gain() const {
  return _impl_.gain_;
}
inline float Node::gain() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.gain)
  return _internal_gain();
}
inline void Node::_internal_set_gain(float value) {
  
  _impl_.gain_ = value;
}
inline void Node::set_gain(float value) {
  _internal_set_gain(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.gain)
}

// float base_weight = 6;
inline void Node::clear_base_weight() {
  _impl_.base_weight_ = 0;
}
inline float Node::_internal_base_weight() const {
  return _impl_.base_weight_;
}
inline float Node::base_weight() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.base_weight)
  return _internal_base_weight();
}
inline void Node::_internal_set_base_weight(float value) {
  
  _impl_.base_weight_ = value;
}
inline void Node::set_base_weight(float value) {
  _internal_set_base_weight(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.base_weight)
}

// int32 split_feature_id = 7;
inline void Node::clear_split_feature_id() {
  _impl_.split_feature_id_ = 0;
}
inline int32_t Node::_internal_split_feature_id() const {
  return _impl_.split_feature_id_;
}
inline int32_t Node::split_feature_id() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.split_feature_id)
  return _internal_split_feature_id();
}
inline void Node::_internal_set_split_feature_id(int32_t value) {
  
  _impl_.split_feature_id_ = value;
}
inline void Node::set_split_feature_id(int32_t value) {
  _internal_set_split_feature_id(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.split_feature_id)
}

// int32 pid = 8;
inline void Node::clear_pid() {
  _impl_.pid_ = 0;
}
inline int32_t Node::_internal_pid() const {
  return _impl_.pid_;
}
inline int32_t Node::pid() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.pid)
  return _internal_pid();
}
inline void Node::_internal_set_pid(int32_t value) {
  
  _impl_.pid_ = value;
}
inline void Node::set_pid(int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.pid)
}

// float split_value = 9;
inline void Node::clear_split_value() {
  _impl_.split_value_ = 0;
}
inline float Node::_internal_split_value() const {
  return _impl_.split_value_;
}
inline float Node::split_value() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.split_value)
  return _internal_split_value();
}
inline void Node::_internal_set_split_value(float value) {
  
  _impl_.split_value_ = value;
}
inline void Node::set_split_value(float value) {
  _internal_set_split_value(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.split_value)
}

// int32 split_bid = 10;
inline void Node::clear_split_bid() {
  _impl_.split_bid_ = 0;
}
inline int32_t Node::_internal_split_bid() const {
  return _impl_.split_bid_;
}
inline int32_t Node::split_bid() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.split_bid)
  return _internal_split_bid();
}
inline void Node::_internal_set_split_bid(int32_t value) {
  
  _impl_.split_bid_ = value;
}
inline void Node::set_split_bid(int32_t value) {
  _internal_set_split_bid(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.split_bid)
}

// bool default_right = 11;
inline void Node::clear_default_right() {
  _impl_.default_right_ = false;
}
inline bool Node::_internal_default_right() const {
  return _impl_.default_right_;
}
inline bool Node::default_right() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.default_right)
  return _internal_default_right();
}
inline void Node::_internal_set_default_right(bool value) {
  
  _impl_.default_right_ = value;
}
inline void Node::set_default_right(bool value) {
  _internal_set_default_right(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.default_right)
}

// bool is_leaf = 12;
inline void Node::clear_is_leaf() {
  _impl_.is_leaf_ = false;
}
inline bool Node::_internal_is_leaf() const {
  return _impl_.is_leaf_;
}
inline bool Node::is_leaf() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.is_leaf)
  return _internal_is_leaf();
}
inline void Node::_internal_set_is_leaf(bool value) {
  
  _impl_.is_leaf_ = value;
}
inline void Node::set_is_leaf(bool value) {
  _internal_set_is_leaf(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.is_leaf)
}

// bool is_valid = 13;
inline void Node::clear_is_valid() {
  _impl_.is_valid_ = false;
}
inline bool Node::_internal_is_valid() const {
  return _impl_.is_valid_;
}
inline bool Node::is_valid() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.is_valid)
  return _internal_is_valid();
}
inline void Node::_internal_set_is_valid(bool value) {
  
  _impl_.is_valid_ = value;
}
inline void Node::set_is_valid(bool value) {
  _internal_set_is_valid(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.is_valid)
}

// bool is_pruned = 14;
inline void Node::clear_is_pruned() {
  _impl_.is_pruned_ = false;
}
inline bool Node::_internal_is_pruned() const {
  return _impl_.is_pruned_;
}
inline bool Node::is_pruned() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.is_pruned)
  return _internal_is_pruned();
}
inline void Node::_internal_set_is_pruned(bool value) {
  
  _impl_.is_pruned_ = value;
}
inline void Node::set_is_pruned(bool value) {
  _internal_set_is_pruned(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.is_pruned)
}

// float sum_gh_pair_g = 15;
inline void Node::clear_sum_gh_pair_g() {
  _impl_.sum_gh_pair_g_ = 0;
}
inline float Node::_internal_sum_gh_pair_g() const {
  return _impl_.sum_gh_pair_g_;
}
inline float Node::sum_gh_pair_g() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.sum_gh_pair_g)
  return _internal_sum_gh_pair_g();
}
inline void Node::_internal_set_sum_gh_pair_g(float value) {
  
  _impl_.sum_gh_pair_g_ = value;
}
inline void Node::set_sum_gh_pair_g(float value) {
  _internal_set_sum_gh_pair_g(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.sum_gh_pair_g)
}

// float sum_gh_pair_h = 16;
inline void Node::clear_sum_gh_pair_h() {
  _impl_.sum_gh_pair_h_ = 0;
}
inline float Node::_internal_sum_gh_pair_h() const {
  return _impl_.sum_gh_pair_h_;
}
inline float Node::sum_gh_pair_h() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.sum_gh_pair_h)
  return _internal_sum_gh_pair_h();
}
inline void Node::_internal_set_sum_gh_pair_h(float value) {
  
  _impl_.sum_gh_pair_h_ = value;
}
inline void Node::set_sum_gh_pair_h(float value) {
  _internal_set_sum_gh_pair_h(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.sum_gh_pair_h)
}

// int32 n_instances = 17;
inline void Node::clear_n_instances() {
  _impl_.n_instances_ = 0;
}
inline int32_t Node::_internal_n_instances() const {
  return _impl_.n_instances_;
}
inline int32_t Node::n_instances() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.n_instances)
  return _internal_n_instances();
}
inline void Node::_internal_set_n_instances(int32_t value) {
  
  _impl_.n_instances_ = value;
}
inline void Node::set_n_instances(int32_t value) {
  _internal_set_n_instances(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.n_instances)
}

// -------------------------------------------------------------------

// NodeEncArray

// repeated int32 final_id = 1 [packed = true];
inline int NodeEncArray::_internal_final_id_size() const {
  return _impl_.final_id_.size();
}
inline int NodeEncArray::final_id_size() const {
  return _internal_final_id_size();
}
inline void NodeEncArray::clear_final_id() {
  _impl_.final_id_.Clear();
}
inline int32_t NodeEncArray::_internal_final_id(int index) const {
  return _impl_.final_id_.Get(index);
}
inline int32_t NodeEncArray::final_id(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.NodeEncArray.final_id)
  return _internal_final_id(index);
}
inline void NodeEncArray::set_final_id(int index, int32_t value) {
  _impl_.final_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.NodeEncArray.final_id)
}
inline void NodeEncArray::_internal_add_final_id(int32_t value) {
  _impl_.final_id_.Add(value);
}
inline void NodeEncArray::add_final_id(int32_t value) {
  _internal_add_final_id(value);
  // @@protoc_insertion_point(field_add:fedtree.NodeEncArray.final_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeEncArray::_internal_final_id() const {
  return _impl_.final_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeEncArray::final_id() const {
  // @@protoc_insertion_point(field_list:fedtree.NodeEncArray.final_id)
  return _internal_final_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeEncArray::_internal_mutable_final_id() {
  return &_impl_.final_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeEncArray::mutable_final_id() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.NodeEncArray.final_id)
  return _internal_mutable_final_id();
}

// repeated int32 lch_index = 2 [packed = true];
inline int NodeEncArray::_internal_lch_index_size() const {
  return _impl_.lch_index_.size();
}
inline int NodeEncArray::lch_index_size() const {
  return _internal_lch_index_size();
}
inline void NodeEncArray::clear_lch_index() {
  _impl_.lch_index_.Clear();
}
inline int32_t NodeEncArray::_internal_lch_index(int index) const {
  return _impl_.lch_index_.Get(index);
}
inline int32_t NodeEncArray::lch_index(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.NodeEncArray.lch_index)
  return _internal_lch_index(index);
}
inline void NodeEncArray::set_lch_index(int index, int32_t value) {
  _impl_.lch_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.NodeEncArray.lch_index)
}
inline void NodeEncArray::_internal_add_lch_index(int32_t value) {
  _impl_.lch_index_.Add(value);
}
inline void NodeEncArray::add_lch_index(int32_t value) {
  _internal_add_lch_index(value);
  // @@protoc_insertion_point(field_add:fedtree.NodeEncArray.lch_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeEncArray::_internal_lch_index() const {
  return _impl_.lch_index_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeEncArray::lch_index() const {
  // @@protoc_insertion_point(field_list:fedtree.NodeEncArray.lch_index)
  return _internal_lch_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeEncArray::_internal_mutable_lch_index() {
  return &_impl_.lch_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeEncArray::mutable_lch_index() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.NodeEncArray.lch_index)
  return _internal_mutable_lch_index();
}

// repeated int32 rch_index = 3 [packed = true];
inline int NodeEncArray::_internal_rch_index_size() const {
  return _impl_.rch_index_.size();
}
inline int NodeEncArray::rch_index_size() const {
  return _internal_rch_index_size();
}
inline void NodeEncArray::clear_rch_index() {
  _impl_.rch_index_.Clear();
}
inline int32_t NodeEncArray::_internal_rch_index(int index) const {
  return _impl_.rch_index_.Get(index);
}
inline int32_t NodeEncArray::rch_index(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.NodeEncArray.rch_index)
  return _internal_rch_index(index);
}
inline void NodeEncArray::set_rch_index(int index, int32_t value) {
  _impl_.rch_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.NodeEncArray.rch_index)
}
inline void NodeEncArray::_internal_add_rch_index(int32_t value) {
  _impl_.rch_index_.Add(value);
}
inline void NodeEncArray::add_rch_index(int32_t value) {
  _internal_add_rch_index(value);
  // @@protoc_insertion_point(field_add:fedtree.NodeEncArray.rch_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeEncArray::_internal_rch_index() const {
  return _impl_.rch_index_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeEncArray::rch_index() const {
  // @@protoc_insertion_point(field_list:fedtree.NodeEncArray.rch_index)
  return _internal_rch_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeEncArray::_internal_mutable_rch_index() {
  return &_impl_.rch_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeEncArray::mutable_rch_index() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.NodeEncArray.rch_index)
  return _internal_mutable_rch_index();
}

// repeated int32 parent_index = 4 [packed = true];
inline int NodeEncArray::_internal_parent_index_size() const {
  return _impl_.parent_index_.size();
}
inline int NodeEncArray::parent_index_size() const {
  return _internal_parent_index_size();
}
inline void NodeEncArray::clear_parent_index() {
  _impl_.parent_index_.Clear();
}
inline int32_t NodeEncArray::_internal_parent_index(int index) const {
  return _impl_.parent_index_.Get(index);
}
inline int32_t NodeEncArray::parent_index(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.NodeEncArray.parent_index)
  return _internal_parent_index(index);
}
inline void NodeEncArray::set_parent_index(int index, int32_t value) {
  _impl_.parent_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.NodeEncArray.parent_index)
}
inline void NodeEncArray::_internal_add_parent_index(int32_t value) {
  _impl_.parent_index_.Add(value);
}
inline void NodeEncArray::add_parent_index(int32_t value) {
  _internal_add_parent_index(value);
  // @@protoc_insertion_point(field_add:fedtree.NodeEncArray.parent_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeEncArray::_internal_parent_index() const {
  return _impl_.parent_index_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeEncArray::parent_index() const {
  // @@protoc_insertion_point(field_list:fedtree.NodeEncArray.parent_index)
  return _internal_parent_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeEncArray::_internal_mutable_parent_index() {
  return &_impl_.parent_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeEncArray::mutable_parent_index() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.NodeEncArray.parent_index)
  return _internal_mutable_parent_index();
}

// repeated float gain = 5 [packed = true];
inline int NodeEncArray::_internal_gain_size() const {
  return _impl_.gain_.size();
}
inline int NodeEncArray::gain_size() const {
  return _internal_gain_size();
}
inline void NodeEncArray::clear_gain() {
  _impl_.gain_.Clear();
}
inline float NodeEncArray::_internal_gain(int index) const {
  return _impl_.gain_.Get(index);
}
inline float NodeEncArray::gain(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.NodeEncArray.gain)
  return _internal_gain(index);
}
inline void NodeEncArray::set_gain(int index, float value) {
  _impl_.gain_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.NodeEncArray.gain)
}
inline void NodeEncArray::_internal_add_gain(float value) {
  _impl_.gain_.Add(value);
}
inline void NodeEncArray::add_gain(float value) {
  _internal_add_gain(value);
  // @@protoc_insertion_point(field_add:fedtree.NodeEncArray.gain)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
NodeEncArray::_internal_gain() const {
  return _impl_.gain_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
NodeEncArray::gain() const {
  // @@protoc_insertion_point(field_list:fedtree.NodeEncArray.gain)
  return _internal_gain();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
NodeEncArray::_internal_mutable_gain() {
  return &_impl_.gain_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
NodeEncArray::mutable_gain() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.NodeEncArray.gain)
  return _internal_mutable_gain();
}

// repeated float base_weight = 6 [packed = true];
inline int NodeEncArray::_internal_base_weight_size() const {
  return _impl_.base_weight_.size();
}
inline int NodeEncArray::base_weight_size() const {
  return _internal_base_weight_size();
}
inline void NodeEncArray::clear_base_weight() {
  _impl_.base_weight_.Clear();
}
inline float NodeEncArray::_internal_base_weight(int index) const {
  return _impl_.base_weight_.Get(index);
}
inline float NodeEncArray::base_weight(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.NodeEncArray.base_weight)
  return _internal_base_weight(index);
}
inline void NodeEncArray::set_base_weight(int index, float value) {
  _impl_.base_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.NodeEncArray.base_weight)
}
inline void NodeEncArray::_internal_add_base_weight(float value) {
  _impl_.base_weight_.Add(value);
}
inline void NodeEncArray::add_base_weight(float value) {
  _internal_add_base_weight(value);
  // @@protoc_insertion_point(field_add:fedtree.NodeEncArray.base_weight)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
NodeEncArray::_internal_base_weight() const {
  return _impl_.base_weight_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
NodeEncArray::base_weight() const {
  // @@protoc_insertion_point(field_list:fedtree.NodeEncArray.base_weight)
  return _internal_base_weight();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
NodeEncArray::_internal_mutable_base_weight() {
  return &_impl_.base_weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
NodeEncArray::mutable_base_weight() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.NodeEncArray.base_weight)
  return _internal_mutable_base_weight();
}

// repeated int32 split_feature_id = 7 [packed = true];
inline int NodeEncArray::_internal_split_feature_id_size() const {
  return _impl_.split_feature_id_.size();
}
inline int NodeEncArray::split_feature_id_size() const {
  return _internal_split_feature_id_size();
}
inline void NodeEncArray::clear_split_feature_id() {
  _impl_.split_feature_id_.Clear();
}
inline int32_t NodeEncArray::_internal_split_feature_id(int index) const {
  return _impl_.split_feature_id_.Get(index);
}
inline int32_t NodeEncArray::split_feature_id(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.NodeEncArray.split_feature_id)
  return _internal_split_feature_id(index);
}
inline void NodeEncArray::set_split_feature_id(int index, int32_t value) {
  _impl_.split_feature_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.NodeEncArray.split_feature_id)
}
inline void NodeEncArray::_internal_add_split_feature_id(int32_t value) {
  _impl_.split_feature_id_.Add(value);
}
inline void NodeEncArray::add_split_feature_id(int32_t value) {
  _internal_add_split_feature_id(value);
  // @@protoc_insertion_point(field_add:fedtree.NodeEncArray.split_feature_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeEncArray::_internal_split_feature_id() const {
  return _impl_.split_feature_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeEncArray::split_feature_id() const {
  // @@protoc_insertion_point(field_list:fedtree.NodeEncArray.split_feature_id)
  return _internal_split_feature_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeEncArray::_internal_mutable_split_feature_id() {
  return &_impl_.split_feature_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeEncArray::mutable_split_feature_id() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.NodeEncArray.split_feature_id)
  return _internal_mutable_split_feature_id();
}

// repeated int32 pid = 8 [packed = true];
inline int NodeEncArray::_internal_pid_size() const {
  return _impl_.pid_.size();
}
inline int NodeEncArray::pid_size() const {
  return _internal_pid_size();
}
inline void NodeEncArray::clear_pid() {
  _impl_.pid_.Clear();
}
inline int32_t NodeEncArray::_internal_pid(int index) const {
  return _impl_.pid_.Get(index);
}
inline int32_t NodeEncArray::pid(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.NodeEncArray.pid)
  return _internal_pid(index);
}
inline void NodeEncArray::set_pid(int index, int32_t value) {
  _impl_.pid_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.NodeEncArray.pid)
}
inline void NodeEncArray::_internal_add_pid(int32_t value) {
  _impl_.pid_.Add(value);
}
inline void NodeEncArray::add_pid(int32_t value) {
  _internal_add_pid(value);
  // @@protoc_insertion_point(field_add:fedtree.NodeEncArray.pid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeEncArray::_internal_pid() const {
  return _impl_.pid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeEncArray::pid() const {
  // @@protoc_insertion_point(field_list:fedtree.NodeEncArray.pid)
  return _internal_pid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeEncArray::_internal_mutable_pid() {
  return &_impl_.pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeEncArray::mutable_pid() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.NodeEncArray.pid)
  return _internal_mutable_pid();
}

// repeated float split_value = 9 [packed = true];
inline int NodeEncArray::_internal_split_value_size() const {
  return _impl_.split_value_.size();
}
inline int NodeEncArray::split_value_size() const {
  return _internal_split_value_size();
}
inline void NodeEncArray::clear_split_value() {
  _impl_.split_value_.Clear();
}
inline float NodeEncArray::_internal_split_value(int index) const {
  return _impl_.split_value_.Get(index);
}
inline float NodeEncArray::split_value(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.NodeEncArray.split_value)
  return _internal_split_value(index);
}
inline void NodeEncArray::set_split_value(int index, float value) {
  _impl_.split_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.NodeEncArray.split_value)
}
inline void NodeEncArray::_internal_add_split_value(float value) {
  _impl_.split_value_.Add(value);
}
inline void NodeEncArray::add_split_value(float value) {
  _internal_add_split_value(value);
  // @@protoc_insertion_point(field_add:fedtree.NodeEncArray.split_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
NodeEncArray::_internal_split_value() const {
  return _impl_.split_value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
NodeEncArray::split_value() const {
  // @@protoc_insertion_point(field_list:fedtree.NodeEncArray.split_value)
  return _internal_split_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
NodeEncArray::_internal_mutable_split_value() {
  return &_impl_.split_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
NodeEncArray::mutable_split_value() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.NodeEncArray.split_value)
  return _internal_mutable_split_value();
}

// repeated int32 split_bid = 10 [packed = true];
inline int NodeEncArray::_internal_split_bid_size() const {
  return _impl_.split_bid_.size();
}
inline int NodeEncArray::split_bid_size() const {
  return _internal_split_bid_size();
}
inline void NodeEncArray::clear_split_bid() {
  _impl_.split_bid_.Clear();
}
inline int32_t NodeEncArray::_internal_split_bid(int index) const {
  return _impl_.split_bid_.Get(index);
}
inline int32_t NodeEncArray::split_bid(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.NodeEncArray.split_bid)
  return _internal_split_bid(index);
}
inline void NodeEncArray::set_split_bid(int index, int32_t value) {
  _impl_.split_bid_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.NodeEncArray.split_bid)
}
inline void NodeEncArray::_internal_add_split_bid(int32_t value) {
  _impl_.split_bid_.Add(value);
}
inline void NodeEncArray::add_split_bid(int32_t value) {
  _internal_add_split_bid(value);
  // @@protoc_insertion_point(field_add:fedtree.NodeEncArray.split_bid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeEncArray::_internal_split_bid() const {
  return _impl_.split_bid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeEncArray::split_bid() const {
  // @@protoc_insertion_point(field_list:fedtree.NodeEncArray.split_bid)
  return _internal_split_bid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeEncArray::_internal_mutable_split_bid() {
  return &_impl_.split_bid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeEncArray::mutable_split_bid() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.NodeEncArray.split_bid)
  return _internal_mutable_split_bid();
}

// repeated bool default_right = 11 [packed = true];
inline int NodeEncArray::_internal_default_right_size() const {
  return _impl_.default_right_.size();
}
inline int NodeEncArray::default_right_size() const {
  return _internal_default_right_size();
}
inline void NodeEncArray::clear_default_right() {
  _impl_.default_right_.Clear();
}
inline bool NodeEncArray::_internal_default_right(int index) const {
  return _impl_.default_right_.Get(index);
}
inline bool NodeEncArray::default_right(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.NodeEncArray.default_right)
  return _internal_default_right(index);
}
inline void NodeEncArray::set_default_right(int index, bool value) {
  _impl_.default_right_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.NodeEncArray.default_right)
}
inline void NodeEncArray::_internal_add_default_right(bool value) {
  _impl_.default_right_.Add(value);
}
inline void NodeEncArray::add_default_right(bool value) {
  _internal_add_default_right(value);
  // @@protoc_insertion_point(field_add:fedtree.NodeEncArray.default_right)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
NodeEncArray::_internal_default_right() const {
  return _impl_.default_right_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
NodeEncArray::default_right() const {
  // @@protoc_insertion_point(field_list:fedtree.NodeEncArray.default_right)
  return _internal_default_right();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
NodeEncArray::_internal_mutable_default_right() {
  return &_impl_.default_right_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
NodeEncArray::mutable_default_right() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.NodeEncArray.default_right)
  return _internal_mutable_default_right();
}

// repeated bool is_leaf = 12 [packed = true];
inline int NodeEncArray::_internal_is_leaf_size() const {
  return _impl_.is_leaf_.size();
}
inline int NodeEncArray::is_leaf_size() const {
  return _internal_is_leaf_size();
}
inline void NodeEncArray::clear_is_leaf() {
  _impl_.is_leaf_.Clear();
}
inline bool NodeEncArray::_internal_is_leaf(int index) const {
  return _impl_.is_leaf_.Get(index);
}
inline bool NodeEncArray::is_leaf(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.NodeEncArray.is_leaf)
  return _internal_is_leaf(index);
}
inline void NodeEncArray::set_is_leaf(int index, bool value) {
  _impl_.is_leaf_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.NodeEncArray.is_leaf)
}
inline void NodeEncArray::_internal_add_is_leaf(bool value) {
  _impl_.is_leaf_.Add(value);
}
inline void NodeEncArray::add_is_leaf(bool value) {
  _internal_add_is_leaf(value);
  // @@protoc_insertion_point(field_add:fedtree.NodeEncArray.is_leaf)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
NodeEncArray::_internal_is_leaf() const {
  return _impl_.is_leaf_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
NodeEncArray::is_leaf() const {
  // @@protoc_insertion_point(field_list:fedtree.NodeEncArray.is_leaf)
  return _internal_is_leaf();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
NodeEncArray::_internal_mutable_is_leaf() {
  return &_impl_.is_leaf_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
NodeEncArray::mutable_is_leaf() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.NodeEncArray.is_leaf)
  return _internal_mutable_is_leaf();
}

// repeated bool is_valid = 13 [packed = true];
inline int NodeEncArray::_internal_is_valid_size() const {
  return _impl_.is_valid_.size();
}
inline int NodeEncArray::is_valid_size() const {
  return _internal_is_valid_size();
}
inline void NodeEncArray::clear_is_valid() {
  _impl_.is_valid_.Clear();
}
inline bool NodeEncArray::_internal_is_valid(int index) const {
  return _impl_.is_valid_.Get(index);
}
inline bool NodeEncArray::is_valid(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.NodeEncArray.is_valid)
  return _internal_is_valid(index);
}
inline void NodeEncArray::set_is_valid(int index, bool value) {
  _impl_.is_valid_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.NodeEncArray.is_valid)
}
inline void NodeEncArray::_internal_add_is_valid(bool value) {
  _impl_.is_valid_.Add(value);
}
inline void NodeEncArray::add_is_valid(bool value) {
  _internal_add_is_valid(value);
  // @@protoc_insertion_point(field_add:fedtree.NodeEncArray.is_valid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
NodeEncArray::_internal_is_valid() const {
  return _impl_.is_valid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
NodeEncArray::is_valid() const {
  // @@protoc_insertion_point(field_list:fedtree.NodeEncArray.is_valid)
  return _internal_is_valid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
NodeEncArray::_internal_mutable_is_valid() {
  return &_impl_.is_valid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
NodeEncArray::mutable_is_valid() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.NodeEncArray.is_valid)
  return _internal_mutable_is_valid();
}

// repeated bool is_pruned = 14 [packed = true];
inline int NodeEncArray::_internal_is_pruned_size() const {
  return _impl_.is_pruned_.size();
}
inline int NodeEncArray::is_pruned_size() const {
  return _internal_is_pruned_size();
}
inline void NodeEncArray::clear_is_pruned() {
  _impl_.is_pruned_.Clear();
}
inline bool NodeEncArray::_internal_is_pruned(int index) const {
  return _impl_.is_pruned_.Get(index);
}
inline bool NodeEncArray::is_pruned(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.NodeEncArray.is_pruned)
  return _internal_is_pruned(index);
}
inline void NodeEncArray::set_is_pruned(int index, bool value) {
  _impl_.is_pruned_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.NodeEncArray.is_pruned)
}
inline void NodeEncArray::_internal_add_is_pruned(bool value) {
  _impl_.is_pruned_.Add(value);
}
inline void NodeEncArray::add_is_pruned(bool value) {
  _internal_add_is_pruned(value);
  // @@protoc_insertion_point(field_add:fedtree.NodeEncArray.is_pruned)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
NodeEncArray::_internal_is_pruned() const {
  return _impl_.is_pruned_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
NodeEncArray::is_pruned() const {
  // @@protoc_insertion_point(field_list:fedtree.NodeEncArray.is_pruned)
  return _internal_is_pruned();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
NodeEncArray::_internal_mutable_is_pruned() {
  return &_impl_.is_pruned_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
NodeEncArray::mutable_is_pruned() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.NodeEncArray.is_pruned)
  return _internal_mutable_is_pruned();
}

// repeated string sum_gh_pair_g_enc = 15;
inline int NodeEncArray::_internal_sum_gh_pair_g_enc_size() const {
  return _impl_.sum_gh_pair_g_enc_.size();
}
inline int NodeEncArray::sum_gh_pair_g_enc_size() const {
  return _internal_sum_gh_pair_g_enc_size();
}
inline void NodeEncArray::clear_sum_gh_pair_g_enc() {
  _impl_.sum_gh_pair_g_enc_.Clear();
}
inline std::string* NodeEncArray::add_sum_gh_pair_g_enc() {
  std::string* _s = _internal_add_sum_gh_pair_g_enc();
  // @@protoc_insertion_point(field_add_mutable:fedtree.NodeEncArray.sum_gh_pair_g_enc)
  return _s;
}
inline const std::string& NodeEncArray::_internal_sum_gh_pair_g_enc(int index) const {
  return _impl_.sum_gh_pair_g_enc_.Get(index);
}
inline const std::string& NodeEncArray::sum_gh_pair_g_enc(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.NodeEncArray.sum_gh_pair_g_enc)
  return _internal_sum_gh_pair_g_enc(index);
}
inline std::string* NodeEncArray::mutable_sum_gh_pair_g_enc(int index) {
  // @@protoc_insertion_point(field_mutable:fedtree.NodeEncArray.sum_gh_pair_g_enc)
  return _impl_.sum_gh_pair_g_enc_.Mutable(index);
}
inline void NodeEncArray::set_sum_gh_pair_g_enc(int index, const std::string& value) {
  _impl_.sum_gh_pair_g_enc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:fedtree.NodeEncArray.sum_gh_pair_g_enc)
}
inline void NodeEncArray::set_sum_gh_pair_g_enc(int index, std::string&& value) {
  _impl_.sum_gh_pair_g_enc_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:fedtree.NodeEncArray.sum_gh_pair_g_enc)
}
inline void NodeEncArray::set_sum_gh_pair_g_enc(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.sum_gh_pair_g_enc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fedtree.NodeEncArray.sum_gh_pair_g_enc)
}
inline void NodeEncArray::set_sum_gh_pair_g_enc(int index, const char* value, size_t size) {
  _impl_.sum_gh_pair_g_enc_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fedtree.NodeEncArray.sum_gh_pair_g_enc)
}
inline std::string* NodeEncArray::_internal_add_sum_gh_pair_g_enc() {
  return _impl_.sum_gh_pair_g_enc_.Add();
}
inline void NodeEncArray::add_sum_gh_pair_g_enc(const std::string& value) {
  _impl_.sum_gh_pair_g_enc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fedtree.NodeEncArray.sum_gh_pair_g_enc)
}
inline void NodeEncArray::add_sum_gh_pair_g_enc(std::string&& value) {
  _impl_.sum_gh_pair_g_enc_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:fedtree.NodeEncArray.sum_gh_pair_g_enc)
}
inline void NodeEncArray::add_sum_gh_pair_g_enc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.sum_gh_pair_g_enc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fedtree.NodeEncArray.sum_gh_pair_g_enc)
}
inline void NodeEncArray::add_sum_gh_pair_g_enc(const char* value, size_t size) {
  _impl_.sum_gh_pair_g_enc_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fedtree.NodeEncArray.sum_gh_pair_g_enc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NodeEncArray::sum_gh_pair_g_enc() const {
  // @@protoc_insertion_point(field_list:fedtree.NodeEncArray.sum_gh_pair_g_enc)
  return _impl_.sum_gh_pair_g_enc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NodeEncArray::mutable_sum_gh_pair_g_enc() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.NodeEncArray.sum_gh_pair_g_enc)
  return &_impl_.sum_gh_pair_g_enc_;
}

// repeated string sum_gh_pair_h_enc = 16;
inline int NodeEncArray::_internal_sum_gh_pair_h_enc_size() const {
  return _impl_.sum_gh_pair_h_enc_.size();
}
inline int NodeEncArray::sum_gh_pair_h_enc_size() const {
  return _internal_sum_gh_pair_h_enc_size();
}
inline void NodeEncArray::clear_sum_gh_pair_h_enc() {
  _impl_.sum_gh_pair_h_enc_.Clear();
}
inline std::string* NodeEncArray::add_sum_gh_pair_h_enc() {
  std::string* _s = _internal_add_sum_gh_pair_h_enc();
  // @@protoc_insertion_point(field_add_mutable:fedtree.NodeEncArray.sum_gh_pair_h_enc)
  return _s;
}
inline const std::string& NodeEncArray::_internal_sum_gh_pair_h_enc(int index) const {
  return _impl_.sum_gh_pair_h_enc_.Get(index);
}
inline const std::string& NodeEncArray::sum_gh_pair_h_enc(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.NodeEncArray.sum_gh_pair_h_enc)
  return _internal_sum_gh_pair_h_enc(index);
}
inline std::string* NodeEncArray::mutable_sum_gh_pair_h_enc(int index) {
  // @@protoc_insertion_point(field_mutable:fedtree.NodeEncArray.sum_gh_pair_h_enc)
  return _impl_.sum_gh_pair_h_enc_.Mutable(index);
}
inline void NodeEncArray::set_sum_gh_pair_h_enc(int index, const std::string& value) {
  _impl_.sum_gh_pair_h_enc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:fedtree.NodeEncArray.sum_gh_pair_h_enc)
}
inline void NodeEncArray::set_sum_gh_pair_h_enc(int index, std::string&& value) {
  _impl_.sum_gh_pair_h_enc_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:fedtree.NodeEncArray.sum_gh_pair_h_enc)
}
inline void NodeEncArray::set_sum_gh_pair_h_enc(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.sum_gh_pair_h_enc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fedtree.NodeEncArray.sum_gh_pair_h_enc)
}
inline void NodeEncArray::set_sum_gh_pair_h_enc(int index, const char* value, size_t size) {
  _impl_.sum_gh_pair_h_enc_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fedtree.NodeEncArray.sum_gh_pair_h_enc)
}
inline std::string* NodeEncArray::_internal_add_sum_gh_pair_h_enc() {
  return _impl_.sum_gh_pair_h_enc_.Add();
}
inline void NodeEncArray::add_sum_gh_pair_h_enc(const std::string& value) {
  _impl_.sum_gh_pair_h_enc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fedtree.NodeEncArray.sum_gh_pair_h_enc)
}
inline void NodeEncArray::add_sum_gh_pair_h_enc(std::string&& value) {
  _impl_.sum_gh_pair_h_enc_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:fedtree.NodeEncArray.sum_gh_pair_h_enc)
}
inline void NodeEncArray::add_sum_gh_pair_h_enc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.sum_gh_pair_h_enc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fedtree.NodeEncArray.sum_gh_pair_h_enc)
}
inline void NodeEncArray::add_sum_gh_pair_h_enc(const char* value, size_t size) {
  _impl_.sum_gh_pair_h_enc_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fedtree.NodeEncArray.sum_gh_pair_h_enc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NodeEncArray::sum_gh_pair_h_enc() const {
  // @@protoc_insertion_point(field_list:fedtree.NodeEncArray.sum_gh_pair_h_enc)
  return _impl_.sum_gh_pair_h_enc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NodeEncArray::mutable_sum_gh_pair_h_enc() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.NodeEncArray.sum_gh_pair_h_enc)
  return &_impl_.sum_gh_pair_h_enc_;
}

// repeated int32 n_instances = 17 [packed = true];
inline int NodeEncArray::_internal_n_instances_size() const {
  return _impl_.n_instances_.size();
}
inline int NodeEncArray::n_instances_size() const {
  return _internal_n_instances_size();
}
inline void NodeEncArray::clear_n_instances() {
  _impl_.n_instances_.Clear();
}
inline int32_t NodeEncArray::_internal_n_instances(int index) const {
  return _impl_.n_instances_.Get(index);
}
inline int32_t NodeEncArray::n_instances(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.NodeEncArray.n_instances)
  return _internal_n_instances(index);
}
inline void NodeEncArray::set_n_instances(int index, int32_t value) {
  _impl_.n_instances_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.NodeEncArray.n_instances)
}
inline void NodeEncArray::_internal_add_n_instances(int32_t value) {
  _impl_.n_instances_.Add(value);
}
inline void NodeEncArray::add_n_instances(int32_t value) {
  _internal_add_n_instances(value);
  // @@protoc_insertion_point(field_add:fedtree.NodeEncArray.n_instances)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeEncArray::_internal_n_instances() const {
  return _impl_.n_instances_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeEncArray::n_instances() const {
  // @@protoc_insertion_point(field_list:fedtree.NodeEncArray.n_instances)
  return _internal_n_instances();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeEncArray::_internal_mutable_n_instances() {
  return &_impl_.n_instances_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeEncArray::mutable_n_instances() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.NodeEncArray.n_instances)
  return _internal_mutable_n_instances();
}

// -------------------------------------------------------------------

// NodeArray

// repeated int32 final_id = 1 [packed = true];
inline int NodeArray::_internal_final_id_size() const {
  return _impl_.final_id_.size();
}
inline int NodeArray::final_id_size() const {
  return _internal_final_id_size();
}
inline void NodeArray::clear_final_id() {
  _impl_.final_id_.Clear();
}
inline int32_t NodeArray::_internal_final_id(int index) const {
  return _impl_.final_id_.Get(index);
}
inline int32_t NodeArray::final_id(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.NodeArray.final_id)
  return _internal_final_id(index);
}
inline void NodeArray::set_final_id(int index, int32_t value) {
  _impl_.final_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.NodeArray.final_id)
}
inline void NodeArray::_internal_add_final_id(int32_t value) {
  _impl_.final_id_.Add(value);
}
inline void NodeArray::add_final_id(int32_t value) {
  _internal_add_final_id(value);
  // @@protoc_insertion_point(field_add:fedtree.NodeArray.final_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeArray::_internal_final_id() const {
  return _impl_.final_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeArray::final_id() const {
  // @@protoc_insertion_point(field_list:fedtree.NodeArray.final_id)
  return _internal_final_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeArray::_internal_mutable_final_id() {
  return &_impl_.final_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeArray::mutable_final_id() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.NodeArray.final_id)
  return _internal_mutable_final_id();
}

// repeated int32 lch_index = 2 [packed = true];
inline int NodeArray::_internal_lch_index_size() const {
  return _impl_.lch_index_.size();
}
inline int NodeArray::lch_index_size() const {
  return _internal_lch_index_size();
}
inline void NodeArray::clear_lch_index() {
  _impl_.lch_index_.Clear();
}
inline int32_t NodeArray::_internal_lch_index(int index) const {
  return _impl_.lch_index_.Get(index);
}
inline int32_t NodeArray::lch_index(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.NodeArray.lch_index)
  return _internal_lch_index(index);
}
inline void NodeArray::set_lch_index(int index, int32_t value) {
  _impl_.lch_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.NodeArray.lch_index)
}
inline void NodeArray::_internal_add_lch_index(int32_t value) {
  _impl_.lch_index_.Add(value);
}
inline void NodeArray::add_lch_index(int32_t value) {
  _internal_add_lch_index(value);
  // @@protoc_insertion_point(field_add:fedtree.NodeArray.lch_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeArray::_internal_lch_index() const {
  return _impl_.lch_index_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeArray::lch_index() const {
  // @@protoc_insertion_point(field_list:fedtree.NodeArray.lch_index)
  return _internal_lch_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeArray::_internal_mutable_lch_index() {
  return &_impl_.lch_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeArray::mutable_lch_index() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.NodeArray.lch_index)
  return _internal_mutable_lch_index();
}

// repeated int32 rch_index = 3 [packed = true];
inline int NodeArray::_internal_rch_index_size() const {
  return _impl_.rch_index_.size();
}
inline int NodeArray::rch_index_size() const {
  return _internal_rch_index_size();
}
inline void NodeArray::clear_rch_index() {
  _impl_.rch_index_.Clear();
}
inline int32_t NodeArray::_internal_rch_index(int index) const {
  return _impl_.rch_index_.Get(index);
}
inline int32_t NodeArray::rch_index(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.NodeArray.rch_index)
  return _internal_rch_index(index);
}
inline void NodeArray::set_rch_index(int index, int32_t value) {
  _impl_.rch_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.NodeArray.rch_index)
}
inline void NodeArray::_internal_add_rch_index(int32_t value) {
  _impl_.rch_index_.Add(value);
}
inline void NodeArray::add_rch_index(int32_t value) {
  _internal_add_rch_index(value);
  // @@protoc_insertion_point(field_add:fedtree.NodeArray.rch_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeArray::_internal_rch_index() const {
  return _impl_.rch_index_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeArray::rch_index() const {
  // @@protoc_insertion_point(field_list:fedtree.NodeArray.rch_index)
  return _internal_rch_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeArray::_internal_mutable_rch_index() {
  return &_impl_.rch_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeArray::mutable_rch_index() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.NodeArray.rch_index)
  return _internal_mutable_rch_index();
}

// repeated int32 parent_index = 4 [packed = true];
inline int NodeArray::_internal_parent_index_size() const {
  return _impl_.parent_index_.size();
}
inline int NodeArray::parent_index_size() const {
  return _internal_parent_index_size();
}
inline void NodeArray::clear_parent_index() {
  _impl_.parent_index_.Clear();
}
inline int32_t NodeArray::_internal_parent_index(int index) const {
  return _impl_.parent_index_.Get(index);
}
inline int32_t NodeArray::parent_index(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.NodeArray.parent_index)
  return _internal_parent_index(index);
}
inline void NodeArray::set_parent_index(int index, int32_t value) {
  _impl_.parent_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.NodeArray.parent_index)
}
inline void NodeArray::_internal_add_parent_index(int32_t value) {
  _impl_.parent_index_.Add(value);
}
inline void NodeArray::add_parent_index(int32_t value) {
  _internal_add_parent_index(value);
  // @@protoc_insertion_point(field_add:fedtree.NodeArray.parent_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeArray::_internal_parent_index() const {
  return _impl_.parent_index_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeArray::parent_index() const {
  // @@protoc_insertion_point(field_list:fedtree.NodeArray.parent_index)
  return _internal_parent_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeArray::_internal_mutable_parent_index() {
  return &_impl_.parent_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeArray::mutable_parent_index() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.NodeArray.parent_index)
  return _internal_mutable_parent_index();
}

// repeated float gain = 5 [packed = true];
inline int NodeArray::_internal_gain_size() const {
  return _impl_.gain_.size();
}
inline int NodeArray::gain_size() const {
  return _internal_gain_size();
}
inline void NodeArray::clear_gain() {
  _impl_.gain_.Clear();
}
inline float NodeArray::_internal_gain(int index) const {
  return _impl_.gain_.Get(index);
}
inline float NodeArray::gain(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.NodeArray.gain)
  return _internal_gain(index);
}
inline void NodeArray::set_gain(int index, float value) {
  _impl_.gain_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.NodeArray.gain)
}
inline void NodeArray::_internal_add_gain(float value) {
  _impl_.gain_.Add(value);
}
inline void NodeArray::add_gain(float value) {
  _internal_add_gain(value);
  // @@protoc_insertion_point(field_add:fedtree.NodeArray.gain)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
NodeArray::_internal_gain() const {
  return _impl_.gain_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
NodeArray::gain() const {
  // @@protoc_insertion_point(field_list:fedtree.NodeArray.gain)
  return _internal_gain();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
NodeArray::_internal_mutable_gain() {
  return &_impl_.gain_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
NodeArray::mutable_gain() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.NodeArray.gain)
  return _internal_mutable_gain();
}

// repeated float base_weight = 6 [packed = true];
inline int NodeArray::_internal_base_weight_size() const {
  return _impl_.base_weight_.size();
}
inline int NodeArray::base_weight_size() const {
  return _internal_base_weight_size();
}
inline void NodeArray::clear_base_weight() {
  _impl_.base_weight_.Clear();
}
inline float NodeArray::_internal_base_weight(int index) const {
  return _impl_.base_weight_.Get(index);
}
inline float NodeArray::base_weight(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.NodeArray.base_weight)
  return _internal_base_weight(index);
}
inline void NodeArray::set_base_weight(int index, float value) {
  _impl_.base_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.NodeArray.base_weight)
}
inline void NodeArray::_internal_add_base_weight(float value) {
  _impl_.base_weight_.Add(value);
}
inline void NodeArray::add_base_weight(float value) {
  _internal_add_base_weight(value);
  // @@protoc_insertion_point(field_add:fedtree.NodeArray.base_weight)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
NodeArray::_internal_base_weight() const {
  return _impl_.base_weight_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
NodeArray::base_weight() const {
  // @@protoc_insertion_point(field_list:fedtree.NodeArray.base_weight)
  return _internal_base_weight();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
NodeArray::_internal_mutable_base_weight() {
  return &_impl_.base_weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
NodeArray::mutable_base_weight() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.NodeArray.base_weight)
  return _internal_mutable_base_weight();
}

// repeated int32 split_feature_id = 7 [packed = true];
inline int NodeArray::_internal_split_feature_id_size() const {
  return _impl_.split_feature_id_.size();
}
inline int NodeArray::split_feature_id_size() const {
  return _internal_split_feature_id_size();
}
inline void NodeArray::clear_split_feature_id() {
  _impl_.split_feature_id_.Clear();
}
inline int32_t NodeArray::_internal_split_feature_id(int index) const {
  return _impl_.split_feature_id_.Get(index);
}
inline int32_t NodeArray::split_feature_id(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.NodeArray.split_feature_id)
  return _internal_split_feature_id(index);
}
inline void NodeArray::set_split_feature_id(int index, int32_t value) {
  _impl_.split_feature_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.NodeArray.split_feature_id)
}
inline void NodeArray::_internal_add_split_feature_id(int32_t value) {
  _impl_.split_feature_id_.Add(value);
}
inline void NodeArray::add_split_feature_id(int32_t value) {
  _internal_add_split_feature_id(value);
  // @@protoc_insertion_point(field_add:fedtree.NodeArray.split_feature_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeArray::_internal_split_feature_id() const {
  return _impl_.split_feature_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeArray::split_feature_id() const {
  // @@protoc_insertion_point(field_list:fedtree.NodeArray.split_feature_id)
  return _internal_split_feature_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeArray::_internal_mutable_split_feature_id() {
  return &_impl_.split_feature_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeArray::mutable_split_feature_id() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.NodeArray.split_feature_id)
  return _internal_mutable_split_feature_id();
}

// repeated int32 pid = 8 [packed = true];
inline int NodeArray::_internal_pid_size() const {
  return _impl_.pid_.size();
}
inline int NodeArray::pid_size() const {
  return _internal_pid_size();
}
inline void NodeArray::clear_pid() {
  _impl_.pid_.Clear();
}
inline int32_t NodeArray::_internal_pid(int index) const {
  return _impl_.pid_.Get(index);
}
inline int32_t NodeArray::pid(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.NodeArray.pid)
  return _internal_pid(index);
}
inline void NodeArray::set_pid(int index, int32_t value) {
  _impl_.pid_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.NodeArray.pid)
}
inline void NodeArray::_internal_add_pid(int32_t value) {
  _impl_.pid_.Add(value);
}
inline void NodeArray::add_pid(int32_t value) {
  _internal_add_pid(value);
  // @@protoc_insertion_point(field_add:fedtree.NodeArray.pid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeArray::_internal_pid() const {
  return _impl_.pid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeArray::pid() const {
  // @@protoc_insertion_point(field_list:fedtree.NodeArray.pid)
  return _internal_pid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeArray::_internal_mutable_pid() {
  return &_impl_.pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeArray::mutable_pid() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.NodeArray.pid)
  return _internal_mutable_pid();
}

// repeated float split_value = 9 [packed = true];
inline int NodeArray::_internal_split_value_size() const {
  return _impl_.split_value_.size();
}
inline int NodeArray::split_value_size() const {
  return _internal_split_value_size();
}
inline void NodeArray::clear_split_value() {
  _impl_.split_value_.Clear();
}
inline float NodeArray::_internal_split_value(int index) const {
  return _impl_.split_value_.Get(index);
}
inline float NodeArray::split_value(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.NodeArray.split_value)
  return _internal_split_value(index);
}
inline void NodeArray::set_split_value(int index, float value) {
  _impl_.split_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.NodeArray.split_value)
}
inline void NodeArray::_internal_add_split_value(float value) {
  _impl_.split_value_.Add(value);
}
inline void NodeArray::add_split_value(float value) {
  _internal_add_split_value(value);
  // @@protoc_insertion_point(field_add:fedtree.NodeArray.split_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
NodeArray::_internal_split_value() const {
  return _impl_.split_value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
NodeArray::split_value() const {
  // @@protoc_insertion_point(field_list:fedtree.NodeArray.split_value)
  return _internal_split_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
NodeArray::_internal_mutable_split_value() {
  return &_impl_.split_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
NodeArray::mutable_split_value() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.NodeArray.split_value)
  return _internal_mutable_split_value();
}

// repeated int32 split_bid = 10 [packed = true];
inline int NodeArray::_internal_split_bid_size() const {
  return _impl_.split_bid_.size();
}
inline int NodeArray::split_bid_size() const {
  return _internal_split_bid_size();
}
inline void NodeArray::clear_split_bid() {
  _impl_.split_bid_.Clear();
}
inline int32_t NodeArray::_internal_split_bid(int index) const {
  return _impl_.split_bid_.Get(index);
}
inline int32_t NodeArray::split_bid(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.NodeArray.split_bid)
  return _internal_split_bid(index);
}
inline void NodeArray::set_split_bid(int index, int32_t value) {
  _impl_.split_bid_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.NodeArray.split_bid)
}
inline void NodeArray::_internal_add_split_bid(int32_t value) {
  _impl_.split_bid_.Add(value);
}
inline void NodeArray::add_split_bid(int32_t value) {
  _internal_add_split_bid(value);
  // @@protoc_insertion_point(field_add:fedtree.NodeArray.split_bid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeArray::_internal_split_bid() const {
  return _impl_.split_bid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeArray::split_bid() const {
  // @@protoc_insertion_point(field_list:fedtree.NodeArray.split_bid)
  return _internal_split_bid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeArray::_internal_mutable_split_bid() {
  return &_impl_.split_bid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeArray::mutable_split_bid() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.NodeArray.split_bid)
  return _internal_mutable_split_bid();
}

// repeated bool default_right = 11 [packed = true];
inline int NodeArray::_internal_default_right_size() const {
  return _impl_.default_right_.size();
}
inline int NodeArray::default_right_size() const {
  return _internal_default_right_size();
}
inline void NodeArray::clear_default_right() {
  _impl_.default_right_.Clear();
}
inline bool NodeArray::_internal_default_right(int index) const {
  return _impl_.default_right_.Get(index);
}
inline bool NodeArray::default_right(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.NodeArray.default_right)
  return _internal_default_right(index);
}
inline void NodeArray::set_default_right(int index, bool value) {
  _impl_.default_right_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.NodeArray.default_right)
}
inline void NodeArray::_internal_add_default_right(bool value) {
  _impl_.default_right_.Add(value);
}
inline void NodeArray::add_default_right(bool value) {
  _internal_add_default_right(value);
  // @@protoc_insertion_point(field_add:fedtree.NodeArray.default_right)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
NodeArray::_internal_default_right() const {
  return _impl_.default_right_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
NodeArray::default_right() const {
  // @@protoc_insertion_point(field_list:fedtree.NodeArray.default_right)
  return _internal_default_right();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
NodeArray::_internal_mutable_default_right() {
  return &_impl_.default_right_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
NodeArray::mutable_default_right() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.NodeArray.default_right)
  return _internal_mutable_default_right();
}

// repeated bool is_leaf = 12 [packed = true];
inline int NodeArray::_internal_is_leaf_size() const {
  return _impl_.is_leaf_.size();
}
inline int NodeArray::is_leaf_size() const {
  return _internal_is_leaf_size();
}
inline void NodeArray::clear_is_leaf() {
  _impl_.is_leaf_.Clear();
}
inline bool NodeArray::_internal_is_leaf(int index) const {
  return _impl_.is_leaf_.Get(index);
}
inline bool NodeArray::is_leaf(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.NodeArray.is_leaf)
  return _internal_is_leaf(index);
}
inline void NodeArray::set_is_leaf(int index, bool value) {
  _impl_.is_leaf_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.NodeArray.is_leaf)
}
inline void NodeArray::_internal_add_is_leaf(bool value) {
  _impl_.is_leaf_.Add(value);
}
inline void NodeArray::add_is_leaf(bool value) {
  _internal_add_is_leaf(value);
  // @@protoc_insertion_point(field_add:fedtree.NodeArray.is_leaf)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
NodeArray::_internal_is_leaf() const {
  return _impl_.is_leaf_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
NodeArray::is_leaf() const {
  // @@protoc_insertion_point(field_list:fedtree.NodeArray.is_leaf)
  return _internal_is_leaf();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
NodeArray::_internal_mutable_is_leaf() {
  return &_impl_.is_leaf_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
NodeArray::mutable_is_leaf() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.NodeArray.is_leaf)
  return _internal_mutable_is_leaf();
}

// repeated bool is_valid = 13 [packed = true];
inline int NodeArray::_internal_is_valid_size() const {
  return _impl_.is_valid_.size();
}
inline int NodeArray::is_valid_size() const {
  return _internal_is_valid_size();
}
inline void NodeArray::clear_is_valid() {
  _impl_.is_valid_.Clear();
}
inline bool NodeArray::_internal_is_valid(int index) const {
  return _impl_.is_valid_.Get(index);
}
inline bool NodeArray::is_valid(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.NodeArray.is_valid)
  return _internal_is_valid(index);
}
inline void NodeArray::set_is_valid(int index, bool value) {
  _impl_.is_valid_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.NodeArray.is_valid)
}
inline void NodeArray::_internal_add_is_valid(bool value) {
  _impl_.is_valid_.Add(value);
}
inline void NodeArray::add_is_valid(bool value) {
  _internal_add_is_valid(value);
  // @@protoc_insertion_point(field_add:fedtree.NodeArray.is_valid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
NodeArray::_internal_is_valid() const {
  return _impl_.is_valid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
NodeArray::is_valid() const {
  // @@protoc_insertion_point(field_list:fedtree.NodeArray.is_valid)
  return _internal_is_valid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
NodeArray::_internal_mutable_is_valid() {
  return &_impl_.is_valid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
NodeArray::mutable_is_valid() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.NodeArray.is_valid)
  return _internal_mutable_is_valid();
}

// repeated bool is_pruned = 14 [packed = true];
inline int NodeArray::_internal_is_pruned_size() const {
  return _impl_.is_pruned_.size();
}
inline int NodeArray::is_pruned_size() const {
  return _internal_is_pruned_size();
}
inline void NodeArray::clear_is_pruned() {
  _impl_.is_pruned_.Clear();
}
inline bool NodeArray::_internal_is_pruned(int index) const {
  return _impl_.is_pruned_.Get(index);
}
inline bool NodeArray::is_pruned(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.NodeArray.is_pruned)
  return _internal_is_pruned(index);
}
inline void NodeArray::set_is_pruned(int index, bool value) {
  _impl_.is_pruned_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.NodeArray.is_pruned)
}
inline void NodeArray::_internal_add_is_pruned(bool value) {
  _impl_.is_pruned_.Add(value);
}
inline void NodeArray::add_is_pruned(bool value) {
  _internal_add_is_pruned(value);
  // @@protoc_insertion_point(field_add:fedtree.NodeArray.is_pruned)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
NodeArray::_internal_is_pruned() const {
  return _impl_.is_pruned_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
NodeArray::is_pruned() const {
  // @@protoc_insertion_point(field_list:fedtree.NodeArray.is_pruned)
  return _internal_is_pruned();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
NodeArray::_internal_mutable_is_pruned() {
  return &_impl_.is_pruned_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
NodeArray::mutable_is_pruned() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.NodeArray.is_pruned)
  return _internal_mutable_is_pruned();
}

// repeated float sum_gh_pair_g = 15 [packed = true];
inline int NodeArray::_internal_sum_gh_pair_g_size() const {
  return _impl_.sum_gh_pair_g_.size();
}
inline int NodeArray::sum_gh_pair_g_size() const {
  return _internal_sum_gh_pair_g_size();
}
inline void NodeArray::clear_sum_gh_pair_g() {
  _impl_.sum_gh_pair_g_.Clear();
}
inline float NodeArray::_internal_sum_gh_pair_g(int index) const {
  return _impl_.sum_gh_pair_g_.Get(index);
}
inline float NodeArray::sum_gh_pair_g(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.NodeArray.sum_gh_pair_g)
  return _internal_sum_gh_pair_g(index);
}
inline void NodeArray::set_sum_gh_pair_g(int index, float value) {
  _impl_.sum_gh_pair_g_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.NodeArray.sum_gh_pair_g)
}
inline void NodeArray::_internal_add_sum_gh_pair_g(float value) {
  _impl_.sum_gh_pair_g_.Add(value);
}
inline void NodeArray::add_sum_gh_pair_g(float value) {
  _internal_add_sum_gh_pair_g(value);
  // @@protoc_insertion_point(field_add:fedtree.NodeArray.sum_gh_pair_g)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
NodeArray::_internal_sum_gh_pair_g() const {
  return _impl_.sum_gh_pair_g_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
NodeArray::sum_gh_pair_g() const {
  // @@protoc_insertion_point(field_list:fedtree.NodeArray.sum_gh_pair_g)
  return _internal_sum_gh_pair_g();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
NodeArray::_internal_mutable_sum_gh_pair_g() {
  return &_impl_.sum_gh_pair_g_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
NodeArray::mutable_sum_gh_pair_g() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.NodeArray.sum_gh_pair_g)
  return _internal_mutable_sum_gh_pair_g();
}

// repeated float sum_gh_pair_h = 16 [packed = true];
inline int NodeArray::_internal_sum_gh_pair_h_size() const {
  return _impl_.sum_gh_pair_h_.size();
}
inline int NodeArray::sum_gh_pair_h_size() const {
  return _internal_sum_gh_pair_h_size();
}
inline void NodeArray::clear_sum_gh_pair_h() {
  _impl_.sum_gh_pair_h_.Clear();
}
inline float NodeArray::_internal_sum_gh_pair_h(int index) const {
  return _impl_.sum_gh_pair_h_.Get(index);
}
inline float NodeArray::sum_gh_pair_h(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.NodeArray.sum_gh_pair_h)
  return _internal_sum_gh_pair_h(index);
}
inline void NodeArray::set_sum_gh_pair_h(int index, float value) {
  _impl_.sum_gh_pair_h_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.NodeArray.sum_gh_pair_h)
}
inline void NodeArray::_internal_add_sum_gh_pair_h(float value) {
  _impl_.sum_gh_pair_h_.Add(value);
}
inline void NodeArray::add_sum_gh_pair_h(float value) {
  _internal_add_sum_gh_pair_h(value);
  // @@protoc_insertion_point(field_add:fedtree.NodeArray.sum_gh_pair_h)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
NodeArray::_internal_sum_gh_pair_h() const {
  return _impl_.sum_gh_pair_h_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
NodeArray::sum_gh_pair_h() const {
  // @@protoc_insertion_point(field_list:fedtree.NodeArray.sum_gh_pair_h)
  return _internal_sum_gh_pair_h();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
NodeArray::_internal_mutable_sum_gh_pair_h() {
  return &_impl_.sum_gh_pair_h_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
NodeArray::mutable_sum_gh_pair_h() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.NodeArray.sum_gh_pair_h)
  return _internal_mutable_sum_gh_pair_h();
}

// repeated int32 n_instances = 17 [packed = true];
inline int NodeArray::_internal_n_instances_size() const {
  return _impl_.n_instances_.size();
}
inline int NodeArray::n_instances_size() const {
  return _internal_n_instances_size();
}
inline void NodeArray::clear_n_instances() {
  _impl_.n_instances_.Clear();
}
inline int32_t NodeArray::_internal_n_instances(int index) const {
  return _impl_.n_instances_.Get(index);
}
inline int32_t NodeArray::n_instances(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.NodeArray.n_instances)
  return _internal_n_instances(index);
}
inline void NodeArray::set_n_instances(int index, int32_t value) {
  _impl_.n_instances_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.NodeArray.n_instances)
}
inline void NodeArray::_internal_add_n_instances(int32_t value) {
  _impl_.n_instances_.Add(value);
}
inline void NodeArray::add_n_instances(int32_t value) {
  _internal_add_n_instances(value);
  // @@protoc_insertion_point(field_add:fedtree.NodeArray.n_instances)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeArray::_internal_n_instances() const {
  return _impl_.n_instances_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeArray::n_instances() const {
  // @@protoc_insertion_point(field_list:fedtree.NodeArray.n_instances)
  return _internal_n_instances();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeArray::_internal_mutable_n_instances() {
  return &_impl_.n_instances_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeArray::mutable_n_instances() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.NodeArray.n_instances)
  return _internal_mutable_n_instances();
}

// -------------------------------------------------------------------

// Ins2NodeID

// int32 iid = 1;
inline void Ins2NodeID::clear_iid() {
  _impl_.iid_ = 0;
}
inline int32_t Ins2NodeID::_internal_iid() const {
  return _impl_.iid_;
}
inline int32_t Ins2NodeID::iid() const {
  // @@protoc_insertion_point(field_get:fedtree.Ins2NodeID.iid)
  return _internal_iid();
}
inline void Ins2NodeID::_internal_set_iid(int32_t value) {
  
  _impl_.iid_ = value;
}
inline void Ins2NodeID::set_iid(int32_t value) {
  _internal_set_iid(value);
  // @@protoc_insertion_point(field_set:fedtree.Ins2NodeID.iid)
}

// int32 nid = 2;
inline void Ins2NodeID::clear_nid() {
  _impl_.nid_ = 0;
}
inline int32_t Ins2NodeID::_internal_nid() const {
  return _impl_.nid_;
}
inline int32_t Ins2NodeID::nid() const {
  // @@protoc_insertion_point(field_get:fedtree.Ins2NodeID.nid)
  return _internal_nid();
}
inline void Ins2NodeID::_internal_set_nid(int32_t value) {
  
  _impl_.nid_ = value;
}
inline void Ins2NodeID::set_nid(int32_t value) {
  _internal_set_nid(value);
  // @@protoc_insertion_point(field_set:fedtree.Ins2NodeID.nid)
}

// -------------------------------------------------------------------

// Ins2NodeIDBatch

// repeated int32 iid = 1 [packed = true];
inline int Ins2NodeIDBatch::_internal_iid_size() const {
  return _impl_.iid_.size();
}
inline int Ins2NodeIDBatch::iid_size() const {
  return _internal_iid_size();
}
inline void Ins2NodeIDBatch::clear_iid() {
  _impl_.iid_.Clear();
}
inline int32_t Ins2NodeIDBatch::_internal_iid(int index) const {
  return _impl_.iid_.Get(index);
}
inline int32_t Ins2NodeIDBatch::iid(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.Ins2NodeIDBatch.iid)
  return _internal_iid(index);
}
inline void Ins2NodeIDBatch::set_iid(int index, int32_t value) {
  _impl_.iid_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.Ins2NodeIDBatch.iid)
}
inline void Ins2NodeIDBatch::_internal_add_iid(int32_t value) {
  _impl_.iid_.Add(value);
}
inline void Ins2NodeIDBatch::add_iid(int32_t value) {
  _internal_add_iid(value);
  // @@protoc_insertion_point(field_add:fedtree.Ins2NodeIDBatch.iid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Ins2NodeIDBatch::_internal_iid() const {
  return _impl_.iid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Ins2NodeIDBatch::iid() const {
  // @@protoc_insertion_point(field_list:fedtree.Ins2NodeIDBatch.iid)
  return _internal_iid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Ins2NodeIDBatch::_internal_mutable_iid() {
  return &_impl_.iid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Ins2NodeIDBatch::mutable_iid() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.Ins2NodeIDBatch.iid)
  return _internal_mutable_iid();
}

// repeated int32 nid = 2 [packed = true];
inline int Ins2NodeIDBatch::_internal_nid_size() const {
  return _impl_.nid_.size();
}
inline int Ins2NodeIDBatch::nid_size() const {
  return _internal_nid_size();
}
inline void Ins2NodeIDBatch::clear_nid() {
  _impl_.nid_.Clear();
}
inline int32_t Ins2NodeIDBatch::_internal_nid(int index) const {
  return _impl_.nid_.Get(index);
}
inline int32_t Ins2NodeIDBatch::nid(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.Ins2NodeIDBatch.nid)
  return _internal_nid(index);
}
inline void Ins2NodeIDBatch::set_nid(int index, int32_t value) {
  _impl_.nid_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.Ins2NodeIDBatch.nid)
}
inline void Ins2NodeIDBatch::_internal_add_nid(int32_t value) {
  _impl_.nid_.Add(value);
}
inline void Ins2NodeIDBatch::add_nid(int32_t value) {
  _internal_add_nid(value);
  // @@protoc_insertion_point(field_add:fedtree.Ins2NodeIDBatch.nid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Ins2NodeIDBatch::_internal_nid() const {
  return _impl_.nid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Ins2NodeIDBatch::nid() const {
  // @@protoc_insertion_point(field_list:fedtree.Ins2NodeIDBatch.nid)
  return _internal_nid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Ins2NodeIDBatch::_internal_mutable_nid() {
  return &_impl_.nid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Ins2NodeIDBatch::mutable_nid() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.Ins2NodeIDBatch.nid)
  return _internal_mutable_nid();
}

// -------------------------------------------------------------------

// DHPublicKey

// string pk = 1;
inline void DHPublicKey::clear_pk() {
  _impl_.pk_.ClearToEmpty();
}
inline const std::string& DHPublicKey::pk() const {
  // @@protoc_insertion_point(field_get:fedtree.DHPublicKey.pk)
  return _internal_pk();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DHPublicKey::set_pk(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pk_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fedtree.DHPublicKey.pk)
}
inline std::string* DHPublicKey::mutable_pk() {
  std::string* _s = _internal_mutable_pk();
  // @@protoc_insertion_point(field_mutable:fedtree.DHPublicKey.pk)
  return _s;
}
inline const std::string& DHPublicKey::_internal_pk() const {
  return _impl_.pk_.Get();
}
inline void DHPublicKey::_internal_set_pk(const std::string& value) {
  
  _impl_.pk_.Set(value, GetArenaForAllocation());
}
inline std::string* DHPublicKey::_internal_mutable_pk() {
  
  return _impl_.pk_.Mutable(GetArenaForAllocation());
}
inline std::string* DHPublicKey::release_pk() {
  // @@protoc_insertion_point(field_release:fedtree.DHPublicKey.pk)
  return _impl_.pk_.Release();
}
inline void DHPublicKey::set_allocated_pk(std::string* pk) {
  if (pk != nullptr) {
    
  } else {
    
  }
  _impl_.pk_.SetAllocated(pk, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pk_.IsDefault()) {
    _impl_.pk_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fedtree.DHPublicKey.pk)
}

// -------------------------------------------------------------------

// DHPublicKeys

// repeated string pk = 1;
inline int DHPublicKeys::_internal_pk_size() const {
  return _impl_.pk_.size();
}
inline int DHPublicKeys::pk_size() const {
  return _internal_pk_size();
}
inline void DHPublicKeys::clear_pk() {
  _impl_.pk_.Clear();
}
inline std::string* DHPublicKeys::add_pk() {
  std::string* _s = _internal_add_pk();
  // @@protoc_insertion_point(field_add_mutable:fedtree.DHPublicKeys.pk)
  return _s;
}
inline const std::string& DHPublicKeys::_internal_pk(int index) const {
  return _impl_.pk_.Get(index);
}
inline const std::string& DHPublicKeys::pk(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.DHPublicKeys.pk)
  return _internal_pk(index);
}
inline std::string* DHPublicKeys::mutable_pk(int index) {
  // @@protoc_insertion_point(field_mutable:fedtree.DHPublicKeys.pk)
  return _impl_.pk_.Mutable(index);
}
inline void DHPublicKeys::set_pk(int index, const std::string& value) {
  _impl_.pk_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:fedtree.DHPublicKeys.pk)
}
inline void DHPublicKeys::set_pk(int index, std::string&& value) {
  _impl_.pk_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:fedtree.DHPublicKeys.pk)
}
inline void DHPublicKeys::set_pk(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.pk_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fedtree.DHPublicKeys.pk)
}
inline void DHPublicKeys::set_pk(int index, const char* value, size_t size) {
  _impl_.pk_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fedtree.DHPublicKeys.pk)
}
inline std::string* DHPublicKeys::_internal_add_pk() {
  return _impl_.pk_.Add();
}
inline void DHPublicKeys::add_pk(const std::string& value) {
  _impl_.pk_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fedtree.DHPublicKeys.pk)
}
inline void DHPublicKeys::add_pk(std::string&& value) {
  _impl_.pk_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:fedtree.DHPublicKeys.pk)
}
inline void DHPublicKeys::add_pk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.pk_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fedtree.DHPublicKeys.pk)
}
inline void DHPublicKeys::add_pk(const char* value, size_t size) {
  _impl_.pk_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fedtree.DHPublicKeys.pk)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DHPublicKeys::pk() const {
  // @@protoc_insertion_point(field_list:fedtree.DHPublicKeys.pk)
  return _impl_.pk_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DHPublicKeys::mutable_pk() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.DHPublicKeys.pk)
  return &_impl_.pk_;
}

// -------------------------------------------------------------------

// SANoise

// string noise = 1;
inline void SANoise::clear_noise() {
  _impl_.noise_.ClearToEmpty();
}
inline const std::string& SANoise::noise() const {
  // @@protoc_insertion_point(field_get:fedtree.SANoise.noise)
  return _internal_noise();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SANoise::set_noise(ArgT0&& arg0, ArgT... args) {
 
 _impl_.noise_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fedtree.SANoise.noise)
}
inline std::string* SANoise::mutable_noise() {
  std::string* _s = _internal_mutable_noise();
  // @@protoc_insertion_point(field_mutable:fedtree.SANoise.noise)
  return _s;
}
inline const std::string& SANoise::_internal_noise() const {
  return _impl_.noise_.Get();
}
inline void SANoise::_internal_set_noise(const std::string& value) {
  
  _impl_.noise_.Set(value, GetArenaForAllocation());
}
inline std::string* SANoise::_internal_mutable_noise() {
  
  return _impl_.noise_.Mutable(GetArenaForAllocation());
}
inline std::string* SANoise::release_noise() {
  // @@protoc_insertion_point(field_release:fedtree.SANoise.noise)
  return _impl_.noise_.Release();
}
inline void SANoise::set_allocated_noise(std::string* noise) {
  if (noise != nullptr) {
    
  } else {
    
  }
  _impl_.noise_.SetAllocated(noise, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.noise_.IsDefault()) {
    _impl_.noise_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fedtree.SANoise.noise)
}

// -------------------------------------------------------------------

// SANoises

// repeated string noises = 1;
inline int SANoises::_internal_noises_size() const {
  return _impl_.noises_.size();
}
inline int SANoises::noises_size() const {
  return _internal_noises_size();
}
inline void SANoises::clear_noises() {
  _impl_.noises_.Clear();
}
inline std::string* SANoises::add_noises() {
  std::string* _s = _internal_add_noises();
  // @@protoc_insertion_point(field_add_mutable:fedtree.SANoises.noises)
  return _s;
}
inline const std::string& SANoises::_internal_noises(int index) const {
  return _impl_.noises_.Get(index);
}
inline const std::string& SANoises::noises(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.SANoises.noises)
  return _internal_noises(index);
}
inline std::string* SANoises::mutable_noises(int index) {
  // @@protoc_insertion_point(field_mutable:fedtree.SANoises.noises)
  return _impl_.noises_.Mutable(index);
}
inline void SANoises::set_noises(int index, const std::string& value) {
  _impl_.noises_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:fedtree.SANoises.noises)
}
inline void SANoises::set_noises(int index, std::string&& value) {
  _impl_.noises_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:fedtree.SANoises.noises)
}
inline void SANoises::set_noises(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.noises_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fedtree.SANoises.noises)
}
inline void SANoises::set_noises(int index, const char* value, size_t size) {
  _impl_.noises_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fedtree.SANoises.noises)
}
inline std::string* SANoises::_internal_add_noises() {
  return _impl_.noises_.Add();
}
inline void SANoises::add_noises(const std::string& value) {
  _impl_.noises_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fedtree.SANoises.noises)
}
inline void SANoises::add_noises(std::string&& value) {
  _impl_.noises_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:fedtree.SANoises.noises)
}
inline void SANoises::add_noises(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.noises_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fedtree.SANoises.noises)
}
inline void SANoises::add_noises(const char* value, size_t size) {
  _impl_.noises_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fedtree.SANoises.noises)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SANoises::noises() const {
  // @@protoc_insertion_point(field_list:fedtree.SANoises.noises)
  return _impl_.noises_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SANoises::mutable_noises() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.SANoises.noises)
  return &_impl_.noises_;
}

// -------------------------------------------------------------------

// CutPoints

// repeated double cut_points_val = 1 [packed = true];
inline int CutPoints::_internal_cut_points_val_size() const {
  return _impl_.cut_points_val_.size();
}
inline int CutPoints::cut_points_val_size() const {
  return _internal_cut_points_val_size();
}
inline void CutPoints::clear_cut_points_val() {
  _impl_.cut_points_val_.Clear();
}
inline double CutPoints::_internal_cut_points_val(int index) const {
  return _impl_.cut_points_val_.Get(index);
}
inline double CutPoints::cut_points_val(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.CutPoints.cut_points_val)
  return _internal_cut_points_val(index);
}
inline void CutPoints::set_cut_points_val(int index, double value) {
  _impl_.cut_points_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.CutPoints.cut_points_val)
}
inline void CutPoints::_internal_add_cut_points_val(double value) {
  _impl_.cut_points_val_.Add(value);
}
inline void CutPoints::add_cut_points_val(double value) {
  _internal_add_cut_points_val(value);
  // @@protoc_insertion_point(field_add:fedtree.CutPoints.cut_points_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CutPoints::_internal_cut_points_val() const {
  return _impl_.cut_points_val_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CutPoints::cut_points_val() const {
  // @@protoc_insertion_point(field_list:fedtree.CutPoints.cut_points_val)
  return _internal_cut_points_val();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CutPoints::_internal_mutable_cut_points_val() {
  return &_impl_.cut_points_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CutPoints::mutable_cut_points_val() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.CutPoints.cut_points_val)
  return _internal_mutable_cut_points_val();
}

// repeated int32 cut_col_ptr = 2 [packed = true];
inline int CutPoints::_internal_cut_col_ptr_size() const {
  return _impl_.cut_col_ptr_.size();
}
inline int CutPoints::cut_col_ptr_size() const {
  return _internal_cut_col_ptr_size();
}
inline void CutPoints::clear_cut_col_ptr() {
  _impl_.cut_col_ptr_.Clear();
}
inline int32_t CutPoints::_internal_cut_col_ptr(int index) const {
  return _impl_.cut_col_ptr_.Get(index);
}
inline int32_t CutPoints::cut_col_ptr(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.CutPoints.cut_col_ptr)
  return _internal_cut_col_ptr(index);
}
inline void CutPoints::set_cut_col_ptr(int index, int32_t value) {
  _impl_.cut_col_ptr_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.CutPoints.cut_col_ptr)
}
inline void CutPoints::_internal_add_cut_col_ptr(int32_t value) {
  _impl_.cut_col_ptr_.Add(value);
}
inline void CutPoints::add_cut_col_ptr(int32_t value) {
  _internal_add_cut_col_ptr(value);
  // @@protoc_insertion_point(field_add:fedtree.CutPoints.cut_col_ptr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CutPoints::_internal_cut_col_ptr() const {
  return _impl_.cut_col_ptr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CutPoints::cut_col_ptr() const {
  // @@protoc_insertion_point(field_list:fedtree.CutPoints.cut_col_ptr)
  return _internal_cut_col_ptr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CutPoints::_internal_mutable_cut_col_ptr() {
  return &_impl_.cut_col_ptr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CutPoints::mutable_cut_col_ptr() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.CutPoints.cut_col_ptr)
  return _internal_mutable_cut_col_ptr();
}

// repeated int32 cut_fid = 3 [packed = true];
inline int CutPoints::_internal_cut_fid_size() const {
  return _impl_.cut_fid_.size();
}
inline int CutPoints::cut_fid_size() const {
  return _internal_cut_fid_size();
}
inline void CutPoints::clear_cut_fid() {
  _impl_.cut_fid_.Clear();
}
inline int32_t CutPoints::_internal_cut_fid(int index) const {
  return _impl_.cut_fid_.Get(index);
}
inline int32_t CutPoints::cut_fid(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.CutPoints.cut_fid)
  return _internal_cut_fid(index);
}
inline void CutPoints::set_cut_fid(int index, int32_t value) {
  _impl_.cut_fid_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.CutPoints.cut_fid)
}
inline void CutPoints::_internal_add_cut_fid(int32_t value) {
  _impl_.cut_fid_.Add(value);
}
inline void CutPoints::add_cut_fid(int32_t value) {
  _internal_add_cut_fid(value);
  // @@protoc_insertion_point(field_add:fedtree.CutPoints.cut_fid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CutPoints::_internal_cut_fid() const {
  return _impl_.cut_fid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CutPoints::cut_fid() const {
  // @@protoc_insertion_point(field_list:fedtree.CutPoints.cut_fid)
  return _internal_cut_fid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CutPoints::_internal_mutable_cut_fid() {
  return &_impl_.cut_fid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CutPoints::mutable_cut_fid() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.CutPoints.cut_fid)
  return _internal_mutable_cut_fid();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fedtree

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_fedtree_2eproto
