// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: fedtree.proto
#ifndef GRPC_fedtree_2eproto__INCLUDED
#define GRPC_fedtree_2eproto__INCLUDED

#include "fedtree.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace fedtree {

// after modifying this file, run these two commands in the current folder
// add protoc to the path
// export PATH=../../../build/_deps/grpc-build/third_party/protobuf:PATH
// export PATH=../../../build/_deps/grpc-build/:PATH
// protoc -I ./ --grpc_out=. --plugin=protoc-gen-grpc=`which grpc_cpp_plugin` ./fedtree.proto
// protoc -I ./ --cpp_out=. ./fedtree.proto
//
// A simple key-value storage service
class FedTree final {
 public:
  static constexpr char const* service_full_name() {
    return "fedtree.FedTree";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Provides a value for each key request
    virtual ::grpc::Status TriggerUpdateGradients(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>> AsyncTriggerUpdateGradients(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>>(AsyncTriggerUpdateGradientsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>> PrepareAsyncTriggerUpdateGradients(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>>(PrepareAsyncTriggerUpdateGradientsRaw(context, request, cq));
    }
    virtual ::grpc::Status TriggerBuildInit(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>> AsyncTriggerBuildInit(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>>(AsyncTriggerBuildInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>> PrepareAsyncTriggerBuildInit(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>>(PrepareAsyncTriggerBuildInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::fedtree::GHPair>> GetGradients(::grpc::ClientContext* context, const ::fedtree::PID& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::fedtree::GHPair>>(GetGradientsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::GHPair>> AsyncGetGradients(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::GHPair>>(AsyncGetGradientsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::GHPair>> PrepareAsyncGetGradients(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::GHPair>>(PrepareAsyncGetGradientsRaw(context, request, cq));
    }
    virtual ::grpc::Status SendDatasetInfo(::grpc::ClientContext* context, const ::fedtree::DatasetInfo& request, ::fedtree::PID* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>> AsyncSendDatasetInfo(::grpc::ClientContext* context, const ::fedtree::DatasetInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>>(AsyncSendDatasetInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>> PrepareAsyncSendDatasetInfo(::grpc::ClientContext* context, const ::fedtree::DatasetInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>>(PrepareAsyncSendDatasetInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::fedtree::GHPair>> SendHistograms(::grpc::ClientContext* context, ::fedtree::PID* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::fedtree::GHPair>>(SendHistogramsRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::fedtree::GHPair>> AsyncSendHistograms(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::fedtree::GHPair>>(AsyncSendHistogramsRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::fedtree::GHPair>> PrepareAsyncSendHistograms(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::fedtree::GHPair>>(PrepareAsyncSendHistogramsRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::fedtree::FID>> SendHistFid(::grpc::ClientContext* context, ::fedtree::PID* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::fedtree::FID>>(SendHistFidRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::fedtree::FID>> AsyncSendHistFid(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::fedtree::FID>>(AsyncSendHistFidRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::fedtree::FID>> PrepareAsyncSendHistFid(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::fedtree::FID>>(PrepareAsyncSendHistFidRaw(context, response, cq));
    }
    virtual ::grpc::Status TriggerAggregate(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>> AsyncTriggerAggregate(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>>(AsyncTriggerAggregateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>> PrepareAsyncTriggerAggregate(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>>(PrepareAsyncTriggerAggregateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::fedtree::BestInfo>> GetBestInfo(::grpc::ClientContext* context, const ::fedtree::PID& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::fedtree::BestInfo>>(GetBestInfoRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::BestInfo>> AsyncGetBestInfo(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::BestInfo>>(AsyncGetBestInfoRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::BestInfo>> PrepareAsyncGetBestInfo(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::BestInfo>>(PrepareAsyncGetBestInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status SendNode(::grpc::ClientContext* context, const ::fedtree::Node& request, ::fedtree::PID* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>> AsyncSendNode(::grpc::ClientContext* context, const ::fedtree::Node& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>>(AsyncSendNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>> PrepareAsyncSendNode(::grpc::ClientContext* context, const ::fedtree::Node& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>>(PrepareAsyncSendNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::fedtree::Ins2NodeID>> SendIns2NodeID(::grpc::ClientContext* context, ::fedtree::PID* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::fedtree::Ins2NodeID>>(SendIns2NodeIDRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::fedtree::Ins2NodeID>> AsyncSendIns2NodeID(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::fedtree::Ins2NodeID>>(AsyncSendIns2NodeIDRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::fedtree::Ins2NodeID>> PrepareAsyncSendIns2NodeID(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::fedtree::Ins2NodeID>>(PrepareAsyncSendIns2NodeIDRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::fedtree::Node>> GetNodes(::grpc::ClientContext* context, const ::fedtree::PID& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::fedtree::Node>>(GetNodesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::Node>> AsyncGetNodes(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::Node>>(AsyncGetNodesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::Node>> PrepareAsyncGetNodes(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::Node>>(PrepareAsyncGetNodesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::fedtree::Ins2NodeID>> GetIns2NodeID(::grpc::ClientContext* context, const ::fedtree::PID& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::fedtree::Ins2NodeID>>(GetIns2NodeIDRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::Ins2NodeID>> AsyncGetIns2NodeID(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::Ins2NodeID>>(AsyncGetIns2NodeIDRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::Ins2NodeID>> PrepareAsyncGetIns2NodeID(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::Ins2NodeID>>(PrepareAsyncGetIns2NodeIDRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckIfContinue(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>> AsyncCheckIfContinue(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>>(AsyncCheckIfContinueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>> PrepareAsyncCheckIfContinue(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>>(PrepareAsyncCheckIfContinueRaw(context, request, cq));
    }
    virtual ::grpc::Status TriggerPrune(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>> AsyncTriggerPrune(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>>(AsyncTriggerPruneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>> PrepareAsyncTriggerPrune(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>>(PrepareAsyncTriggerPruneRaw(context, request, cq));
    }
    virtual ::grpc::Status TriggerPrintScore(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>> AsyncTriggerPrintScore(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>>(AsyncTriggerPrintScoreRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>> PrepareAsyncTriggerPrintScore(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>>(PrepareAsyncTriggerPrintScoreRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::fedtree::GHPair>> SendRange(::grpc::ClientContext* context, ::fedtree::PID* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::fedtree::GHPair>>(SendRangeRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::fedtree::GHPair>> AsyncSendRange(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::fedtree::GHPair>>(AsyncSendRangeRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::fedtree::GHPair>> PrepareAsyncSendRange(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::fedtree::GHPair>>(PrepareAsyncSendRangeRaw(context, response, cq));
    }
    virtual ::grpc::Status TriggerCut(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>> AsyncTriggerCut(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>>(AsyncTriggerCutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>> PrepareAsyncTriggerCut(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>>(PrepareAsyncTriggerCutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::fedtree::GHPair>> GetRange(::grpc::ClientContext* context, const ::fedtree::PID& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::fedtree::GHPair>>(GetRangeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::GHPair>> AsyncGetRange(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::GHPair>>(AsyncGetRangeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::GHPair>> PrepareAsyncGetRange(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::GHPair>>(PrepareAsyncGetRangeRaw(context, request, cq));
    }
    virtual ::grpc::Status SendGH(::grpc::ClientContext* context, const ::fedtree::GHPair& request, ::fedtree::PID* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>> AsyncSendGH(::grpc::ClientContext* context, const ::fedtree::GHPair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>>(AsyncSendGHRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>> PrepareAsyncSendGH(::grpc::ClientContext* context, const ::fedtree::GHPair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>>(PrepareAsyncSendGHRaw(context, request, cq));
    }
    virtual ::grpc::Status SendDHPubKey(::grpc::ClientContext* context, const ::fedtree::DHPublicKey& request, ::fedtree::PID* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>> AsyncSendDHPubKey(::grpc::ClientContext* context, const ::fedtree::DHPublicKey& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>>(AsyncSendDHPubKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>> PrepareAsyncSendDHPubKey(::grpc::ClientContext* context, const ::fedtree::DHPublicKey& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>>(PrepareAsyncSendDHPubKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::fedtree::DHPublicKeys>> GetDHPubKeys(::grpc::ClientContext* context, const ::fedtree::PID& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::fedtree::DHPublicKeys>>(GetDHPubKeysRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::DHPublicKeys>> AsyncGetDHPubKeys(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::DHPublicKeys>>(AsyncGetDHPubKeysRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::DHPublicKeys>> PrepareAsyncGetDHPubKeys(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::DHPublicKeys>>(PrepareAsyncGetDHPubKeysRaw(context, request, cq));
    }
    virtual ::grpc::Status SendNoises(::grpc::ClientContext* context, const ::fedtree::SANoises& request, ::fedtree::PID* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>> AsyncSendNoises(::grpc::ClientContext* context, const ::fedtree::SANoises& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>>(AsyncSendNoisesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>> PrepareAsyncSendNoises(::grpc::ClientContext* context, const ::fedtree::SANoises& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>>(PrepareAsyncSendNoisesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::fedtree::SANoises>> GetNoises(::grpc::ClientContext* context, const ::fedtree::PID& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::fedtree::SANoises>>(GetNoisesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::SANoises>> AsyncGetNoises(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::SANoises>>(AsyncGetNoisesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::SANoises>> PrepareAsyncGetNoises(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::SANoises>>(PrepareAsyncGetNoisesRaw(context, request, cq));
    }
    virtual ::grpc::Status SendCutPoints(::grpc::ClientContext* context, const ::fedtree::CutPoints& request, ::fedtree::PID* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>> AsyncSendCutPoints(::grpc::ClientContext* context, const ::fedtree::CutPoints& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>>(AsyncSendCutPointsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>> PrepareAsyncSendCutPoints(::grpc::ClientContext* context, const ::fedtree::CutPoints& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>>(PrepareAsyncSendCutPointsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::fedtree::CutPoints>> GetCutPoints(::grpc::ClientContext* context, const ::fedtree::PID& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::fedtree::CutPoints>>(GetCutPointsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::CutPoints>> AsyncGetCutPoints(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::CutPoints>>(AsyncGetCutPointsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::CutPoints>> PrepareAsyncGetCutPoints(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::CutPoints>>(PrepareAsyncGetCutPointsRaw(context, request, cq));
    }
    virtual ::grpc::Status TriggerBuildUsingGH(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>> AsyncTriggerBuildUsingGH(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>>(AsyncTriggerBuildUsingGHRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>> PrepareAsyncTriggerBuildUsingGH(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>>(PrepareAsyncTriggerBuildUsingGHRaw(context, request, cq));
    }
    virtual ::grpc::Status TriggerCalcTree(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>> AsyncTriggerCalcTree(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>>(AsyncTriggerCalcTreeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>> PrepareAsyncTriggerCalcTree(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>>(PrepareAsyncTriggerCalcTreeRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRootNode(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Node* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Node>> AsyncGetRootNode(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Node>>(AsyncGetRootNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Node>> PrepareAsyncGetRootNode(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Node>>(PrepareAsyncGetRootNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::fedtree::SplitPoint>> GetSplitPoints(::grpc::ClientContext* context, const ::fedtree::PID& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::fedtree::SplitPoint>>(GetSplitPointsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::SplitPoint>> AsyncGetSplitPoints(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::SplitPoint>>(AsyncGetSplitPointsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::SplitPoint>> PrepareAsyncGetSplitPoints(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::SplitPoint>>(PrepareAsyncGetSplitPointsRaw(context, request, cq));
    }
    virtual ::grpc::Status HCheckIfContinue(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>> AsyncHCheckIfContinue(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>>(AsyncHCheckIfContinueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>> PrepareAsyncHCheckIfContinue(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>>(PrepareAsyncHCheckIfContinueRaw(context, request, cq));
    }
    virtual ::grpc::Status ScoreReduce(::grpc::ClientContext* context, const ::fedtree::Score& request, ::fedtree::Score* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Score>> AsyncScoreReduce(::grpc::ClientContext* context, const ::fedtree::Score& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Score>>(AsyncScoreReduceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Score>> PrepareAsyncScoreReduce(::grpc::ClientContext* context, const ::fedtree::Score& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Score>>(PrepareAsyncScoreReduceRaw(context, request, cq));
    }
    virtual ::grpc::Status TriggerHomoInit(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>> AsyncTriggerHomoInit(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>>(AsyncTriggerHomoInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>> PrepareAsyncTriggerHomoInit(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>>(PrepareAsyncTriggerHomoInitRaw(context, request, cq));
    }
    virtual ::grpc::Status TriggerSAInit(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>> AsyncTriggerSAInit(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>>(AsyncTriggerSAInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>> PrepareAsyncTriggerSAInit(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>>(PrepareAsyncTriggerSAInitRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPaillier(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Paillier* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Paillier>> AsyncGetPaillier(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Paillier>>(AsyncGetPaillierRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Paillier>> PrepareAsyncGetPaillier(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Paillier>>(PrepareAsyncGetPaillierRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::fedtree::GHPairEnc>> SendHistogramsEnc(::grpc::ClientContext* context, ::fedtree::PID* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::fedtree::GHPairEnc>>(SendHistogramsEncRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::fedtree::GHPairEnc>> AsyncSendHistogramsEnc(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::fedtree::GHPairEnc>>(AsyncSendHistogramsEncRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::fedtree::GHPairEnc>> PrepareAsyncSendHistogramsEnc(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::fedtree::GHPairEnc>>(PrepareAsyncSendHistogramsEncRaw(context, response, cq));
    }
    virtual ::grpc::Status SendBatchedHistograms(::grpc::ClientContext* context, const ::fedtree::GHArray& request, ::fedtree::PID* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>> AsyncSendBatchedHistograms(::grpc::ClientContext* context, const ::fedtree::GHArray& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>>(AsyncSendBatchedHistogramsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>> PrepareAsyncSendBatchedHistograms(::grpc::ClientContext* context, const ::fedtree::GHArray& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>>(PrepareAsyncSendBatchedHistogramsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::fedtree::GHBatch>> SendHistogramBatches(::grpc::ClientContext* context, ::fedtree::PID* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::fedtree::GHBatch>>(SendHistogramBatchesRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::fedtree::GHBatch>> AsyncSendHistogramBatches(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::fedtree::GHBatch>>(AsyncSendHistogramBatchesRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::fedtree::GHBatch>> PrepareAsyncSendHistogramBatches(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::fedtree::GHBatch>>(PrepareAsyncSendHistogramBatchesRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::fedtree::FIDBatch>> SendHistFidBatches(::grpc::ClientContext* context, ::fedtree::PID* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::fedtree::FIDBatch>>(SendHistFidBatchesRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::fedtree::FIDBatch>> AsyncSendHistFidBatches(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::fedtree::FIDBatch>>(AsyncSendHistFidBatchesRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::fedtree::FIDBatch>> PrepareAsyncSendHistFidBatches(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::fedtree::FIDBatch>>(PrepareAsyncSendHistFidBatchesRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::fedtree::Ins2NodeIDBatch>> GetIns2NodeIDBatches(::grpc::ClientContext* context, const ::fedtree::PID& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::fedtree::Ins2NodeIDBatch>>(GetIns2NodeIDBatchesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::Ins2NodeIDBatch>> AsyncGetIns2NodeIDBatches(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::Ins2NodeIDBatch>>(AsyncGetIns2NodeIDBatchesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::Ins2NodeIDBatch>> PrepareAsyncGetIns2NodeIDBatches(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::Ins2NodeIDBatch>>(PrepareAsyncGetIns2NodeIDBatchesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::fedtree::Ins2NodeIDBatch>> SendIns2NodeIDBatches(::grpc::ClientContext* context, ::fedtree::PID* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::fedtree::Ins2NodeIDBatch>>(SendIns2NodeIDBatchesRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::fedtree::Ins2NodeIDBatch>> AsyncSendIns2NodeIDBatches(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::fedtree::Ins2NodeIDBatch>>(AsyncSendIns2NodeIDBatchesRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::fedtree::Ins2NodeIDBatch>> PrepareAsyncSendIns2NodeIDBatches(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::fedtree::Ins2NodeIDBatch>>(PrepareAsyncSendIns2NodeIDBatchesRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::fedtree::GHBatch>> GetGradientBatches(::grpc::ClientContext* context, const ::fedtree::PID& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::fedtree::GHBatch>>(GetGradientBatchesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::GHBatch>> AsyncGetGradientBatches(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::GHBatch>>(AsyncGetGradientBatchesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::GHBatch>> PrepareAsyncGetGradientBatches(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::GHBatch>>(PrepareAsyncGetGradientBatchesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::fedtree::GHEncBatch>> GetGradientBatchesEnc(::grpc::ClientContext* context, const ::fedtree::PID& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::fedtree::GHEncBatch>>(GetGradientBatchesEncRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::GHEncBatch>> AsyncGetGradientBatchesEnc(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::GHEncBatch>>(AsyncGetGradientBatchesEncRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::GHEncBatch>> PrepareAsyncGetGradientBatchesEnc(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fedtree::GHEncBatch>>(PrepareAsyncGetGradientBatchesEncRaw(context, request, cq));
    }
    virtual ::grpc::Status SendNodeEnc(::grpc::ClientContext* context, const ::fedtree::NodeEnc& request, ::fedtree::PID* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>> AsyncSendNodeEnc(::grpc::ClientContext* context, const ::fedtree::NodeEnc& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>>(AsyncSendNodeEncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>> PrepareAsyncSendNodeEnc(::grpc::ClientContext* context, const ::fedtree::NodeEnc& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>>(PrepareAsyncSendNodeEncRaw(context, request, cq));
    }
    virtual ::grpc::Status SendNodes(::grpc::ClientContext* context, const ::fedtree::NodeArray& request, ::fedtree::PID* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>> AsyncSendNodes(::grpc::ClientContext* context, const ::fedtree::NodeArray& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>>(AsyncSendNodesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>> PrepareAsyncSendNodes(::grpc::ClientContext* context, const ::fedtree::NodeArray& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>>(PrepareAsyncSendNodesRaw(context, request, cq));
    }
    virtual ::grpc::Status SendNodesEnc(::grpc::ClientContext* context, const ::fedtree::NodeEncArray& request, ::fedtree::PID* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>> AsyncSendNodesEnc(::grpc::ClientContext* context, const ::fedtree::NodeEncArray& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>>(AsyncSendNodesEncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>> PrepareAsyncSendNodesEnc(::grpc::ClientContext* context, const ::fedtree::NodeEncArray& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>>(PrepareAsyncSendNodesEncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::fedtree::GHEncBatch>> SendHistogramBatchesEnc(::grpc::ClientContext* context, ::fedtree::PID* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::fedtree::GHEncBatch>>(SendHistogramBatchesEncRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::fedtree::GHEncBatch>> AsyncSendHistogramBatchesEnc(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::fedtree::GHEncBatch>>(AsyncSendHistogramBatchesEncRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::fedtree::GHEncBatch>> PrepareAsyncSendHistogramBatchesEnc(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::fedtree::GHEncBatch>>(PrepareAsyncSendHistogramBatchesEncRaw(context, response, cq));
    }
    virtual ::grpc::Status StopServer(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Score* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Score>> AsyncStopServer(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Score>>(AsyncStopServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Score>> PrepareAsyncStopServer(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Score>>(PrepareAsyncStopServerRaw(context, request, cq));
    }
    virtual ::grpc::Status BeginBarrier(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>> AsyncBeginBarrier(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>>(AsyncBeginBarrierRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>> PrepareAsyncBeginBarrier(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>>(PrepareAsyncBeginBarrierRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Provides a value for each key request
      virtual void TriggerUpdateGradients(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TriggerUpdateGradients(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void TriggerBuildInit(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TriggerBuildInit(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetGradients(::grpc::ClientContext* context, const ::fedtree::PID* request, ::grpc::ClientReadReactor< ::fedtree::GHPair>* reactor) = 0;
      virtual void SendDatasetInfo(::grpc::ClientContext* context, const ::fedtree::DatasetInfo* request, ::fedtree::PID* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendDatasetInfo(::grpc::ClientContext* context, const ::fedtree::DatasetInfo* request, ::fedtree::PID* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SendHistograms(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::ClientWriteReactor< ::fedtree::GHPair>* reactor) = 0;
      virtual void SendHistFid(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::ClientWriteReactor< ::fedtree::FID>* reactor) = 0;
      virtual void TriggerAggregate(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TriggerAggregate(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetBestInfo(::grpc::ClientContext* context, const ::fedtree::PID* request, ::grpc::ClientReadReactor< ::fedtree::BestInfo>* reactor) = 0;
      virtual void SendNode(::grpc::ClientContext* context, const ::fedtree::Node* request, ::fedtree::PID* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendNode(::grpc::ClientContext* context, const ::fedtree::Node* request, ::fedtree::PID* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SendIns2NodeID(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::ClientWriteReactor< ::fedtree::Ins2NodeID>* reactor) = 0;
      virtual void GetNodes(::grpc::ClientContext* context, const ::fedtree::PID* request, ::grpc::ClientReadReactor< ::fedtree::Node>* reactor) = 0;
      virtual void GetIns2NodeID(::grpc::ClientContext* context, const ::fedtree::PID* request, ::grpc::ClientReadReactor< ::fedtree::Ins2NodeID>* reactor) = 0;
      virtual void CheckIfContinue(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckIfContinue(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void TriggerPrune(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TriggerPrune(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void TriggerPrintScore(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TriggerPrintScore(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SendRange(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::ClientWriteReactor< ::fedtree::GHPair>* reactor) = 0;
      virtual void TriggerCut(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TriggerCut(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetRange(::grpc::ClientContext* context, const ::fedtree::PID* request, ::grpc::ClientReadReactor< ::fedtree::GHPair>* reactor) = 0;
      virtual void SendGH(::grpc::ClientContext* context, const ::fedtree::GHPair* request, ::fedtree::PID* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendGH(::grpc::ClientContext* context, const ::fedtree::GHPair* request, ::fedtree::PID* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SendDHPubKey(::grpc::ClientContext* context, const ::fedtree::DHPublicKey* request, ::fedtree::PID* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendDHPubKey(::grpc::ClientContext* context, const ::fedtree::DHPublicKey* request, ::fedtree::PID* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetDHPubKeys(::grpc::ClientContext* context, const ::fedtree::PID* request, ::grpc::ClientReadReactor< ::fedtree::DHPublicKeys>* reactor) = 0;
      virtual void SendNoises(::grpc::ClientContext* context, const ::fedtree::SANoises* request, ::fedtree::PID* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendNoises(::grpc::ClientContext* context, const ::fedtree::SANoises* request, ::fedtree::PID* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetNoises(::grpc::ClientContext* context, const ::fedtree::PID* request, ::grpc::ClientReadReactor< ::fedtree::SANoises>* reactor) = 0;
      virtual void SendCutPoints(::grpc::ClientContext* context, const ::fedtree::CutPoints* request, ::fedtree::PID* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendCutPoints(::grpc::ClientContext* context, const ::fedtree::CutPoints* request, ::fedtree::PID* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetCutPoints(::grpc::ClientContext* context, const ::fedtree::PID* request, ::grpc::ClientReadReactor< ::fedtree::CutPoints>* reactor) = 0;
      virtual void TriggerBuildUsingGH(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TriggerBuildUsingGH(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void TriggerCalcTree(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TriggerCalcTree(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetRootNode(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Node* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRootNode(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Node* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetSplitPoints(::grpc::ClientContext* context, const ::fedtree::PID* request, ::grpc::ClientReadReactor< ::fedtree::SplitPoint>* reactor) = 0;
      virtual void HCheckIfContinue(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HCheckIfContinue(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ScoreReduce(::grpc::ClientContext* context, const ::fedtree::Score* request, ::fedtree::Score* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ScoreReduce(::grpc::ClientContext* context, const ::fedtree::Score* request, ::fedtree::Score* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void TriggerHomoInit(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TriggerHomoInit(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void TriggerSAInit(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TriggerSAInit(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetPaillier(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Paillier* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPaillier(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Paillier* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SendHistogramsEnc(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::ClientWriteReactor< ::fedtree::GHPairEnc>* reactor) = 0;
      virtual void SendBatchedHistograms(::grpc::ClientContext* context, const ::fedtree::GHArray* request, ::fedtree::PID* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendBatchedHistograms(::grpc::ClientContext* context, const ::fedtree::GHArray* request, ::fedtree::PID* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SendHistogramBatches(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::ClientWriteReactor< ::fedtree::GHBatch>* reactor) = 0;
      virtual void SendHistFidBatches(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::ClientWriteReactor< ::fedtree::FIDBatch>* reactor) = 0;
      virtual void GetIns2NodeIDBatches(::grpc::ClientContext* context, const ::fedtree::PID* request, ::grpc::ClientReadReactor< ::fedtree::Ins2NodeIDBatch>* reactor) = 0;
      virtual void SendIns2NodeIDBatches(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::ClientWriteReactor< ::fedtree::Ins2NodeIDBatch>* reactor) = 0;
      virtual void GetGradientBatches(::grpc::ClientContext* context, const ::fedtree::PID* request, ::grpc::ClientReadReactor< ::fedtree::GHBatch>* reactor) = 0;
      virtual void GetGradientBatchesEnc(::grpc::ClientContext* context, const ::fedtree::PID* request, ::grpc::ClientReadReactor< ::fedtree::GHEncBatch>* reactor) = 0;
      virtual void SendNodeEnc(::grpc::ClientContext* context, const ::fedtree::NodeEnc* request, ::fedtree::PID* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendNodeEnc(::grpc::ClientContext* context, const ::fedtree::NodeEnc* request, ::fedtree::PID* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SendNodes(::grpc::ClientContext* context, const ::fedtree::NodeArray* request, ::fedtree::PID* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendNodes(::grpc::ClientContext* context, const ::fedtree::NodeArray* request, ::fedtree::PID* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SendNodesEnc(::grpc::ClientContext* context, const ::fedtree::NodeEncArray* request, ::fedtree::PID* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendNodesEnc(::grpc::ClientContext* context, const ::fedtree::NodeEncArray* request, ::fedtree::PID* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SendHistogramBatchesEnc(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::ClientWriteReactor< ::fedtree::GHEncBatch>* reactor) = 0;
      virtual void StopServer(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Score* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StopServer(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Score* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void BeginBarrier(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BeginBarrier(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>* AsyncTriggerUpdateGradientsRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>* PrepareAsyncTriggerUpdateGradientsRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>* AsyncTriggerBuildInitRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>* PrepareAsyncTriggerBuildInitRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::fedtree::GHPair>* GetGradientsRaw(::grpc::ClientContext* context, const ::fedtree::PID& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::fedtree::GHPair>* AsyncGetGradientsRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::fedtree::GHPair>* PrepareAsyncGetGradientsRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>* AsyncSendDatasetInfoRaw(::grpc::ClientContext* context, const ::fedtree::DatasetInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>* PrepareAsyncSendDatasetInfoRaw(::grpc::ClientContext* context, const ::fedtree::DatasetInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::fedtree::GHPair>* SendHistogramsRaw(::grpc::ClientContext* context, ::fedtree::PID* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::fedtree::GHPair>* AsyncSendHistogramsRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::fedtree::GHPair>* PrepareAsyncSendHistogramsRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::fedtree::FID>* SendHistFidRaw(::grpc::ClientContext* context, ::fedtree::PID* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::fedtree::FID>* AsyncSendHistFidRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::fedtree::FID>* PrepareAsyncSendHistFidRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>* AsyncTriggerAggregateRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>* PrepareAsyncTriggerAggregateRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::fedtree::BestInfo>* GetBestInfoRaw(::grpc::ClientContext* context, const ::fedtree::PID& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::fedtree::BestInfo>* AsyncGetBestInfoRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::fedtree::BestInfo>* PrepareAsyncGetBestInfoRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>* AsyncSendNodeRaw(::grpc::ClientContext* context, const ::fedtree::Node& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>* PrepareAsyncSendNodeRaw(::grpc::ClientContext* context, const ::fedtree::Node& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::fedtree::Ins2NodeID>* SendIns2NodeIDRaw(::grpc::ClientContext* context, ::fedtree::PID* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::fedtree::Ins2NodeID>* AsyncSendIns2NodeIDRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::fedtree::Ins2NodeID>* PrepareAsyncSendIns2NodeIDRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::fedtree::Node>* GetNodesRaw(::grpc::ClientContext* context, const ::fedtree::PID& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::fedtree::Node>* AsyncGetNodesRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::fedtree::Node>* PrepareAsyncGetNodesRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::fedtree::Ins2NodeID>* GetIns2NodeIDRaw(::grpc::ClientContext* context, const ::fedtree::PID& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::fedtree::Ins2NodeID>* AsyncGetIns2NodeIDRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::fedtree::Ins2NodeID>* PrepareAsyncGetIns2NodeIDRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>* AsyncCheckIfContinueRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>* PrepareAsyncCheckIfContinueRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>* AsyncTriggerPruneRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>* PrepareAsyncTriggerPruneRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>* AsyncTriggerPrintScoreRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>* PrepareAsyncTriggerPrintScoreRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::fedtree::GHPair>* SendRangeRaw(::grpc::ClientContext* context, ::fedtree::PID* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::fedtree::GHPair>* AsyncSendRangeRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::fedtree::GHPair>* PrepareAsyncSendRangeRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>* AsyncTriggerCutRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>* PrepareAsyncTriggerCutRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::fedtree::GHPair>* GetRangeRaw(::grpc::ClientContext* context, const ::fedtree::PID& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::fedtree::GHPair>* AsyncGetRangeRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::fedtree::GHPair>* PrepareAsyncGetRangeRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>* AsyncSendGHRaw(::grpc::ClientContext* context, const ::fedtree::GHPair& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>* PrepareAsyncSendGHRaw(::grpc::ClientContext* context, const ::fedtree::GHPair& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>* AsyncSendDHPubKeyRaw(::grpc::ClientContext* context, const ::fedtree::DHPublicKey& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>* PrepareAsyncSendDHPubKeyRaw(::grpc::ClientContext* context, const ::fedtree::DHPublicKey& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::fedtree::DHPublicKeys>* GetDHPubKeysRaw(::grpc::ClientContext* context, const ::fedtree::PID& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::fedtree::DHPublicKeys>* AsyncGetDHPubKeysRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::fedtree::DHPublicKeys>* PrepareAsyncGetDHPubKeysRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>* AsyncSendNoisesRaw(::grpc::ClientContext* context, const ::fedtree::SANoises& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>* PrepareAsyncSendNoisesRaw(::grpc::ClientContext* context, const ::fedtree::SANoises& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::fedtree::SANoises>* GetNoisesRaw(::grpc::ClientContext* context, const ::fedtree::PID& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::fedtree::SANoises>* AsyncGetNoisesRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::fedtree::SANoises>* PrepareAsyncGetNoisesRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>* AsyncSendCutPointsRaw(::grpc::ClientContext* context, const ::fedtree::CutPoints& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>* PrepareAsyncSendCutPointsRaw(::grpc::ClientContext* context, const ::fedtree::CutPoints& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::fedtree::CutPoints>* GetCutPointsRaw(::grpc::ClientContext* context, const ::fedtree::PID& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::fedtree::CutPoints>* AsyncGetCutPointsRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::fedtree::CutPoints>* PrepareAsyncGetCutPointsRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>* AsyncTriggerBuildUsingGHRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>* PrepareAsyncTriggerBuildUsingGHRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>* AsyncTriggerCalcTreeRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>* PrepareAsyncTriggerCalcTreeRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Node>* AsyncGetRootNodeRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Node>* PrepareAsyncGetRootNodeRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::fedtree::SplitPoint>* GetSplitPointsRaw(::grpc::ClientContext* context, const ::fedtree::PID& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::fedtree::SplitPoint>* AsyncGetSplitPointsRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::fedtree::SplitPoint>* PrepareAsyncGetSplitPointsRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>* AsyncHCheckIfContinueRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>* PrepareAsyncHCheckIfContinueRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Score>* AsyncScoreReduceRaw(::grpc::ClientContext* context, const ::fedtree::Score& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Score>* PrepareAsyncScoreReduceRaw(::grpc::ClientContext* context, const ::fedtree::Score& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>* AsyncTriggerHomoInitRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>* PrepareAsyncTriggerHomoInitRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>* AsyncTriggerSAInitRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>* PrepareAsyncTriggerSAInitRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Paillier>* AsyncGetPaillierRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Paillier>* PrepareAsyncGetPaillierRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::fedtree::GHPairEnc>* SendHistogramsEncRaw(::grpc::ClientContext* context, ::fedtree::PID* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::fedtree::GHPairEnc>* AsyncSendHistogramsEncRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::fedtree::GHPairEnc>* PrepareAsyncSendHistogramsEncRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>* AsyncSendBatchedHistogramsRaw(::grpc::ClientContext* context, const ::fedtree::GHArray& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>* PrepareAsyncSendBatchedHistogramsRaw(::grpc::ClientContext* context, const ::fedtree::GHArray& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::fedtree::GHBatch>* SendHistogramBatchesRaw(::grpc::ClientContext* context, ::fedtree::PID* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::fedtree::GHBatch>* AsyncSendHistogramBatchesRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::fedtree::GHBatch>* PrepareAsyncSendHistogramBatchesRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::fedtree::FIDBatch>* SendHistFidBatchesRaw(::grpc::ClientContext* context, ::fedtree::PID* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::fedtree::FIDBatch>* AsyncSendHistFidBatchesRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::fedtree::FIDBatch>* PrepareAsyncSendHistFidBatchesRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::fedtree::Ins2NodeIDBatch>* GetIns2NodeIDBatchesRaw(::grpc::ClientContext* context, const ::fedtree::PID& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::fedtree::Ins2NodeIDBatch>* AsyncGetIns2NodeIDBatchesRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::fedtree::Ins2NodeIDBatch>* PrepareAsyncGetIns2NodeIDBatchesRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::fedtree::Ins2NodeIDBatch>* SendIns2NodeIDBatchesRaw(::grpc::ClientContext* context, ::fedtree::PID* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::fedtree::Ins2NodeIDBatch>* AsyncSendIns2NodeIDBatchesRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::fedtree::Ins2NodeIDBatch>* PrepareAsyncSendIns2NodeIDBatchesRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::fedtree::GHBatch>* GetGradientBatchesRaw(::grpc::ClientContext* context, const ::fedtree::PID& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::fedtree::GHBatch>* AsyncGetGradientBatchesRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::fedtree::GHBatch>* PrepareAsyncGetGradientBatchesRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::fedtree::GHEncBatch>* GetGradientBatchesEncRaw(::grpc::ClientContext* context, const ::fedtree::PID& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::fedtree::GHEncBatch>* AsyncGetGradientBatchesEncRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::fedtree::GHEncBatch>* PrepareAsyncGetGradientBatchesEncRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>* AsyncSendNodeEncRaw(::grpc::ClientContext* context, const ::fedtree::NodeEnc& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>* PrepareAsyncSendNodeEncRaw(::grpc::ClientContext* context, const ::fedtree::NodeEnc& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>* AsyncSendNodesRaw(::grpc::ClientContext* context, const ::fedtree::NodeArray& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>* PrepareAsyncSendNodesRaw(::grpc::ClientContext* context, const ::fedtree::NodeArray& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>* AsyncSendNodesEncRaw(::grpc::ClientContext* context, const ::fedtree::NodeEncArray& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::PID>* PrepareAsyncSendNodesEncRaw(::grpc::ClientContext* context, const ::fedtree::NodeEncArray& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::fedtree::GHEncBatch>* SendHistogramBatchesEncRaw(::grpc::ClientContext* context, ::fedtree::PID* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::fedtree::GHEncBatch>* AsyncSendHistogramBatchesEncRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::fedtree::GHEncBatch>* PrepareAsyncSendHistogramBatchesEncRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Score>* AsyncStopServerRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Score>* PrepareAsyncStopServerRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>* AsyncBeginBarrierRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fedtree::Ready>* PrepareAsyncBeginBarrierRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status TriggerUpdateGradients(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>> AsyncTriggerUpdateGradients(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>>(AsyncTriggerUpdateGradientsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>> PrepareAsyncTriggerUpdateGradients(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>>(PrepareAsyncTriggerUpdateGradientsRaw(context, request, cq));
    }
    ::grpc::Status TriggerBuildInit(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>> AsyncTriggerBuildInit(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>>(AsyncTriggerBuildInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>> PrepareAsyncTriggerBuildInit(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>>(PrepareAsyncTriggerBuildInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::fedtree::GHPair>> GetGradients(::grpc::ClientContext* context, const ::fedtree::PID& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::fedtree::GHPair>>(GetGradientsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::GHPair>> AsyncGetGradients(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::GHPair>>(AsyncGetGradientsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::GHPair>> PrepareAsyncGetGradients(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::GHPair>>(PrepareAsyncGetGradientsRaw(context, request, cq));
    }
    ::grpc::Status SendDatasetInfo(::grpc::ClientContext* context, const ::fedtree::DatasetInfo& request, ::fedtree::PID* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>> AsyncSendDatasetInfo(::grpc::ClientContext* context, const ::fedtree::DatasetInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>>(AsyncSendDatasetInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>> PrepareAsyncSendDatasetInfo(::grpc::ClientContext* context, const ::fedtree::DatasetInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>>(PrepareAsyncSendDatasetInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::fedtree::GHPair>> SendHistograms(::grpc::ClientContext* context, ::fedtree::PID* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::fedtree::GHPair>>(SendHistogramsRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::fedtree::GHPair>> AsyncSendHistograms(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::fedtree::GHPair>>(AsyncSendHistogramsRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::fedtree::GHPair>> PrepareAsyncSendHistograms(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::fedtree::GHPair>>(PrepareAsyncSendHistogramsRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::fedtree::FID>> SendHistFid(::grpc::ClientContext* context, ::fedtree::PID* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::fedtree::FID>>(SendHistFidRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::fedtree::FID>> AsyncSendHistFid(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::fedtree::FID>>(AsyncSendHistFidRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::fedtree::FID>> PrepareAsyncSendHistFid(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::fedtree::FID>>(PrepareAsyncSendHistFidRaw(context, response, cq));
    }
    ::grpc::Status TriggerAggregate(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>> AsyncTriggerAggregate(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>>(AsyncTriggerAggregateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>> PrepareAsyncTriggerAggregate(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>>(PrepareAsyncTriggerAggregateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::fedtree::BestInfo>> GetBestInfo(::grpc::ClientContext* context, const ::fedtree::PID& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::fedtree::BestInfo>>(GetBestInfoRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::BestInfo>> AsyncGetBestInfo(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::BestInfo>>(AsyncGetBestInfoRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::BestInfo>> PrepareAsyncGetBestInfo(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::BestInfo>>(PrepareAsyncGetBestInfoRaw(context, request, cq));
    }
    ::grpc::Status SendNode(::grpc::ClientContext* context, const ::fedtree::Node& request, ::fedtree::PID* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>> AsyncSendNode(::grpc::ClientContext* context, const ::fedtree::Node& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>>(AsyncSendNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>> PrepareAsyncSendNode(::grpc::ClientContext* context, const ::fedtree::Node& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>>(PrepareAsyncSendNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::fedtree::Ins2NodeID>> SendIns2NodeID(::grpc::ClientContext* context, ::fedtree::PID* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::fedtree::Ins2NodeID>>(SendIns2NodeIDRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::fedtree::Ins2NodeID>> AsyncSendIns2NodeID(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::fedtree::Ins2NodeID>>(AsyncSendIns2NodeIDRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::fedtree::Ins2NodeID>> PrepareAsyncSendIns2NodeID(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::fedtree::Ins2NodeID>>(PrepareAsyncSendIns2NodeIDRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::fedtree::Node>> GetNodes(::grpc::ClientContext* context, const ::fedtree::PID& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::fedtree::Node>>(GetNodesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::Node>> AsyncGetNodes(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::Node>>(AsyncGetNodesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::Node>> PrepareAsyncGetNodes(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::Node>>(PrepareAsyncGetNodesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::fedtree::Ins2NodeID>> GetIns2NodeID(::grpc::ClientContext* context, const ::fedtree::PID& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::fedtree::Ins2NodeID>>(GetIns2NodeIDRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::Ins2NodeID>> AsyncGetIns2NodeID(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::Ins2NodeID>>(AsyncGetIns2NodeIDRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::Ins2NodeID>> PrepareAsyncGetIns2NodeID(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::Ins2NodeID>>(PrepareAsyncGetIns2NodeIDRaw(context, request, cq));
    }
    ::grpc::Status CheckIfContinue(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>> AsyncCheckIfContinue(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>>(AsyncCheckIfContinueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>> PrepareAsyncCheckIfContinue(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>>(PrepareAsyncCheckIfContinueRaw(context, request, cq));
    }
    ::grpc::Status TriggerPrune(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>> AsyncTriggerPrune(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>>(AsyncTriggerPruneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>> PrepareAsyncTriggerPrune(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>>(PrepareAsyncTriggerPruneRaw(context, request, cq));
    }
    ::grpc::Status TriggerPrintScore(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>> AsyncTriggerPrintScore(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>>(AsyncTriggerPrintScoreRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>> PrepareAsyncTriggerPrintScore(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>>(PrepareAsyncTriggerPrintScoreRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::fedtree::GHPair>> SendRange(::grpc::ClientContext* context, ::fedtree::PID* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::fedtree::GHPair>>(SendRangeRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::fedtree::GHPair>> AsyncSendRange(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::fedtree::GHPair>>(AsyncSendRangeRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::fedtree::GHPair>> PrepareAsyncSendRange(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::fedtree::GHPair>>(PrepareAsyncSendRangeRaw(context, response, cq));
    }
    ::grpc::Status TriggerCut(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>> AsyncTriggerCut(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>>(AsyncTriggerCutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>> PrepareAsyncTriggerCut(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>>(PrepareAsyncTriggerCutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::fedtree::GHPair>> GetRange(::grpc::ClientContext* context, const ::fedtree::PID& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::fedtree::GHPair>>(GetRangeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::GHPair>> AsyncGetRange(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::GHPair>>(AsyncGetRangeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::GHPair>> PrepareAsyncGetRange(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::GHPair>>(PrepareAsyncGetRangeRaw(context, request, cq));
    }
    ::grpc::Status SendGH(::grpc::ClientContext* context, const ::fedtree::GHPair& request, ::fedtree::PID* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>> AsyncSendGH(::grpc::ClientContext* context, const ::fedtree::GHPair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>>(AsyncSendGHRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>> PrepareAsyncSendGH(::grpc::ClientContext* context, const ::fedtree::GHPair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>>(PrepareAsyncSendGHRaw(context, request, cq));
    }
    ::grpc::Status SendDHPubKey(::grpc::ClientContext* context, const ::fedtree::DHPublicKey& request, ::fedtree::PID* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>> AsyncSendDHPubKey(::grpc::ClientContext* context, const ::fedtree::DHPublicKey& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>>(AsyncSendDHPubKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>> PrepareAsyncSendDHPubKey(::grpc::ClientContext* context, const ::fedtree::DHPublicKey& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>>(PrepareAsyncSendDHPubKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::fedtree::DHPublicKeys>> GetDHPubKeys(::grpc::ClientContext* context, const ::fedtree::PID& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::fedtree::DHPublicKeys>>(GetDHPubKeysRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::DHPublicKeys>> AsyncGetDHPubKeys(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::DHPublicKeys>>(AsyncGetDHPubKeysRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::DHPublicKeys>> PrepareAsyncGetDHPubKeys(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::DHPublicKeys>>(PrepareAsyncGetDHPubKeysRaw(context, request, cq));
    }
    ::grpc::Status SendNoises(::grpc::ClientContext* context, const ::fedtree::SANoises& request, ::fedtree::PID* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>> AsyncSendNoises(::grpc::ClientContext* context, const ::fedtree::SANoises& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>>(AsyncSendNoisesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>> PrepareAsyncSendNoises(::grpc::ClientContext* context, const ::fedtree::SANoises& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>>(PrepareAsyncSendNoisesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::fedtree::SANoises>> GetNoises(::grpc::ClientContext* context, const ::fedtree::PID& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::fedtree::SANoises>>(GetNoisesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::SANoises>> AsyncGetNoises(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::SANoises>>(AsyncGetNoisesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::SANoises>> PrepareAsyncGetNoises(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::SANoises>>(PrepareAsyncGetNoisesRaw(context, request, cq));
    }
    ::grpc::Status SendCutPoints(::grpc::ClientContext* context, const ::fedtree::CutPoints& request, ::fedtree::PID* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>> AsyncSendCutPoints(::grpc::ClientContext* context, const ::fedtree::CutPoints& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>>(AsyncSendCutPointsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>> PrepareAsyncSendCutPoints(::grpc::ClientContext* context, const ::fedtree::CutPoints& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>>(PrepareAsyncSendCutPointsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::fedtree::CutPoints>> GetCutPoints(::grpc::ClientContext* context, const ::fedtree::PID& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::fedtree::CutPoints>>(GetCutPointsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::CutPoints>> AsyncGetCutPoints(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::CutPoints>>(AsyncGetCutPointsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::CutPoints>> PrepareAsyncGetCutPoints(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::CutPoints>>(PrepareAsyncGetCutPointsRaw(context, request, cq));
    }
    ::grpc::Status TriggerBuildUsingGH(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>> AsyncTriggerBuildUsingGH(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>>(AsyncTriggerBuildUsingGHRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>> PrepareAsyncTriggerBuildUsingGH(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>>(PrepareAsyncTriggerBuildUsingGHRaw(context, request, cq));
    }
    ::grpc::Status TriggerCalcTree(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>> AsyncTriggerCalcTree(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>>(AsyncTriggerCalcTreeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>> PrepareAsyncTriggerCalcTree(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>>(PrepareAsyncTriggerCalcTreeRaw(context, request, cq));
    }
    ::grpc::Status GetRootNode(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Node* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Node>> AsyncGetRootNode(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Node>>(AsyncGetRootNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Node>> PrepareAsyncGetRootNode(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Node>>(PrepareAsyncGetRootNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::fedtree::SplitPoint>> GetSplitPoints(::grpc::ClientContext* context, const ::fedtree::PID& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::fedtree::SplitPoint>>(GetSplitPointsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::SplitPoint>> AsyncGetSplitPoints(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::SplitPoint>>(AsyncGetSplitPointsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::SplitPoint>> PrepareAsyncGetSplitPoints(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::SplitPoint>>(PrepareAsyncGetSplitPointsRaw(context, request, cq));
    }
    ::grpc::Status HCheckIfContinue(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>> AsyncHCheckIfContinue(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>>(AsyncHCheckIfContinueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>> PrepareAsyncHCheckIfContinue(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>>(PrepareAsyncHCheckIfContinueRaw(context, request, cq));
    }
    ::grpc::Status ScoreReduce(::grpc::ClientContext* context, const ::fedtree::Score& request, ::fedtree::Score* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Score>> AsyncScoreReduce(::grpc::ClientContext* context, const ::fedtree::Score& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Score>>(AsyncScoreReduceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Score>> PrepareAsyncScoreReduce(::grpc::ClientContext* context, const ::fedtree::Score& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Score>>(PrepareAsyncScoreReduceRaw(context, request, cq));
    }
    ::grpc::Status TriggerHomoInit(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>> AsyncTriggerHomoInit(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>>(AsyncTriggerHomoInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>> PrepareAsyncTriggerHomoInit(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>>(PrepareAsyncTriggerHomoInitRaw(context, request, cq));
    }
    ::grpc::Status TriggerSAInit(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>> AsyncTriggerSAInit(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>>(AsyncTriggerSAInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>> PrepareAsyncTriggerSAInit(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>>(PrepareAsyncTriggerSAInitRaw(context, request, cq));
    }
    ::grpc::Status GetPaillier(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Paillier* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Paillier>> AsyncGetPaillier(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Paillier>>(AsyncGetPaillierRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Paillier>> PrepareAsyncGetPaillier(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Paillier>>(PrepareAsyncGetPaillierRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::fedtree::GHPairEnc>> SendHistogramsEnc(::grpc::ClientContext* context, ::fedtree::PID* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::fedtree::GHPairEnc>>(SendHistogramsEncRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::fedtree::GHPairEnc>> AsyncSendHistogramsEnc(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::fedtree::GHPairEnc>>(AsyncSendHistogramsEncRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::fedtree::GHPairEnc>> PrepareAsyncSendHistogramsEnc(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::fedtree::GHPairEnc>>(PrepareAsyncSendHistogramsEncRaw(context, response, cq));
    }
    ::grpc::Status SendBatchedHistograms(::grpc::ClientContext* context, const ::fedtree::GHArray& request, ::fedtree::PID* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>> AsyncSendBatchedHistograms(::grpc::ClientContext* context, const ::fedtree::GHArray& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>>(AsyncSendBatchedHistogramsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>> PrepareAsyncSendBatchedHistograms(::grpc::ClientContext* context, const ::fedtree::GHArray& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>>(PrepareAsyncSendBatchedHistogramsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::fedtree::GHBatch>> SendHistogramBatches(::grpc::ClientContext* context, ::fedtree::PID* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::fedtree::GHBatch>>(SendHistogramBatchesRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::fedtree::GHBatch>> AsyncSendHistogramBatches(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::fedtree::GHBatch>>(AsyncSendHistogramBatchesRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::fedtree::GHBatch>> PrepareAsyncSendHistogramBatches(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::fedtree::GHBatch>>(PrepareAsyncSendHistogramBatchesRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::fedtree::FIDBatch>> SendHistFidBatches(::grpc::ClientContext* context, ::fedtree::PID* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::fedtree::FIDBatch>>(SendHistFidBatchesRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::fedtree::FIDBatch>> AsyncSendHistFidBatches(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::fedtree::FIDBatch>>(AsyncSendHistFidBatchesRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::fedtree::FIDBatch>> PrepareAsyncSendHistFidBatches(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::fedtree::FIDBatch>>(PrepareAsyncSendHistFidBatchesRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::fedtree::Ins2NodeIDBatch>> GetIns2NodeIDBatches(::grpc::ClientContext* context, const ::fedtree::PID& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::fedtree::Ins2NodeIDBatch>>(GetIns2NodeIDBatchesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::Ins2NodeIDBatch>> AsyncGetIns2NodeIDBatches(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::Ins2NodeIDBatch>>(AsyncGetIns2NodeIDBatchesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::Ins2NodeIDBatch>> PrepareAsyncGetIns2NodeIDBatches(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::Ins2NodeIDBatch>>(PrepareAsyncGetIns2NodeIDBatchesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::fedtree::Ins2NodeIDBatch>> SendIns2NodeIDBatches(::grpc::ClientContext* context, ::fedtree::PID* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::fedtree::Ins2NodeIDBatch>>(SendIns2NodeIDBatchesRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::fedtree::Ins2NodeIDBatch>> AsyncSendIns2NodeIDBatches(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::fedtree::Ins2NodeIDBatch>>(AsyncSendIns2NodeIDBatchesRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::fedtree::Ins2NodeIDBatch>> PrepareAsyncSendIns2NodeIDBatches(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::fedtree::Ins2NodeIDBatch>>(PrepareAsyncSendIns2NodeIDBatchesRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::fedtree::GHBatch>> GetGradientBatches(::grpc::ClientContext* context, const ::fedtree::PID& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::fedtree::GHBatch>>(GetGradientBatchesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::GHBatch>> AsyncGetGradientBatches(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::GHBatch>>(AsyncGetGradientBatchesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::GHBatch>> PrepareAsyncGetGradientBatches(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::GHBatch>>(PrepareAsyncGetGradientBatchesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::fedtree::GHEncBatch>> GetGradientBatchesEnc(::grpc::ClientContext* context, const ::fedtree::PID& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::fedtree::GHEncBatch>>(GetGradientBatchesEncRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::GHEncBatch>> AsyncGetGradientBatchesEnc(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::GHEncBatch>>(AsyncGetGradientBatchesEncRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::GHEncBatch>> PrepareAsyncGetGradientBatchesEnc(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::fedtree::GHEncBatch>>(PrepareAsyncGetGradientBatchesEncRaw(context, request, cq));
    }
    ::grpc::Status SendNodeEnc(::grpc::ClientContext* context, const ::fedtree::NodeEnc& request, ::fedtree::PID* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>> AsyncSendNodeEnc(::grpc::ClientContext* context, const ::fedtree::NodeEnc& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>>(AsyncSendNodeEncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>> PrepareAsyncSendNodeEnc(::grpc::ClientContext* context, const ::fedtree::NodeEnc& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>>(PrepareAsyncSendNodeEncRaw(context, request, cq));
    }
    ::grpc::Status SendNodes(::grpc::ClientContext* context, const ::fedtree::NodeArray& request, ::fedtree::PID* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>> AsyncSendNodes(::grpc::ClientContext* context, const ::fedtree::NodeArray& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>>(AsyncSendNodesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>> PrepareAsyncSendNodes(::grpc::ClientContext* context, const ::fedtree::NodeArray& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>>(PrepareAsyncSendNodesRaw(context, request, cq));
    }
    ::grpc::Status SendNodesEnc(::grpc::ClientContext* context, const ::fedtree::NodeEncArray& request, ::fedtree::PID* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>> AsyncSendNodesEnc(::grpc::ClientContext* context, const ::fedtree::NodeEncArray& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>>(AsyncSendNodesEncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>> PrepareAsyncSendNodesEnc(::grpc::ClientContext* context, const ::fedtree::NodeEncArray& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::PID>>(PrepareAsyncSendNodesEncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::fedtree::GHEncBatch>> SendHistogramBatchesEnc(::grpc::ClientContext* context, ::fedtree::PID* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::fedtree::GHEncBatch>>(SendHistogramBatchesEncRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::fedtree::GHEncBatch>> AsyncSendHistogramBatchesEnc(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::fedtree::GHEncBatch>>(AsyncSendHistogramBatchesEncRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::fedtree::GHEncBatch>> PrepareAsyncSendHistogramBatchesEnc(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::fedtree::GHEncBatch>>(PrepareAsyncSendHistogramBatchesEncRaw(context, response, cq));
    }
    ::grpc::Status StopServer(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Score* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Score>> AsyncStopServer(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Score>>(AsyncStopServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Score>> PrepareAsyncStopServer(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Score>>(PrepareAsyncStopServerRaw(context, request, cq));
    }
    ::grpc::Status BeginBarrier(::grpc::ClientContext* context, const ::fedtree::PID& request, ::fedtree::Ready* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>> AsyncBeginBarrier(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>>(AsyncBeginBarrierRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>> PrepareAsyncBeginBarrier(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>>(PrepareAsyncBeginBarrierRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void TriggerUpdateGradients(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)>) override;
      void TriggerUpdateGradients(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TriggerBuildInit(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)>) override;
      void TriggerBuildInit(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetGradients(::grpc::ClientContext* context, const ::fedtree::PID* request, ::grpc::ClientReadReactor< ::fedtree::GHPair>* reactor) override;
      void SendDatasetInfo(::grpc::ClientContext* context, const ::fedtree::DatasetInfo* request, ::fedtree::PID* response, std::function<void(::grpc::Status)>) override;
      void SendDatasetInfo(::grpc::ClientContext* context, const ::fedtree::DatasetInfo* request, ::fedtree::PID* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendHistograms(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::ClientWriteReactor< ::fedtree::GHPair>* reactor) override;
      void SendHistFid(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::ClientWriteReactor< ::fedtree::FID>* reactor) override;
      void TriggerAggregate(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)>) override;
      void TriggerAggregate(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetBestInfo(::grpc::ClientContext* context, const ::fedtree::PID* request, ::grpc::ClientReadReactor< ::fedtree::BestInfo>* reactor) override;
      void SendNode(::grpc::ClientContext* context, const ::fedtree::Node* request, ::fedtree::PID* response, std::function<void(::grpc::Status)>) override;
      void SendNode(::grpc::ClientContext* context, const ::fedtree::Node* request, ::fedtree::PID* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendIns2NodeID(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::ClientWriteReactor< ::fedtree::Ins2NodeID>* reactor) override;
      void GetNodes(::grpc::ClientContext* context, const ::fedtree::PID* request, ::grpc::ClientReadReactor< ::fedtree::Node>* reactor) override;
      void GetIns2NodeID(::grpc::ClientContext* context, const ::fedtree::PID* request, ::grpc::ClientReadReactor< ::fedtree::Ins2NodeID>* reactor) override;
      void CheckIfContinue(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)>) override;
      void CheckIfContinue(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TriggerPrune(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)>) override;
      void TriggerPrune(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TriggerPrintScore(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)>) override;
      void TriggerPrintScore(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendRange(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::ClientWriteReactor< ::fedtree::GHPair>* reactor) override;
      void TriggerCut(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)>) override;
      void TriggerCut(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetRange(::grpc::ClientContext* context, const ::fedtree::PID* request, ::grpc::ClientReadReactor< ::fedtree::GHPair>* reactor) override;
      void SendGH(::grpc::ClientContext* context, const ::fedtree::GHPair* request, ::fedtree::PID* response, std::function<void(::grpc::Status)>) override;
      void SendGH(::grpc::ClientContext* context, const ::fedtree::GHPair* request, ::fedtree::PID* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendDHPubKey(::grpc::ClientContext* context, const ::fedtree::DHPublicKey* request, ::fedtree::PID* response, std::function<void(::grpc::Status)>) override;
      void SendDHPubKey(::grpc::ClientContext* context, const ::fedtree::DHPublicKey* request, ::fedtree::PID* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDHPubKeys(::grpc::ClientContext* context, const ::fedtree::PID* request, ::grpc::ClientReadReactor< ::fedtree::DHPublicKeys>* reactor) override;
      void SendNoises(::grpc::ClientContext* context, const ::fedtree::SANoises* request, ::fedtree::PID* response, std::function<void(::grpc::Status)>) override;
      void SendNoises(::grpc::ClientContext* context, const ::fedtree::SANoises* request, ::fedtree::PID* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetNoises(::grpc::ClientContext* context, const ::fedtree::PID* request, ::grpc::ClientReadReactor< ::fedtree::SANoises>* reactor) override;
      void SendCutPoints(::grpc::ClientContext* context, const ::fedtree::CutPoints* request, ::fedtree::PID* response, std::function<void(::grpc::Status)>) override;
      void SendCutPoints(::grpc::ClientContext* context, const ::fedtree::CutPoints* request, ::fedtree::PID* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCutPoints(::grpc::ClientContext* context, const ::fedtree::PID* request, ::grpc::ClientReadReactor< ::fedtree::CutPoints>* reactor) override;
      void TriggerBuildUsingGH(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)>) override;
      void TriggerBuildUsingGH(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TriggerCalcTree(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)>) override;
      void TriggerCalcTree(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetRootNode(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Node* response, std::function<void(::grpc::Status)>) override;
      void GetRootNode(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Node* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetSplitPoints(::grpc::ClientContext* context, const ::fedtree::PID* request, ::grpc::ClientReadReactor< ::fedtree::SplitPoint>* reactor) override;
      void HCheckIfContinue(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)>) override;
      void HCheckIfContinue(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ScoreReduce(::grpc::ClientContext* context, const ::fedtree::Score* request, ::fedtree::Score* response, std::function<void(::grpc::Status)>) override;
      void ScoreReduce(::grpc::ClientContext* context, const ::fedtree::Score* request, ::fedtree::Score* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TriggerHomoInit(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)>) override;
      void TriggerHomoInit(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TriggerSAInit(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)>) override;
      void TriggerSAInit(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPaillier(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Paillier* response, std::function<void(::grpc::Status)>) override;
      void GetPaillier(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Paillier* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendHistogramsEnc(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::ClientWriteReactor< ::fedtree::GHPairEnc>* reactor) override;
      void SendBatchedHistograms(::grpc::ClientContext* context, const ::fedtree::GHArray* request, ::fedtree::PID* response, std::function<void(::grpc::Status)>) override;
      void SendBatchedHistograms(::grpc::ClientContext* context, const ::fedtree::GHArray* request, ::fedtree::PID* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendHistogramBatches(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::ClientWriteReactor< ::fedtree::GHBatch>* reactor) override;
      void SendHistFidBatches(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::ClientWriteReactor< ::fedtree::FIDBatch>* reactor) override;
      void GetIns2NodeIDBatches(::grpc::ClientContext* context, const ::fedtree::PID* request, ::grpc::ClientReadReactor< ::fedtree::Ins2NodeIDBatch>* reactor) override;
      void SendIns2NodeIDBatches(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::ClientWriteReactor< ::fedtree::Ins2NodeIDBatch>* reactor) override;
      void GetGradientBatches(::grpc::ClientContext* context, const ::fedtree::PID* request, ::grpc::ClientReadReactor< ::fedtree::GHBatch>* reactor) override;
      void GetGradientBatchesEnc(::grpc::ClientContext* context, const ::fedtree::PID* request, ::grpc::ClientReadReactor< ::fedtree::GHEncBatch>* reactor) override;
      void SendNodeEnc(::grpc::ClientContext* context, const ::fedtree::NodeEnc* request, ::fedtree::PID* response, std::function<void(::grpc::Status)>) override;
      void SendNodeEnc(::grpc::ClientContext* context, const ::fedtree::NodeEnc* request, ::fedtree::PID* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendNodes(::grpc::ClientContext* context, const ::fedtree::NodeArray* request, ::fedtree::PID* response, std::function<void(::grpc::Status)>) override;
      void SendNodes(::grpc::ClientContext* context, const ::fedtree::NodeArray* request, ::fedtree::PID* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendNodesEnc(::grpc::ClientContext* context, const ::fedtree::NodeEncArray* request, ::fedtree::PID* response, std::function<void(::grpc::Status)>) override;
      void SendNodesEnc(::grpc::ClientContext* context, const ::fedtree::NodeEncArray* request, ::fedtree::PID* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendHistogramBatchesEnc(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::ClientWriteReactor< ::fedtree::GHEncBatch>* reactor) override;
      void StopServer(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Score* response, std::function<void(::grpc::Status)>) override;
      void StopServer(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Score* response, ::grpc::ClientUnaryReactor* reactor) override;
      void BeginBarrier(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, std::function<void(::grpc::Status)>) override;
      void BeginBarrier(::grpc::ClientContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* AsyncTriggerUpdateGradientsRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* PrepareAsyncTriggerUpdateGradientsRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* AsyncTriggerBuildInitRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* PrepareAsyncTriggerBuildInitRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::fedtree::GHPair>* GetGradientsRaw(::grpc::ClientContext* context, const ::fedtree::PID& request) override;
    ::grpc::ClientAsyncReader< ::fedtree::GHPair>* AsyncGetGradientsRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::fedtree::GHPair>* PrepareAsyncGetGradientsRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::PID>* AsyncSendDatasetInfoRaw(::grpc::ClientContext* context, const ::fedtree::DatasetInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::PID>* PrepareAsyncSendDatasetInfoRaw(::grpc::ClientContext* context, const ::fedtree::DatasetInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::fedtree::GHPair>* SendHistogramsRaw(::grpc::ClientContext* context, ::fedtree::PID* response) override;
    ::grpc::ClientAsyncWriter< ::fedtree::GHPair>* AsyncSendHistogramsRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::fedtree::GHPair>* PrepareAsyncSendHistogramsRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::fedtree::FID>* SendHistFidRaw(::grpc::ClientContext* context, ::fedtree::PID* response) override;
    ::grpc::ClientAsyncWriter< ::fedtree::FID>* AsyncSendHistFidRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::fedtree::FID>* PrepareAsyncSendHistFidRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* AsyncTriggerAggregateRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* PrepareAsyncTriggerAggregateRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::fedtree::BestInfo>* GetBestInfoRaw(::grpc::ClientContext* context, const ::fedtree::PID& request) override;
    ::grpc::ClientAsyncReader< ::fedtree::BestInfo>* AsyncGetBestInfoRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::fedtree::BestInfo>* PrepareAsyncGetBestInfoRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::PID>* AsyncSendNodeRaw(::grpc::ClientContext* context, const ::fedtree::Node& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::PID>* PrepareAsyncSendNodeRaw(::grpc::ClientContext* context, const ::fedtree::Node& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::fedtree::Ins2NodeID>* SendIns2NodeIDRaw(::grpc::ClientContext* context, ::fedtree::PID* response) override;
    ::grpc::ClientAsyncWriter< ::fedtree::Ins2NodeID>* AsyncSendIns2NodeIDRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::fedtree::Ins2NodeID>* PrepareAsyncSendIns2NodeIDRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::fedtree::Node>* GetNodesRaw(::grpc::ClientContext* context, const ::fedtree::PID& request) override;
    ::grpc::ClientAsyncReader< ::fedtree::Node>* AsyncGetNodesRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::fedtree::Node>* PrepareAsyncGetNodesRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::fedtree::Ins2NodeID>* GetIns2NodeIDRaw(::grpc::ClientContext* context, const ::fedtree::PID& request) override;
    ::grpc::ClientAsyncReader< ::fedtree::Ins2NodeID>* AsyncGetIns2NodeIDRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::fedtree::Ins2NodeID>* PrepareAsyncGetIns2NodeIDRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* AsyncCheckIfContinueRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* PrepareAsyncCheckIfContinueRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* AsyncTriggerPruneRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* PrepareAsyncTriggerPruneRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* AsyncTriggerPrintScoreRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* PrepareAsyncTriggerPrintScoreRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::fedtree::GHPair>* SendRangeRaw(::grpc::ClientContext* context, ::fedtree::PID* response) override;
    ::grpc::ClientAsyncWriter< ::fedtree::GHPair>* AsyncSendRangeRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::fedtree::GHPair>* PrepareAsyncSendRangeRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* AsyncTriggerCutRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* PrepareAsyncTriggerCutRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::fedtree::GHPair>* GetRangeRaw(::grpc::ClientContext* context, const ::fedtree::PID& request) override;
    ::grpc::ClientAsyncReader< ::fedtree::GHPair>* AsyncGetRangeRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::fedtree::GHPair>* PrepareAsyncGetRangeRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::PID>* AsyncSendGHRaw(::grpc::ClientContext* context, const ::fedtree::GHPair& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::PID>* PrepareAsyncSendGHRaw(::grpc::ClientContext* context, const ::fedtree::GHPair& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::PID>* AsyncSendDHPubKeyRaw(::grpc::ClientContext* context, const ::fedtree::DHPublicKey& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::PID>* PrepareAsyncSendDHPubKeyRaw(::grpc::ClientContext* context, const ::fedtree::DHPublicKey& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::fedtree::DHPublicKeys>* GetDHPubKeysRaw(::grpc::ClientContext* context, const ::fedtree::PID& request) override;
    ::grpc::ClientAsyncReader< ::fedtree::DHPublicKeys>* AsyncGetDHPubKeysRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::fedtree::DHPublicKeys>* PrepareAsyncGetDHPubKeysRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::PID>* AsyncSendNoisesRaw(::grpc::ClientContext* context, const ::fedtree::SANoises& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::PID>* PrepareAsyncSendNoisesRaw(::grpc::ClientContext* context, const ::fedtree::SANoises& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::fedtree::SANoises>* GetNoisesRaw(::grpc::ClientContext* context, const ::fedtree::PID& request) override;
    ::grpc::ClientAsyncReader< ::fedtree::SANoises>* AsyncGetNoisesRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::fedtree::SANoises>* PrepareAsyncGetNoisesRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::PID>* AsyncSendCutPointsRaw(::grpc::ClientContext* context, const ::fedtree::CutPoints& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::PID>* PrepareAsyncSendCutPointsRaw(::grpc::ClientContext* context, const ::fedtree::CutPoints& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::fedtree::CutPoints>* GetCutPointsRaw(::grpc::ClientContext* context, const ::fedtree::PID& request) override;
    ::grpc::ClientAsyncReader< ::fedtree::CutPoints>* AsyncGetCutPointsRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::fedtree::CutPoints>* PrepareAsyncGetCutPointsRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* AsyncTriggerBuildUsingGHRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* PrepareAsyncTriggerBuildUsingGHRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* AsyncTriggerCalcTreeRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* PrepareAsyncTriggerCalcTreeRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::Node>* AsyncGetRootNodeRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::Node>* PrepareAsyncGetRootNodeRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::fedtree::SplitPoint>* GetSplitPointsRaw(::grpc::ClientContext* context, const ::fedtree::PID& request) override;
    ::grpc::ClientAsyncReader< ::fedtree::SplitPoint>* AsyncGetSplitPointsRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::fedtree::SplitPoint>* PrepareAsyncGetSplitPointsRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* AsyncHCheckIfContinueRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* PrepareAsyncHCheckIfContinueRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::Score>* AsyncScoreReduceRaw(::grpc::ClientContext* context, const ::fedtree::Score& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::Score>* PrepareAsyncScoreReduceRaw(::grpc::ClientContext* context, const ::fedtree::Score& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* AsyncTriggerHomoInitRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* PrepareAsyncTriggerHomoInitRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* AsyncTriggerSAInitRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* PrepareAsyncTriggerSAInitRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::Paillier>* AsyncGetPaillierRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::Paillier>* PrepareAsyncGetPaillierRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::fedtree::GHPairEnc>* SendHistogramsEncRaw(::grpc::ClientContext* context, ::fedtree::PID* response) override;
    ::grpc::ClientAsyncWriter< ::fedtree::GHPairEnc>* AsyncSendHistogramsEncRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::fedtree::GHPairEnc>* PrepareAsyncSendHistogramsEncRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::PID>* AsyncSendBatchedHistogramsRaw(::grpc::ClientContext* context, const ::fedtree::GHArray& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::PID>* PrepareAsyncSendBatchedHistogramsRaw(::grpc::ClientContext* context, const ::fedtree::GHArray& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::fedtree::GHBatch>* SendHistogramBatchesRaw(::grpc::ClientContext* context, ::fedtree::PID* response) override;
    ::grpc::ClientAsyncWriter< ::fedtree::GHBatch>* AsyncSendHistogramBatchesRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::fedtree::GHBatch>* PrepareAsyncSendHistogramBatchesRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::fedtree::FIDBatch>* SendHistFidBatchesRaw(::grpc::ClientContext* context, ::fedtree::PID* response) override;
    ::grpc::ClientAsyncWriter< ::fedtree::FIDBatch>* AsyncSendHistFidBatchesRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::fedtree::FIDBatch>* PrepareAsyncSendHistFidBatchesRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::fedtree::Ins2NodeIDBatch>* GetIns2NodeIDBatchesRaw(::grpc::ClientContext* context, const ::fedtree::PID& request) override;
    ::grpc::ClientAsyncReader< ::fedtree::Ins2NodeIDBatch>* AsyncGetIns2NodeIDBatchesRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::fedtree::Ins2NodeIDBatch>* PrepareAsyncGetIns2NodeIDBatchesRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::fedtree::Ins2NodeIDBatch>* SendIns2NodeIDBatchesRaw(::grpc::ClientContext* context, ::fedtree::PID* response) override;
    ::grpc::ClientAsyncWriter< ::fedtree::Ins2NodeIDBatch>* AsyncSendIns2NodeIDBatchesRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::fedtree::Ins2NodeIDBatch>* PrepareAsyncSendIns2NodeIDBatchesRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::fedtree::GHBatch>* GetGradientBatchesRaw(::grpc::ClientContext* context, const ::fedtree::PID& request) override;
    ::grpc::ClientAsyncReader< ::fedtree::GHBatch>* AsyncGetGradientBatchesRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::fedtree::GHBatch>* PrepareAsyncGetGradientBatchesRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::fedtree::GHEncBatch>* GetGradientBatchesEncRaw(::grpc::ClientContext* context, const ::fedtree::PID& request) override;
    ::grpc::ClientAsyncReader< ::fedtree::GHEncBatch>* AsyncGetGradientBatchesEncRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::fedtree::GHEncBatch>* PrepareAsyncGetGradientBatchesEncRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::PID>* AsyncSendNodeEncRaw(::grpc::ClientContext* context, const ::fedtree::NodeEnc& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::PID>* PrepareAsyncSendNodeEncRaw(::grpc::ClientContext* context, const ::fedtree::NodeEnc& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::PID>* AsyncSendNodesRaw(::grpc::ClientContext* context, const ::fedtree::NodeArray& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::PID>* PrepareAsyncSendNodesRaw(::grpc::ClientContext* context, const ::fedtree::NodeArray& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::PID>* AsyncSendNodesEncRaw(::grpc::ClientContext* context, const ::fedtree::NodeEncArray& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::PID>* PrepareAsyncSendNodesEncRaw(::grpc::ClientContext* context, const ::fedtree::NodeEncArray& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::fedtree::GHEncBatch>* SendHistogramBatchesEncRaw(::grpc::ClientContext* context, ::fedtree::PID* response) override;
    ::grpc::ClientAsyncWriter< ::fedtree::GHEncBatch>* AsyncSendHistogramBatchesEncRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::fedtree::GHEncBatch>* PrepareAsyncSendHistogramBatchesEncRaw(::grpc::ClientContext* context, ::fedtree::PID* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::Score>* AsyncStopServerRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::Score>* PrepareAsyncStopServerRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* AsyncBeginBarrierRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fedtree::Ready>* PrepareAsyncBeginBarrierRaw(::grpc::ClientContext* context, const ::fedtree::PID& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_TriggerUpdateGradients_;
    const ::grpc::internal::RpcMethod rpcmethod_TriggerBuildInit_;
    const ::grpc::internal::RpcMethod rpcmethod_GetGradients_;
    const ::grpc::internal::RpcMethod rpcmethod_SendDatasetInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_SendHistograms_;
    const ::grpc::internal::RpcMethod rpcmethod_SendHistFid_;
    const ::grpc::internal::RpcMethod rpcmethod_TriggerAggregate_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBestInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_SendNode_;
    const ::grpc::internal::RpcMethod rpcmethod_SendIns2NodeID_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNodes_;
    const ::grpc::internal::RpcMethod rpcmethod_GetIns2NodeID_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckIfContinue_;
    const ::grpc::internal::RpcMethod rpcmethod_TriggerPrune_;
    const ::grpc::internal::RpcMethod rpcmethod_TriggerPrintScore_;
    const ::grpc::internal::RpcMethod rpcmethod_SendRange_;
    const ::grpc::internal::RpcMethod rpcmethod_TriggerCut_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRange_;
    const ::grpc::internal::RpcMethod rpcmethod_SendGH_;
    const ::grpc::internal::RpcMethod rpcmethod_SendDHPubKey_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDHPubKeys_;
    const ::grpc::internal::RpcMethod rpcmethod_SendNoises_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNoises_;
    const ::grpc::internal::RpcMethod rpcmethod_SendCutPoints_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCutPoints_;
    const ::grpc::internal::RpcMethod rpcmethod_TriggerBuildUsingGH_;
    const ::grpc::internal::RpcMethod rpcmethod_TriggerCalcTree_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRootNode_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSplitPoints_;
    const ::grpc::internal::RpcMethod rpcmethod_HCheckIfContinue_;
    const ::grpc::internal::RpcMethod rpcmethod_ScoreReduce_;
    const ::grpc::internal::RpcMethod rpcmethod_TriggerHomoInit_;
    const ::grpc::internal::RpcMethod rpcmethod_TriggerSAInit_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPaillier_;
    const ::grpc::internal::RpcMethod rpcmethod_SendHistogramsEnc_;
    const ::grpc::internal::RpcMethod rpcmethod_SendBatchedHistograms_;
    const ::grpc::internal::RpcMethod rpcmethod_SendHistogramBatches_;
    const ::grpc::internal::RpcMethod rpcmethod_SendHistFidBatches_;
    const ::grpc::internal::RpcMethod rpcmethod_GetIns2NodeIDBatches_;
    const ::grpc::internal::RpcMethod rpcmethod_SendIns2NodeIDBatches_;
    const ::grpc::internal::RpcMethod rpcmethod_GetGradientBatches_;
    const ::grpc::internal::RpcMethod rpcmethod_GetGradientBatchesEnc_;
    const ::grpc::internal::RpcMethod rpcmethod_SendNodeEnc_;
    const ::grpc::internal::RpcMethod rpcmethod_SendNodes_;
    const ::grpc::internal::RpcMethod rpcmethod_SendNodesEnc_;
    const ::grpc::internal::RpcMethod rpcmethod_SendHistogramBatchesEnc_;
    const ::grpc::internal::RpcMethod rpcmethod_StopServer_;
    const ::grpc::internal::RpcMethod rpcmethod_BeginBarrier_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Provides a value for each key request
    virtual ::grpc::Status TriggerUpdateGradients(::grpc::ServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response);
    virtual ::grpc::Status TriggerBuildInit(::grpc::ServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response);
    virtual ::grpc::Status GetGradients(::grpc::ServerContext* context, const ::fedtree::PID* request, ::grpc::ServerWriter< ::fedtree::GHPair>* writer);
    virtual ::grpc::Status SendDatasetInfo(::grpc::ServerContext* context, const ::fedtree::DatasetInfo* request, ::fedtree::PID* response);
    virtual ::grpc::Status SendHistograms(::grpc::ServerContext* context, ::grpc::ServerReader< ::fedtree::GHPair>* reader, ::fedtree::PID* response);
    virtual ::grpc::Status SendHistFid(::grpc::ServerContext* context, ::grpc::ServerReader< ::fedtree::FID>* reader, ::fedtree::PID* response);
    virtual ::grpc::Status TriggerAggregate(::grpc::ServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response);
    virtual ::grpc::Status GetBestInfo(::grpc::ServerContext* context, const ::fedtree::PID* request, ::grpc::ServerWriter< ::fedtree::BestInfo>* writer);
    virtual ::grpc::Status SendNode(::grpc::ServerContext* context, const ::fedtree::Node* request, ::fedtree::PID* response);
    virtual ::grpc::Status SendIns2NodeID(::grpc::ServerContext* context, ::grpc::ServerReader< ::fedtree::Ins2NodeID>* reader, ::fedtree::PID* response);
    virtual ::grpc::Status GetNodes(::grpc::ServerContext* context, const ::fedtree::PID* request, ::grpc::ServerWriter< ::fedtree::Node>* writer);
    virtual ::grpc::Status GetIns2NodeID(::grpc::ServerContext* context, const ::fedtree::PID* request, ::grpc::ServerWriter< ::fedtree::Ins2NodeID>* writer);
    virtual ::grpc::Status CheckIfContinue(::grpc::ServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response);
    virtual ::grpc::Status TriggerPrune(::grpc::ServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response);
    virtual ::grpc::Status TriggerPrintScore(::grpc::ServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response);
    virtual ::grpc::Status SendRange(::grpc::ServerContext* context, ::grpc::ServerReader< ::fedtree::GHPair>* reader, ::fedtree::PID* response);
    virtual ::grpc::Status TriggerCut(::grpc::ServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response);
    virtual ::grpc::Status GetRange(::grpc::ServerContext* context, const ::fedtree::PID* request, ::grpc::ServerWriter< ::fedtree::GHPair>* writer);
    virtual ::grpc::Status SendGH(::grpc::ServerContext* context, const ::fedtree::GHPair* request, ::fedtree::PID* response);
    virtual ::grpc::Status SendDHPubKey(::grpc::ServerContext* context, const ::fedtree::DHPublicKey* request, ::fedtree::PID* response);
    virtual ::grpc::Status GetDHPubKeys(::grpc::ServerContext* context, const ::fedtree::PID* request, ::grpc::ServerWriter< ::fedtree::DHPublicKeys>* writer);
    virtual ::grpc::Status SendNoises(::grpc::ServerContext* context, const ::fedtree::SANoises* request, ::fedtree::PID* response);
    virtual ::grpc::Status GetNoises(::grpc::ServerContext* context, const ::fedtree::PID* request, ::grpc::ServerWriter< ::fedtree::SANoises>* writer);
    virtual ::grpc::Status SendCutPoints(::grpc::ServerContext* context, const ::fedtree::CutPoints* request, ::fedtree::PID* response);
    virtual ::grpc::Status GetCutPoints(::grpc::ServerContext* context, const ::fedtree::PID* request, ::grpc::ServerWriter< ::fedtree::CutPoints>* writer);
    virtual ::grpc::Status TriggerBuildUsingGH(::grpc::ServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response);
    virtual ::grpc::Status TriggerCalcTree(::grpc::ServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response);
    virtual ::grpc::Status GetRootNode(::grpc::ServerContext* context, const ::fedtree::PID* request, ::fedtree::Node* response);
    virtual ::grpc::Status GetSplitPoints(::grpc::ServerContext* context, const ::fedtree::PID* request, ::grpc::ServerWriter< ::fedtree::SplitPoint>* writer);
    virtual ::grpc::Status HCheckIfContinue(::grpc::ServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response);
    virtual ::grpc::Status ScoreReduce(::grpc::ServerContext* context, const ::fedtree::Score* request, ::fedtree::Score* response);
    virtual ::grpc::Status TriggerHomoInit(::grpc::ServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response);
    virtual ::grpc::Status TriggerSAInit(::grpc::ServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response);
    virtual ::grpc::Status GetPaillier(::grpc::ServerContext* context, const ::fedtree::PID* request, ::fedtree::Paillier* response);
    virtual ::grpc::Status SendHistogramsEnc(::grpc::ServerContext* context, ::grpc::ServerReader< ::fedtree::GHPairEnc>* reader, ::fedtree::PID* response);
    virtual ::grpc::Status SendBatchedHistograms(::grpc::ServerContext* context, const ::fedtree::GHArray* request, ::fedtree::PID* response);
    virtual ::grpc::Status SendHistogramBatches(::grpc::ServerContext* context, ::grpc::ServerReader< ::fedtree::GHBatch>* reader, ::fedtree::PID* response);
    virtual ::grpc::Status SendHistFidBatches(::grpc::ServerContext* context, ::grpc::ServerReader< ::fedtree::FIDBatch>* reader, ::fedtree::PID* response);
    virtual ::grpc::Status GetIns2NodeIDBatches(::grpc::ServerContext* context, const ::fedtree::PID* request, ::grpc::ServerWriter< ::fedtree::Ins2NodeIDBatch>* writer);
    virtual ::grpc::Status SendIns2NodeIDBatches(::grpc::ServerContext* context, ::grpc::ServerReader< ::fedtree::Ins2NodeIDBatch>* reader, ::fedtree::PID* response);
    virtual ::grpc::Status GetGradientBatches(::grpc::ServerContext* context, const ::fedtree::PID* request, ::grpc::ServerWriter< ::fedtree::GHBatch>* writer);
    virtual ::grpc::Status GetGradientBatchesEnc(::grpc::ServerContext* context, const ::fedtree::PID* request, ::grpc::ServerWriter< ::fedtree::GHEncBatch>* writer);
    virtual ::grpc::Status SendNodeEnc(::grpc::ServerContext* context, const ::fedtree::NodeEnc* request, ::fedtree::PID* response);
    virtual ::grpc::Status SendNodes(::grpc::ServerContext* context, const ::fedtree::NodeArray* request, ::fedtree::PID* response);
    virtual ::grpc::Status SendNodesEnc(::grpc::ServerContext* context, const ::fedtree::NodeEncArray* request, ::fedtree::PID* response);
    virtual ::grpc::Status SendHistogramBatchesEnc(::grpc::ServerContext* context, ::grpc::ServerReader< ::fedtree::GHEncBatch>* reader, ::fedtree::PID* response);
    virtual ::grpc::Status StopServer(::grpc::ServerContext* context, const ::fedtree::PID* request, ::fedtree::Score* response);
    virtual ::grpc::Status BeginBarrier(::grpc::ServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_TriggerUpdateGradients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TriggerUpdateGradients() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_TriggerUpdateGradients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerUpdateGradients(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTriggerUpdateGradients(::grpc::ServerContext* context, ::fedtree::PID* request, ::grpc::ServerAsyncResponseWriter< ::fedtree::Ready>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TriggerBuildInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TriggerBuildInit() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_TriggerBuildInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerBuildInit(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTriggerBuildInit(::grpc::ServerContext* context, ::fedtree::PID* request, ::grpc::ServerAsyncResponseWriter< ::fedtree::Ready>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetGradients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetGradients() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetGradients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGradients(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::GHPair>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGradients(::grpc::ServerContext* context, ::fedtree::PID* request, ::grpc::ServerAsyncWriter< ::fedtree::GHPair>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendDatasetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendDatasetInfo() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SendDatasetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDatasetInfo(::grpc::ServerContext* /*context*/, const ::fedtree::DatasetInfo* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendDatasetInfo(::grpc::ServerContext* context, ::fedtree::DatasetInfo* request, ::grpc::ServerAsyncResponseWriter< ::fedtree::PID>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendHistograms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendHistograms() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SendHistograms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHistograms(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::GHPair>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendHistograms(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::fedtree::PID, ::fedtree::GHPair>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(4, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendHistFid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendHistFid() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SendHistFid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHistFid(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::FID>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendHistFid(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::fedtree::PID, ::fedtree::FID>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(5, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TriggerAggregate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TriggerAggregate() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_TriggerAggregate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerAggregate(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTriggerAggregate(::grpc::ServerContext* context, ::fedtree::PID* request, ::grpc::ServerAsyncResponseWriter< ::fedtree::Ready>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBestInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBestInfo() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetBestInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBestInfo(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::BestInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBestInfo(::grpc::ServerContext* context, ::fedtree::PID* request, ::grpc::ServerAsyncWriter< ::fedtree::BestInfo>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendNode() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_SendNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendNode(::grpc::ServerContext* /*context*/, const ::fedtree::Node* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendNode(::grpc::ServerContext* context, ::fedtree::Node* request, ::grpc::ServerAsyncResponseWriter< ::fedtree::PID>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendIns2NodeID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendIns2NodeID() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_SendIns2NodeID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendIns2NodeID(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::Ins2NodeID>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendIns2NodeID(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::fedtree::PID, ::fedtree::Ins2NodeID>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(9, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNodes() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodes(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::Node>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNodes(::grpc::ServerContext* context, ::fedtree::PID* request, ::grpc::ServerAsyncWriter< ::fedtree::Node>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(10, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetIns2NodeID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetIns2NodeID() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_GetIns2NodeID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIns2NodeID(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::Ins2NodeID>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIns2NodeID(::grpc::ServerContext* context, ::fedtree::PID* request, ::grpc::ServerAsyncWriter< ::fedtree::Ins2NodeID>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(11, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckIfContinue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CheckIfContinue() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_CheckIfContinue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckIfContinue(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckIfContinue(::grpc::ServerContext* context, ::fedtree::PID* request, ::grpc::ServerAsyncResponseWriter< ::fedtree::Ready>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TriggerPrune : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TriggerPrune() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_TriggerPrune() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerPrune(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTriggerPrune(::grpc::ServerContext* context, ::fedtree::PID* request, ::grpc::ServerAsyncResponseWriter< ::fedtree::Ready>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TriggerPrintScore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TriggerPrintScore() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_TriggerPrintScore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerPrintScore(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTriggerPrintScore(::grpc::ServerContext* context, ::fedtree::PID* request, ::grpc::ServerAsyncResponseWriter< ::fedtree::Ready>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendRange() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_SendRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendRange(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::GHPair>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendRange(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::fedtree::PID, ::fedtree::GHPair>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(15, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TriggerCut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TriggerCut() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_TriggerCut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerCut(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTriggerCut(::grpc::ServerContext* context, ::fedtree::PID* request, ::grpc::ServerAsyncResponseWriter< ::fedtree::Ready>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRange() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_GetRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRange(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::GHPair>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRange(::grpc::ServerContext* context, ::fedtree::PID* request, ::grpc::ServerAsyncWriter< ::fedtree::GHPair>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(17, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendGH : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendGH() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_SendGH() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendGH(::grpc::ServerContext* /*context*/, const ::fedtree::GHPair* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendGH(::grpc::ServerContext* context, ::fedtree::GHPair* request, ::grpc::ServerAsyncResponseWriter< ::fedtree::PID>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendDHPubKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendDHPubKey() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_SendDHPubKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDHPubKey(::grpc::ServerContext* /*context*/, const ::fedtree::DHPublicKey* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendDHPubKey(::grpc::ServerContext* context, ::fedtree::DHPublicKey* request, ::grpc::ServerAsyncResponseWriter< ::fedtree::PID>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDHPubKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDHPubKeys() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_GetDHPubKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDHPubKeys(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::DHPublicKeys>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDHPubKeys(::grpc::ServerContext* context, ::fedtree::PID* request, ::grpc::ServerAsyncWriter< ::fedtree::DHPublicKeys>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(20, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendNoises : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendNoises() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_SendNoises() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendNoises(::grpc::ServerContext* /*context*/, const ::fedtree::SANoises* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendNoises(::grpc::ServerContext* context, ::fedtree::SANoises* request, ::grpc::ServerAsyncResponseWriter< ::fedtree::PID>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNoises : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNoises() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_GetNoises() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNoises(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::SANoises>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNoises(::grpc::ServerContext* context, ::fedtree::PID* request, ::grpc::ServerAsyncWriter< ::fedtree::SANoises>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(22, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendCutPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendCutPoints() {
      ::grpc::Service::MarkMethodAsync(23);
    }
    ~WithAsyncMethod_SendCutPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendCutPoints(::grpc::ServerContext* /*context*/, const ::fedtree::CutPoints* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendCutPoints(::grpc::ServerContext* context, ::fedtree::CutPoints* request, ::grpc::ServerAsyncResponseWriter< ::fedtree::PID>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCutPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCutPoints() {
      ::grpc::Service::MarkMethodAsync(24);
    }
    ~WithAsyncMethod_GetCutPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCutPoints(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::CutPoints>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCutPoints(::grpc::ServerContext* context, ::fedtree::PID* request, ::grpc::ServerAsyncWriter< ::fedtree::CutPoints>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(24, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TriggerBuildUsingGH : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TriggerBuildUsingGH() {
      ::grpc::Service::MarkMethodAsync(25);
    }
    ~WithAsyncMethod_TriggerBuildUsingGH() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerBuildUsingGH(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTriggerBuildUsingGH(::grpc::ServerContext* context, ::fedtree::PID* request, ::grpc::ServerAsyncResponseWriter< ::fedtree::Ready>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TriggerCalcTree : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TriggerCalcTree() {
      ::grpc::Service::MarkMethodAsync(26);
    }
    ~WithAsyncMethod_TriggerCalcTree() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerCalcTree(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTriggerCalcTree(::grpc::ServerContext* context, ::fedtree::PID* request, ::grpc::ServerAsyncResponseWriter< ::fedtree::Ready>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRootNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRootNode() {
      ::grpc::Service::MarkMethodAsync(27);
    }
    ~WithAsyncMethod_GetRootNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRootNode(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Node* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRootNode(::grpc::ServerContext* context, ::fedtree::PID* request, ::grpc::ServerAsyncResponseWriter< ::fedtree::Node>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSplitPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSplitPoints() {
      ::grpc::Service::MarkMethodAsync(28);
    }
    ~WithAsyncMethod_GetSplitPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSplitPoints(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::SplitPoint>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSplitPoints(::grpc::ServerContext* context, ::fedtree::PID* request, ::grpc::ServerAsyncWriter< ::fedtree::SplitPoint>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(28, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HCheckIfContinue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HCheckIfContinue() {
      ::grpc::Service::MarkMethodAsync(29);
    }
    ~WithAsyncMethod_HCheckIfContinue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HCheckIfContinue(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHCheckIfContinue(::grpc::ServerContext* context, ::fedtree::PID* request, ::grpc::ServerAsyncResponseWriter< ::fedtree::Ready>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ScoreReduce : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ScoreReduce() {
      ::grpc::Service::MarkMethodAsync(30);
    }
    ~WithAsyncMethod_ScoreReduce() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScoreReduce(::grpc::ServerContext* /*context*/, const ::fedtree::Score* /*request*/, ::fedtree::Score* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScoreReduce(::grpc::ServerContext* context, ::fedtree::Score* request, ::grpc::ServerAsyncResponseWriter< ::fedtree::Score>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TriggerHomoInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TriggerHomoInit() {
      ::grpc::Service::MarkMethodAsync(31);
    }
    ~WithAsyncMethod_TriggerHomoInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerHomoInit(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTriggerHomoInit(::grpc::ServerContext* context, ::fedtree::PID* request, ::grpc::ServerAsyncResponseWriter< ::fedtree::Ready>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TriggerSAInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TriggerSAInit() {
      ::grpc::Service::MarkMethodAsync(32);
    }
    ~WithAsyncMethod_TriggerSAInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerSAInit(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTriggerSAInit(::grpc::ServerContext* context, ::fedtree::PID* request, ::grpc::ServerAsyncResponseWriter< ::fedtree::Ready>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(32, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPaillier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPaillier() {
      ::grpc::Service::MarkMethodAsync(33);
    }
    ~WithAsyncMethod_GetPaillier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPaillier(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Paillier* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPaillier(::grpc::ServerContext* context, ::fedtree::PID* request, ::grpc::ServerAsyncResponseWriter< ::fedtree::Paillier>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendHistogramsEnc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendHistogramsEnc() {
      ::grpc::Service::MarkMethodAsync(34);
    }
    ~WithAsyncMethod_SendHistogramsEnc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHistogramsEnc(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::GHPairEnc>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendHistogramsEnc(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::fedtree::PID, ::fedtree::GHPairEnc>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(34, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendBatchedHistograms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendBatchedHistograms() {
      ::grpc::Service::MarkMethodAsync(35);
    }
    ~WithAsyncMethod_SendBatchedHistograms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendBatchedHistograms(::grpc::ServerContext* /*context*/, const ::fedtree::GHArray* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendBatchedHistograms(::grpc::ServerContext* context, ::fedtree::GHArray* request, ::grpc::ServerAsyncResponseWriter< ::fedtree::PID>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(35, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendHistogramBatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendHistogramBatches() {
      ::grpc::Service::MarkMethodAsync(36);
    }
    ~WithAsyncMethod_SendHistogramBatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHistogramBatches(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::GHBatch>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendHistogramBatches(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::fedtree::PID, ::fedtree::GHBatch>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(36, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendHistFidBatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendHistFidBatches() {
      ::grpc::Service::MarkMethodAsync(37);
    }
    ~WithAsyncMethod_SendHistFidBatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHistFidBatches(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::FIDBatch>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendHistFidBatches(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::fedtree::PID, ::fedtree::FIDBatch>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(37, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetIns2NodeIDBatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetIns2NodeIDBatches() {
      ::grpc::Service::MarkMethodAsync(38);
    }
    ~WithAsyncMethod_GetIns2NodeIDBatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIns2NodeIDBatches(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::Ins2NodeIDBatch>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIns2NodeIDBatches(::grpc::ServerContext* context, ::fedtree::PID* request, ::grpc::ServerAsyncWriter< ::fedtree::Ins2NodeIDBatch>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(38, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendIns2NodeIDBatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendIns2NodeIDBatches() {
      ::grpc::Service::MarkMethodAsync(39);
    }
    ~WithAsyncMethod_SendIns2NodeIDBatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendIns2NodeIDBatches(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::Ins2NodeIDBatch>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendIns2NodeIDBatches(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::fedtree::PID, ::fedtree::Ins2NodeIDBatch>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(39, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetGradientBatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetGradientBatches() {
      ::grpc::Service::MarkMethodAsync(40);
    }
    ~WithAsyncMethod_GetGradientBatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGradientBatches(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::GHBatch>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGradientBatches(::grpc::ServerContext* context, ::fedtree::PID* request, ::grpc::ServerAsyncWriter< ::fedtree::GHBatch>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(40, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetGradientBatchesEnc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetGradientBatchesEnc() {
      ::grpc::Service::MarkMethodAsync(41);
    }
    ~WithAsyncMethod_GetGradientBatchesEnc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGradientBatchesEnc(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::GHEncBatch>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGradientBatchesEnc(::grpc::ServerContext* context, ::fedtree::PID* request, ::grpc::ServerAsyncWriter< ::fedtree::GHEncBatch>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(41, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendNodeEnc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendNodeEnc() {
      ::grpc::Service::MarkMethodAsync(42);
    }
    ~WithAsyncMethod_SendNodeEnc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendNodeEnc(::grpc::ServerContext* /*context*/, const ::fedtree::NodeEnc* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendNodeEnc(::grpc::ServerContext* context, ::fedtree::NodeEnc* request, ::grpc::ServerAsyncResponseWriter< ::fedtree::PID>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(42, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendNodes() {
      ::grpc::Service::MarkMethodAsync(43);
    }
    ~WithAsyncMethod_SendNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendNodes(::grpc::ServerContext* /*context*/, const ::fedtree::NodeArray* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendNodes(::grpc::ServerContext* context, ::fedtree::NodeArray* request, ::grpc::ServerAsyncResponseWriter< ::fedtree::PID>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(43, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendNodesEnc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendNodesEnc() {
      ::grpc::Service::MarkMethodAsync(44);
    }
    ~WithAsyncMethod_SendNodesEnc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendNodesEnc(::grpc::ServerContext* /*context*/, const ::fedtree::NodeEncArray* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendNodesEnc(::grpc::ServerContext* context, ::fedtree::NodeEncArray* request, ::grpc::ServerAsyncResponseWriter< ::fedtree::PID>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(44, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendHistogramBatchesEnc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendHistogramBatchesEnc() {
      ::grpc::Service::MarkMethodAsync(45);
    }
    ~WithAsyncMethod_SendHistogramBatchesEnc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHistogramBatchesEnc(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::GHEncBatch>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendHistogramBatchesEnc(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::fedtree::PID, ::fedtree::GHEncBatch>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(45, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StopServer() {
      ::grpc::Service::MarkMethodAsync(46);
    }
    ~WithAsyncMethod_StopServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopServer(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Score* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopServer(::grpc::ServerContext* context, ::fedtree::PID* request, ::grpc::ServerAsyncResponseWriter< ::fedtree::Score>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(46, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BeginBarrier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BeginBarrier() {
      ::grpc::Service::MarkMethodAsync(47);
    }
    ~WithAsyncMethod_BeginBarrier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginBarrier(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBeginBarrier(::grpc::ServerContext* context, ::fedtree::PID* request, ::grpc::ServerAsyncResponseWriter< ::fedtree::Ready>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(47, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_TriggerUpdateGradients<WithAsyncMethod_TriggerBuildInit<WithAsyncMethod_GetGradients<WithAsyncMethod_SendDatasetInfo<WithAsyncMethod_SendHistograms<WithAsyncMethod_SendHistFid<WithAsyncMethod_TriggerAggregate<WithAsyncMethod_GetBestInfo<WithAsyncMethod_SendNode<WithAsyncMethod_SendIns2NodeID<WithAsyncMethod_GetNodes<WithAsyncMethod_GetIns2NodeID<WithAsyncMethod_CheckIfContinue<WithAsyncMethod_TriggerPrune<WithAsyncMethod_TriggerPrintScore<WithAsyncMethod_SendRange<WithAsyncMethod_TriggerCut<WithAsyncMethod_GetRange<WithAsyncMethod_SendGH<WithAsyncMethod_SendDHPubKey<WithAsyncMethod_GetDHPubKeys<WithAsyncMethod_SendNoises<WithAsyncMethod_GetNoises<WithAsyncMethod_SendCutPoints<WithAsyncMethod_GetCutPoints<WithAsyncMethod_TriggerBuildUsingGH<WithAsyncMethod_TriggerCalcTree<WithAsyncMethod_GetRootNode<WithAsyncMethod_GetSplitPoints<WithAsyncMethod_HCheckIfContinue<WithAsyncMethod_ScoreReduce<WithAsyncMethod_TriggerHomoInit<WithAsyncMethod_TriggerSAInit<WithAsyncMethod_GetPaillier<WithAsyncMethod_SendHistogramsEnc<WithAsyncMethod_SendBatchedHistograms<WithAsyncMethod_SendHistogramBatches<WithAsyncMethod_SendHistFidBatches<WithAsyncMethod_GetIns2NodeIDBatches<WithAsyncMethod_SendIns2NodeIDBatches<WithAsyncMethod_GetGradientBatches<WithAsyncMethod_GetGradientBatchesEnc<WithAsyncMethod_SendNodeEnc<WithAsyncMethod_SendNodes<WithAsyncMethod_SendNodesEnc<WithAsyncMethod_SendHistogramBatchesEnc<WithAsyncMethod_StopServer<WithAsyncMethod_BeginBarrier<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_TriggerUpdateGradients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TriggerUpdateGradients() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::fedtree::PID, ::fedtree::Ready>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response) { return this->TriggerUpdateGradients(context, request, response); }));}
    void SetMessageAllocatorFor_TriggerUpdateGradients(
        ::grpc::MessageAllocator< ::fedtree::PID, ::fedtree::Ready>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fedtree::PID, ::fedtree::Ready>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TriggerUpdateGradients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerUpdateGradients(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TriggerUpdateGradients(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TriggerBuildInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TriggerBuildInit() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::fedtree::PID, ::fedtree::Ready>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response) { return this->TriggerBuildInit(context, request, response); }));}
    void SetMessageAllocatorFor_TriggerBuildInit(
        ::grpc::MessageAllocator< ::fedtree::PID, ::fedtree::Ready>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fedtree::PID, ::fedtree::Ready>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TriggerBuildInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerBuildInit(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TriggerBuildInit(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetGradients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetGradients() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::fedtree::PID, ::fedtree::GHPair>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::PID* request) { return this->GetGradients(context, request); }));
    }
    ~WithCallbackMethod_GetGradients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGradients(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::GHPair>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::fedtree::GHPair>* GetGradients(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::PID* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendDatasetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendDatasetInfo() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::fedtree::DatasetInfo, ::fedtree::PID>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::DatasetInfo* request, ::fedtree::PID* response) { return this->SendDatasetInfo(context, request, response); }));}
    void SetMessageAllocatorFor_SendDatasetInfo(
        ::grpc::MessageAllocator< ::fedtree::DatasetInfo, ::fedtree::PID>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fedtree::DatasetInfo, ::fedtree::PID>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendDatasetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDatasetInfo(::grpc::ServerContext* /*context*/, const ::fedtree::DatasetInfo* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendDatasetInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::DatasetInfo* /*request*/, ::fedtree::PID* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendHistograms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendHistograms() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackClientStreamingHandler< ::fedtree::GHPair, ::fedtree::PID>(
            [this](
                   ::grpc::CallbackServerContext* context, ::fedtree::PID* response) { return this->SendHistograms(context, response); }));
    }
    ~WithCallbackMethod_SendHistograms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHistograms(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::GHPair>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::fedtree::GHPair>* SendHistograms(
      ::grpc::CallbackServerContext* /*context*/, ::fedtree::PID* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendHistFid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendHistFid() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackClientStreamingHandler< ::fedtree::FID, ::fedtree::PID>(
            [this](
                   ::grpc::CallbackServerContext* context, ::fedtree::PID* response) { return this->SendHistFid(context, response); }));
    }
    ~WithCallbackMethod_SendHistFid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHistFid(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::FID>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::fedtree::FID>* SendHistFid(
      ::grpc::CallbackServerContext* /*context*/, ::fedtree::PID* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TriggerAggregate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TriggerAggregate() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::fedtree::PID, ::fedtree::Ready>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response) { return this->TriggerAggregate(context, request, response); }));}
    void SetMessageAllocatorFor_TriggerAggregate(
        ::grpc::MessageAllocator< ::fedtree::PID, ::fedtree::Ready>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fedtree::PID, ::fedtree::Ready>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TriggerAggregate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerAggregate(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TriggerAggregate(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetBestInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBestInfo() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackServerStreamingHandler< ::fedtree::PID, ::fedtree::BestInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::PID* request) { return this->GetBestInfo(context, request); }));
    }
    ~WithCallbackMethod_GetBestInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBestInfo(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::BestInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::fedtree::BestInfo>* GetBestInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::PID* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendNode() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::fedtree::Node, ::fedtree::PID>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::Node* request, ::fedtree::PID* response) { return this->SendNode(context, request, response); }));}
    void SetMessageAllocatorFor_SendNode(
        ::grpc::MessageAllocator< ::fedtree::Node, ::fedtree::PID>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fedtree::Node, ::fedtree::PID>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendNode(::grpc::ServerContext* /*context*/, const ::fedtree::Node* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendNode(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::Node* /*request*/, ::fedtree::PID* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendIns2NodeID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendIns2NodeID() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackClientStreamingHandler< ::fedtree::Ins2NodeID, ::fedtree::PID>(
            [this](
                   ::grpc::CallbackServerContext* context, ::fedtree::PID* response) { return this->SendIns2NodeID(context, response); }));
    }
    ~WithCallbackMethod_SendIns2NodeID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendIns2NodeID(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::Ins2NodeID>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::fedtree::Ins2NodeID>* SendIns2NodeID(
      ::grpc::CallbackServerContext* /*context*/, ::fedtree::PID* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNodes() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackServerStreamingHandler< ::fedtree::PID, ::fedtree::Node>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::PID* request) { return this->GetNodes(context, request); }));
    }
    ~WithCallbackMethod_GetNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodes(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::Node>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::fedtree::Node>* GetNodes(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::PID* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetIns2NodeID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetIns2NodeID() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackServerStreamingHandler< ::fedtree::PID, ::fedtree::Ins2NodeID>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::PID* request) { return this->GetIns2NodeID(context, request); }));
    }
    ~WithCallbackMethod_GetIns2NodeID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIns2NodeID(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::Ins2NodeID>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::fedtree::Ins2NodeID>* GetIns2NodeID(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::PID* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CheckIfContinue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CheckIfContinue() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::fedtree::PID, ::fedtree::Ready>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response) { return this->CheckIfContinue(context, request, response); }));}
    void SetMessageAllocatorFor_CheckIfContinue(
        ::grpc::MessageAllocator< ::fedtree::PID, ::fedtree::Ready>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fedtree::PID, ::fedtree::Ready>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CheckIfContinue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckIfContinue(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckIfContinue(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TriggerPrune : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TriggerPrune() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::fedtree::PID, ::fedtree::Ready>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response) { return this->TriggerPrune(context, request, response); }));}
    void SetMessageAllocatorFor_TriggerPrune(
        ::grpc::MessageAllocator< ::fedtree::PID, ::fedtree::Ready>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fedtree::PID, ::fedtree::Ready>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TriggerPrune() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerPrune(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TriggerPrune(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TriggerPrintScore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TriggerPrintScore() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::fedtree::PID, ::fedtree::Ready>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response) { return this->TriggerPrintScore(context, request, response); }));}
    void SetMessageAllocatorFor_TriggerPrintScore(
        ::grpc::MessageAllocator< ::fedtree::PID, ::fedtree::Ready>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fedtree::PID, ::fedtree::Ready>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TriggerPrintScore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerPrintScore(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TriggerPrintScore(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendRange() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackClientStreamingHandler< ::fedtree::GHPair, ::fedtree::PID>(
            [this](
                   ::grpc::CallbackServerContext* context, ::fedtree::PID* response) { return this->SendRange(context, response); }));
    }
    ~WithCallbackMethod_SendRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendRange(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::GHPair>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::fedtree::GHPair>* SendRange(
      ::grpc::CallbackServerContext* /*context*/, ::fedtree::PID* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TriggerCut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TriggerCut() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::fedtree::PID, ::fedtree::Ready>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response) { return this->TriggerCut(context, request, response); }));}
    void SetMessageAllocatorFor_TriggerCut(
        ::grpc::MessageAllocator< ::fedtree::PID, ::fedtree::Ready>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fedtree::PID, ::fedtree::Ready>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TriggerCut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerCut(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TriggerCut(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRange() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackServerStreamingHandler< ::fedtree::PID, ::fedtree::GHPair>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::PID* request) { return this->GetRange(context, request); }));
    }
    ~WithCallbackMethod_GetRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRange(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::GHPair>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::fedtree::GHPair>* GetRange(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::PID* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendGH : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendGH() {
      ::grpc::Service::MarkMethodCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::fedtree::GHPair, ::fedtree::PID>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::GHPair* request, ::fedtree::PID* response) { return this->SendGH(context, request, response); }));}
    void SetMessageAllocatorFor_SendGH(
        ::grpc::MessageAllocator< ::fedtree::GHPair, ::fedtree::PID>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fedtree::GHPair, ::fedtree::PID>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendGH() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendGH(::grpc::ServerContext* /*context*/, const ::fedtree::GHPair* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendGH(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::GHPair* /*request*/, ::fedtree::PID* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendDHPubKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendDHPubKey() {
      ::grpc::Service::MarkMethodCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::fedtree::DHPublicKey, ::fedtree::PID>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::DHPublicKey* request, ::fedtree::PID* response) { return this->SendDHPubKey(context, request, response); }));}
    void SetMessageAllocatorFor_SendDHPubKey(
        ::grpc::MessageAllocator< ::fedtree::DHPublicKey, ::fedtree::PID>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fedtree::DHPublicKey, ::fedtree::PID>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendDHPubKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDHPubKey(::grpc::ServerContext* /*context*/, const ::fedtree::DHPublicKey* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendDHPubKey(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::DHPublicKey* /*request*/, ::fedtree::PID* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDHPubKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDHPubKeys() {
      ::grpc::Service::MarkMethodCallback(20,
          new ::grpc::internal::CallbackServerStreamingHandler< ::fedtree::PID, ::fedtree::DHPublicKeys>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::PID* request) { return this->GetDHPubKeys(context, request); }));
    }
    ~WithCallbackMethod_GetDHPubKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDHPubKeys(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::DHPublicKeys>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::fedtree::DHPublicKeys>* GetDHPubKeys(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::PID* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendNoises : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendNoises() {
      ::grpc::Service::MarkMethodCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::fedtree::SANoises, ::fedtree::PID>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::SANoises* request, ::fedtree::PID* response) { return this->SendNoises(context, request, response); }));}
    void SetMessageAllocatorFor_SendNoises(
        ::grpc::MessageAllocator< ::fedtree::SANoises, ::fedtree::PID>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(21);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fedtree::SANoises, ::fedtree::PID>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendNoises() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendNoises(::grpc::ServerContext* /*context*/, const ::fedtree::SANoises* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendNoises(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::SANoises* /*request*/, ::fedtree::PID* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNoises : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNoises() {
      ::grpc::Service::MarkMethodCallback(22,
          new ::grpc::internal::CallbackServerStreamingHandler< ::fedtree::PID, ::fedtree::SANoises>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::PID* request) { return this->GetNoises(context, request); }));
    }
    ~WithCallbackMethod_GetNoises() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNoises(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::SANoises>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::fedtree::SANoises>* GetNoises(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::PID* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendCutPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendCutPoints() {
      ::grpc::Service::MarkMethodCallback(23,
          new ::grpc::internal::CallbackUnaryHandler< ::fedtree::CutPoints, ::fedtree::PID>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::CutPoints* request, ::fedtree::PID* response) { return this->SendCutPoints(context, request, response); }));}
    void SetMessageAllocatorFor_SendCutPoints(
        ::grpc::MessageAllocator< ::fedtree::CutPoints, ::fedtree::PID>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(23);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fedtree::CutPoints, ::fedtree::PID>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendCutPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendCutPoints(::grpc::ServerContext* /*context*/, const ::fedtree::CutPoints* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendCutPoints(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::CutPoints* /*request*/, ::fedtree::PID* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCutPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCutPoints() {
      ::grpc::Service::MarkMethodCallback(24,
          new ::grpc::internal::CallbackServerStreamingHandler< ::fedtree::PID, ::fedtree::CutPoints>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::PID* request) { return this->GetCutPoints(context, request); }));
    }
    ~WithCallbackMethod_GetCutPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCutPoints(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::CutPoints>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::fedtree::CutPoints>* GetCutPoints(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::PID* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TriggerBuildUsingGH : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TriggerBuildUsingGH() {
      ::grpc::Service::MarkMethodCallback(25,
          new ::grpc::internal::CallbackUnaryHandler< ::fedtree::PID, ::fedtree::Ready>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response) { return this->TriggerBuildUsingGH(context, request, response); }));}
    void SetMessageAllocatorFor_TriggerBuildUsingGH(
        ::grpc::MessageAllocator< ::fedtree::PID, ::fedtree::Ready>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(25);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fedtree::PID, ::fedtree::Ready>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TriggerBuildUsingGH() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerBuildUsingGH(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TriggerBuildUsingGH(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TriggerCalcTree : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TriggerCalcTree() {
      ::grpc::Service::MarkMethodCallback(26,
          new ::grpc::internal::CallbackUnaryHandler< ::fedtree::PID, ::fedtree::Ready>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response) { return this->TriggerCalcTree(context, request, response); }));}
    void SetMessageAllocatorFor_TriggerCalcTree(
        ::grpc::MessageAllocator< ::fedtree::PID, ::fedtree::Ready>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(26);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fedtree::PID, ::fedtree::Ready>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TriggerCalcTree() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerCalcTree(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TriggerCalcTree(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetRootNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRootNode() {
      ::grpc::Service::MarkMethodCallback(27,
          new ::grpc::internal::CallbackUnaryHandler< ::fedtree::PID, ::fedtree::Node>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::PID* request, ::fedtree::Node* response) { return this->GetRootNode(context, request, response); }));}
    void SetMessageAllocatorFor_GetRootNode(
        ::grpc::MessageAllocator< ::fedtree::PID, ::fedtree::Node>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(27);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fedtree::PID, ::fedtree::Node>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetRootNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRootNode(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Node* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRootNode(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Node* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSplitPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSplitPoints() {
      ::grpc::Service::MarkMethodCallback(28,
          new ::grpc::internal::CallbackServerStreamingHandler< ::fedtree::PID, ::fedtree::SplitPoint>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::PID* request) { return this->GetSplitPoints(context, request); }));
    }
    ~WithCallbackMethod_GetSplitPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSplitPoints(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::SplitPoint>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::fedtree::SplitPoint>* GetSplitPoints(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::PID* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HCheckIfContinue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HCheckIfContinue() {
      ::grpc::Service::MarkMethodCallback(29,
          new ::grpc::internal::CallbackUnaryHandler< ::fedtree::PID, ::fedtree::Ready>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response) { return this->HCheckIfContinue(context, request, response); }));}
    void SetMessageAllocatorFor_HCheckIfContinue(
        ::grpc::MessageAllocator< ::fedtree::PID, ::fedtree::Ready>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(29);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fedtree::PID, ::fedtree::Ready>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HCheckIfContinue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HCheckIfContinue(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HCheckIfContinue(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ScoreReduce : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ScoreReduce() {
      ::grpc::Service::MarkMethodCallback(30,
          new ::grpc::internal::CallbackUnaryHandler< ::fedtree::Score, ::fedtree::Score>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::Score* request, ::fedtree::Score* response) { return this->ScoreReduce(context, request, response); }));}
    void SetMessageAllocatorFor_ScoreReduce(
        ::grpc::MessageAllocator< ::fedtree::Score, ::fedtree::Score>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(30);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fedtree::Score, ::fedtree::Score>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ScoreReduce() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScoreReduce(::grpc::ServerContext* /*context*/, const ::fedtree::Score* /*request*/, ::fedtree::Score* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ScoreReduce(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::Score* /*request*/, ::fedtree::Score* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TriggerHomoInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TriggerHomoInit() {
      ::grpc::Service::MarkMethodCallback(31,
          new ::grpc::internal::CallbackUnaryHandler< ::fedtree::PID, ::fedtree::Ready>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response) { return this->TriggerHomoInit(context, request, response); }));}
    void SetMessageAllocatorFor_TriggerHomoInit(
        ::grpc::MessageAllocator< ::fedtree::PID, ::fedtree::Ready>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(31);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fedtree::PID, ::fedtree::Ready>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TriggerHomoInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerHomoInit(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TriggerHomoInit(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TriggerSAInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TriggerSAInit() {
      ::grpc::Service::MarkMethodCallback(32,
          new ::grpc::internal::CallbackUnaryHandler< ::fedtree::PID, ::fedtree::Ready>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response) { return this->TriggerSAInit(context, request, response); }));}
    void SetMessageAllocatorFor_TriggerSAInit(
        ::grpc::MessageAllocator< ::fedtree::PID, ::fedtree::Ready>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(32);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fedtree::PID, ::fedtree::Ready>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TriggerSAInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerSAInit(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TriggerSAInit(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPaillier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPaillier() {
      ::grpc::Service::MarkMethodCallback(33,
          new ::grpc::internal::CallbackUnaryHandler< ::fedtree::PID, ::fedtree::Paillier>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::PID* request, ::fedtree::Paillier* response) { return this->GetPaillier(context, request, response); }));}
    void SetMessageAllocatorFor_GetPaillier(
        ::grpc::MessageAllocator< ::fedtree::PID, ::fedtree::Paillier>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(33);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fedtree::PID, ::fedtree::Paillier>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPaillier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPaillier(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Paillier* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPaillier(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Paillier* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendHistogramsEnc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendHistogramsEnc() {
      ::grpc::Service::MarkMethodCallback(34,
          new ::grpc::internal::CallbackClientStreamingHandler< ::fedtree::GHPairEnc, ::fedtree::PID>(
            [this](
                   ::grpc::CallbackServerContext* context, ::fedtree::PID* response) { return this->SendHistogramsEnc(context, response); }));
    }
    ~WithCallbackMethod_SendHistogramsEnc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHistogramsEnc(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::GHPairEnc>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::fedtree::GHPairEnc>* SendHistogramsEnc(
      ::grpc::CallbackServerContext* /*context*/, ::fedtree::PID* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendBatchedHistograms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendBatchedHistograms() {
      ::grpc::Service::MarkMethodCallback(35,
          new ::grpc::internal::CallbackUnaryHandler< ::fedtree::GHArray, ::fedtree::PID>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::GHArray* request, ::fedtree::PID* response) { return this->SendBatchedHistograms(context, request, response); }));}
    void SetMessageAllocatorFor_SendBatchedHistograms(
        ::grpc::MessageAllocator< ::fedtree::GHArray, ::fedtree::PID>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(35);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fedtree::GHArray, ::fedtree::PID>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendBatchedHistograms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendBatchedHistograms(::grpc::ServerContext* /*context*/, const ::fedtree::GHArray* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendBatchedHistograms(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::GHArray* /*request*/, ::fedtree::PID* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendHistogramBatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendHistogramBatches() {
      ::grpc::Service::MarkMethodCallback(36,
          new ::grpc::internal::CallbackClientStreamingHandler< ::fedtree::GHBatch, ::fedtree::PID>(
            [this](
                   ::grpc::CallbackServerContext* context, ::fedtree::PID* response) { return this->SendHistogramBatches(context, response); }));
    }
    ~WithCallbackMethod_SendHistogramBatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHistogramBatches(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::GHBatch>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::fedtree::GHBatch>* SendHistogramBatches(
      ::grpc::CallbackServerContext* /*context*/, ::fedtree::PID* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendHistFidBatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendHistFidBatches() {
      ::grpc::Service::MarkMethodCallback(37,
          new ::grpc::internal::CallbackClientStreamingHandler< ::fedtree::FIDBatch, ::fedtree::PID>(
            [this](
                   ::grpc::CallbackServerContext* context, ::fedtree::PID* response) { return this->SendHistFidBatches(context, response); }));
    }
    ~WithCallbackMethod_SendHistFidBatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHistFidBatches(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::FIDBatch>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::fedtree::FIDBatch>* SendHistFidBatches(
      ::grpc::CallbackServerContext* /*context*/, ::fedtree::PID* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetIns2NodeIDBatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetIns2NodeIDBatches() {
      ::grpc::Service::MarkMethodCallback(38,
          new ::grpc::internal::CallbackServerStreamingHandler< ::fedtree::PID, ::fedtree::Ins2NodeIDBatch>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::PID* request) { return this->GetIns2NodeIDBatches(context, request); }));
    }
    ~WithCallbackMethod_GetIns2NodeIDBatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIns2NodeIDBatches(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::Ins2NodeIDBatch>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::fedtree::Ins2NodeIDBatch>* GetIns2NodeIDBatches(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::PID* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendIns2NodeIDBatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendIns2NodeIDBatches() {
      ::grpc::Service::MarkMethodCallback(39,
          new ::grpc::internal::CallbackClientStreamingHandler< ::fedtree::Ins2NodeIDBatch, ::fedtree::PID>(
            [this](
                   ::grpc::CallbackServerContext* context, ::fedtree::PID* response) { return this->SendIns2NodeIDBatches(context, response); }));
    }
    ~WithCallbackMethod_SendIns2NodeIDBatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendIns2NodeIDBatches(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::Ins2NodeIDBatch>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::fedtree::Ins2NodeIDBatch>* SendIns2NodeIDBatches(
      ::grpc::CallbackServerContext* /*context*/, ::fedtree::PID* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetGradientBatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetGradientBatches() {
      ::grpc::Service::MarkMethodCallback(40,
          new ::grpc::internal::CallbackServerStreamingHandler< ::fedtree::PID, ::fedtree::GHBatch>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::PID* request) { return this->GetGradientBatches(context, request); }));
    }
    ~WithCallbackMethod_GetGradientBatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGradientBatches(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::GHBatch>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::fedtree::GHBatch>* GetGradientBatches(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::PID* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetGradientBatchesEnc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetGradientBatchesEnc() {
      ::grpc::Service::MarkMethodCallback(41,
          new ::grpc::internal::CallbackServerStreamingHandler< ::fedtree::PID, ::fedtree::GHEncBatch>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::PID* request) { return this->GetGradientBatchesEnc(context, request); }));
    }
    ~WithCallbackMethod_GetGradientBatchesEnc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGradientBatchesEnc(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::GHEncBatch>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::fedtree::GHEncBatch>* GetGradientBatchesEnc(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::PID* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendNodeEnc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendNodeEnc() {
      ::grpc::Service::MarkMethodCallback(42,
          new ::grpc::internal::CallbackUnaryHandler< ::fedtree::NodeEnc, ::fedtree::PID>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::NodeEnc* request, ::fedtree::PID* response) { return this->SendNodeEnc(context, request, response); }));}
    void SetMessageAllocatorFor_SendNodeEnc(
        ::grpc::MessageAllocator< ::fedtree::NodeEnc, ::fedtree::PID>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(42);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fedtree::NodeEnc, ::fedtree::PID>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendNodeEnc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendNodeEnc(::grpc::ServerContext* /*context*/, const ::fedtree::NodeEnc* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendNodeEnc(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::NodeEnc* /*request*/, ::fedtree::PID* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendNodes() {
      ::grpc::Service::MarkMethodCallback(43,
          new ::grpc::internal::CallbackUnaryHandler< ::fedtree::NodeArray, ::fedtree::PID>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::NodeArray* request, ::fedtree::PID* response) { return this->SendNodes(context, request, response); }));}
    void SetMessageAllocatorFor_SendNodes(
        ::grpc::MessageAllocator< ::fedtree::NodeArray, ::fedtree::PID>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(43);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fedtree::NodeArray, ::fedtree::PID>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendNodes(::grpc::ServerContext* /*context*/, const ::fedtree::NodeArray* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendNodes(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::NodeArray* /*request*/, ::fedtree::PID* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendNodesEnc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendNodesEnc() {
      ::grpc::Service::MarkMethodCallback(44,
          new ::grpc::internal::CallbackUnaryHandler< ::fedtree::NodeEncArray, ::fedtree::PID>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::NodeEncArray* request, ::fedtree::PID* response) { return this->SendNodesEnc(context, request, response); }));}
    void SetMessageAllocatorFor_SendNodesEnc(
        ::grpc::MessageAllocator< ::fedtree::NodeEncArray, ::fedtree::PID>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(44);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fedtree::NodeEncArray, ::fedtree::PID>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendNodesEnc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendNodesEnc(::grpc::ServerContext* /*context*/, const ::fedtree::NodeEncArray* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendNodesEnc(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::NodeEncArray* /*request*/, ::fedtree::PID* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendHistogramBatchesEnc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendHistogramBatchesEnc() {
      ::grpc::Service::MarkMethodCallback(45,
          new ::grpc::internal::CallbackClientStreamingHandler< ::fedtree::GHEncBatch, ::fedtree::PID>(
            [this](
                   ::grpc::CallbackServerContext* context, ::fedtree::PID* response) { return this->SendHistogramBatchesEnc(context, response); }));
    }
    ~WithCallbackMethod_SendHistogramBatchesEnc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHistogramBatchesEnc(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::GHEncBatch>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::fedtree::GHEncBatch>* SendHistogramBatchesEnc(
      ::grpc::CallbackServerContext* /*context*/, ::fedtree::PID* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StopServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StopServer() {
      ::grpc::Service::MarkMethodCallback(46,
          new ::grpc::internal::CallbackUnaryHandler< ::fedtree::PID, ::fedtree::Score>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::PID* request, ::fedtree::Score* response) { return this->StopServer(context, request, response); }));}
    void SetMessageAllocatorFor_StopServer(
        ::grpc::MessageAllocator< ::fedtree::PID, ::fedtree::Score>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(46);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fedtree::PID, ::fedtree::Score>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StopServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopServer(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Score* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StopServer(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Score* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BeginBarrier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BeginBarrier() {
      ::grpc::Service::MarkMethodCallback(47,
          new ::grpc::internal::CallbackUnaryHandler< ::fedtree::PID, ::fedtree::Ready>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fedtree::PID* request, ::fedtree::Ready* response) { return this->BeginBarrier(context, request, response); }));}
    void SetMessageAllocatorFor_BeginBarrier(
        ::grpc::MessageAllocator< ::fedtree::PID, ::fedtree::Ready>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(47);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fedtree::PID, ::fedtree::Ready>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_BeginBarrier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginBarrier(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BeginBarrier(
      ::grpc::CallbackServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_TriggerUpdateGradients<WithCallbackMethod_TriggerBuildInit<WithCallbackMethod_GetGradients<WithCallbackMethod_SendDatasetInfo<WithCallbackMethod_SendHistograms<WithCallbackMethod_SendHistFid<WithCallbackMethod_TriggerAggregate<WithCallbackMethod_GetBestInfo<WithCallbackMethod_SendNode<WithCallbackMethod_SendIns2NodeID<WithCallbackMethod_GetNodes<WithCallbackMethod_GetIns2NodeID<WithCallbackMethod_CheckIfContinue<WithCallbackMethod_TriggerPrune<WithCallbackMethod_TriggerPrintScore<WithCallbackMethod_SendRange<WithCallbackMethod_TriggerCut<WithCallbackMethod_GetRange<WithCallbackMethod_SendGH<WithCallbackMethod_SendDHPubKey<WithCallbackMethod_GetDHPubKeys<WithCallbackMethod_SendNoises<WithCallbackMethod_GetNoises<WithCallbackMethod_SendCutPoints<WithCallbackMethod_GetCutPoints<WithCallbackMethod_TriggerBuildUsingGH<WithCallbackMethod_TriggerCalcTree<WithCallbackMethod_GetRootNode<WithCallbackMethod_GetSplitPoints<WithCallbackMethod_HCheckIfContinue<WithCallbackMethod_ScoreReduce<WithCallbackMethod_TriggerHomoInit<WithCallbackMethod_TriggerSAInit<WithCallbackMethod_GetPaillier<WithCallbackMethod_SendHistogramsEnc<WithCallbackMethod_SendBatchedHistograms<WithCallbackMethod_SendHistogramBatches<WithCallbackMethod_SendHistFidBatches<WithCallbackMethod_GetIns2NodeIDBatches<WithCallbackMethod_SendIns2NodeIDBatches<WithCallbackMethod_GetGradientBatches<WithCallbackMethod_GetGradientBatchesEnc<WithCallbackMethod_SendNodeEnc<WithCallbackMethod_SendNodes<WithCallbackMethod_SendNodesEnc<WithCallbackMethod_SendHistogramBatchesEnc<WithCallbackMethod_StopServer<WithCallbackMethod_BeginBarrier<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_TriggerUpdateGradients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TriggerUpdateGradients() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_TriggerUpdateGradients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerUpdateGradients(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TriggerBuildInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TriggerBuildInit() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_TriggerBuildInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerBuildInit(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetGradients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetGradients() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetGradients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGradients(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::GHPair>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendDatasetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendDatasetInfo() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SendDatasetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDatasetInfo(::grpc::ServerContext* /*context*/, const ::fedtree::DatasetInfo* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendHistograms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendHistograms() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SendHistograms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHistograms(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::GHPair>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendHistFid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendHistFid() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SendHistFid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHistFid(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::FID>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TriggerAggregate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TriggerAggregate() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_TriggerAggregate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerAggregate(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBestInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBestInfo() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetBestInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBestInfo(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::BestInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendNode() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_SendNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendNode(::grpc::ServerContext* /*context*/, const ::fedtree::Node* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendIns2NodeID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendIns2NodeID() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_SendIns2NodeID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendIns2NodeID(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::Ins2NodeID>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNodes() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodes(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::Node>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetIns2NodeID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetIns2NodeID() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_GetIns2NodeID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIns2NodeID(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::Ins2NodeID>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckIfContinue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CheckIfContinue() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_CheckIfContinue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckIfContinue(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TriggerPrune : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TriggerPrune() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_TriggerPrune() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerPrune(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TriggerPrintScore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TriggerPrintScore() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_TriggerPrintScore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerPrintScore(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendRange() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_SendRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendRange(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::GHPair>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TriggerCut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TriggerCut() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_TriggerCut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerCut(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRange() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_GetRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRange(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::GHPair>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendGH : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendGH() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_SendGH() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendGH(::grpc::ServerContext* /*context*/, const ::fedtree::GHPair* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendDHPubKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendDHPubKey() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_SendDHPubKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDHPubKey(::grpc::ServerContext* /*context*/, const ::fedtree::DHPublicKey* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDHPubKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDHPubKeys() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_GetDHPubKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDHPubKeys(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::DHPublicKeys>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendNoises : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendNoises() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_SendNoises() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendNoises(::grpc::ServerContext* /*context*/, const ::fedtree::SANoises* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNoises : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNoises() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_GetNoises() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNoises(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::SANoises>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendCutPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendCutPoints() {
      ::grpc::Service::MarkMethodGeneric(23);
    }
    ~WithGenericMethod_SendCutPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendCutPoints(::grpc::ServerContext* /*context*/, const ::fedtree::CutPoints* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCutPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCutPoints() {
      ::grpc::Service::MarkMethodGeneric(24);
    }
    ~WithGenericMethod_GetCutPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCutPoints(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::CutPoints>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TriggerBuildUsingGH : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TriggerBuildUsingGH() {
      ::grpc::Service::MarkMethodGeneric(25);
    }
    ~WithGenericMethod_TriggerBuildUsingGH() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerBuildUsingGH(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TriggerCalcTree : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TriggerCalcTree() {
      ::grpc::Service::MarkMethodGeneric(26);
    }
    ~WithGenericMethod_TriggerCalcTree() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerCalcTree(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRootNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRootNode() {
      ::grpc::Service::MarkMethodGeneric(27);
    }
    ~WithGenericMethod_GetRootNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRootNode(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Node* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSplitPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSplitPoints() {
      ::grpc::Service::MarkMethodGeneric(28);
    }
    ~WithGenericMethod_GetSplitPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSplitPoints(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::SplitPoint>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HCheckIfContinue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HCheckIfContinue() {
      ::grpc::Service::MarkMethodGeneric(29);
    }
    ~WithGenericMethod_HCheckIfContinue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HCheckIfContinue(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ScoreReduce : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ScoreReduce() {
      ::grpc::Service::MarkMethodGeneric(30);
    }
    ~WithGenericMethod_ScoreReduce() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScoreReduce(::grpc::ServerContext* /*context*/, const ::fedtree::Score* /*request*/, ::fedtree::Score* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TriggerHomoInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TriggerHomoInit() {
      ::grpc::Service::MarkMethodGeneric(31);
    }
    ~WithGenericMethod_TriggerHomoInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerHomoInit(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TriggerSAInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TriggerSAInit() {
      ::grpc::Service::MarkMethodGeneric(32);
    }
    ~WithGenericMethod_TriggerSAInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerSAInit(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPaillier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPaillier() {
      ::grpc::Service::MarkMethodGeneric(33);
    }
    ~WithGenericMethod_GetPaillier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPaillier(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Paillier* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendHistogramsEnc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendHistogramsEnc() {
      ::grpc::Service::MarkMethodGeneric(34);
    }
    ~WithGenericMethod_SendHistogramsEnc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHistogramsEnc(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::GHPairEnc>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendBatchedHistograms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendBatchedHistograms() {
      ::grpc::Service::MarkMethodGeneric(35);
    }
    ~WithGenericMethod_SendBatchedHistograms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendBatchedHistograms(::grpc::ServerContext* /*context*/, const ::fedtree::GHArray* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendHistogramBatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendHistogramBatches() {
      ::grpc::Service::MarkMethodGeneric(36);
    }
    ~WithGenericMethod_SendHistogramBatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHistogramBatches(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::GHBatch>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendHistFidBatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendHistFidBatches() {
      ::grpc::Service::MarkMethodGeneric(37);
    }
    ~WithGenericMethod_SendHistFidBatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHistFidBatches(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::FIDBatch>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetIns2NodeIDBatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetIns2NodeIDBatches() {
      ::grpc::Service::MarkMethodGeneric(38);
    }
    ~WithGenericMethod_GetIns2NodeIDBatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIns2NodeIDBatches(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::Ins2NodeIDBatch>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendIns2NodeIDBatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendIns2NodeIDBatches() {
      ::grpc::Service::MarkMethodGeneric(39);
    }
    ~WithGenericMethod_SendIns2NodeIDBatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendIns2NodeIDBatches(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::Ins2NodeIDBatch>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetGradientBatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetGradientBatches() {
      ::grpc::Service::MarkMethodGeneric(40);
    }
    ~WithGenericMethod_GetGradientBatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGradientBatches(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::GHBatch>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetGradientBatchesEnc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetGradientBatchesEnc() {
      ::grpc::Service::MarkMethodGeneric(41);
    }
    ~WithGenericMethod_GetGradientBatchesEnc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGradientBatchesEnc(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::GHEncBatch>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendNodeEnc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendNodeEnc() {
      ::grpc::Service::MarkMethodGeneric(42);
    }
    ~WithGenericMethod_SendNodeEnc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendNodeEnc(::grpc::ServerContext* /*context*/, const ::fedtree::NodeEnc* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendNodes() {
      ::grpc::Service::MarkMethodGeneric(43);
    }
    ~WithGenericMethod_SendNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendNodes(::grpc::ServerContext* /*context*/, const ::fedtree::NodeArray* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendNodesEnc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendNodesEnc() {
      ::grpc::Service::MarkMethodGeneric(44);
    }
    ~WithGenericMethod_SendNodesEnc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendNodesEnc(::grpc::ServerContext* /*context*/, const ::fedtree::NodeEncArray* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendHistogramBatchesEnc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendHistogramBatchesEnc() {
      ::grpc::Service::MarkMethodGeneric(45);
    }
    ~WithGenericMethod_SendHistogramBatchesEnc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHistogramBatchesEnc(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::GHEncBatch>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StopServer() {
      ::grpc::Service::MarkMethodGeneric(46);
    }
    ~WithGenericMethod_StopServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopServer(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Score* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BeginBarrier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BeginBarrier() {
      ::grpc::Service::MarkMethodGeneric(47);
    }
    ~WithGenericMethod_BeginBarrier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginBarrier(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_TriggerUpdateGradients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TriggerUpdateGradients() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_TriggerUpdateGradients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerUpdateGradients(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTriggerUpdateGradients(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TriggerBuildInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TriggerBuildInit() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_TriggerBuildInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerBuildInit(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTriggerBuildInit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetGradients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetGradients() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetGradients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGradients(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::GHPair>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGradients(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendDatasetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendDatasetInfo() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SendDatasetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDatasetInfo(::grpc::ServerContext* /*context*/, const ::fedtree::DatasetInfo* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendDatasetInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendHistograms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendHistograms() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SendHistograms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHistograms(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::GHPair>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendHistograms(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(4, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendHistFid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendHistFid() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SendHistFid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHistFid(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::FID>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendHistFid(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(5, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TriggerAggregate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TriggerAggregate() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_TriggerAggregate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerAggregate(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTriggerAggregate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBestInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBestInfo() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetBestInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBestInfo(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::BestInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBestInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendNode() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_SendNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendNode(::grpc::ServerContext* /*context*/, const ::fedtree::Node* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendNode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendIns2NodeID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendIns2NodeID() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_SendIns2NodeID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendIns2NodeID(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::Ins2NodeID>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendIns2NodeID(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(9, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNodes() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_GetNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodes(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::Node>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNodes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(10, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetIns2NodeID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetIns2NodeID() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_GetIns2NodeID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIns2NodeID(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::Ins2NodeID>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIns2NodeID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(11, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckIfContinue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CheckIfContinue() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_CheckIfContinue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckIfContinue(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckIfContinue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TriggerPrune : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TriggerPrune() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_TriggerPrune() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerPrune(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTriggerPrune(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TriggerPrintScore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TriggerPrintScore() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_TriggerPrintScore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerPrintScore(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTriggerPrintScore(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendRange() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_SendRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendRange(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::GHPair>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendRange(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(15, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TriggerCut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TriggerCut() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_TriggerCut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerCut(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTriggerCut(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRange() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_GetRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRange(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::GHPair>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRange(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(17, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendGH : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendGH() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_SendGH() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendGH(::grpc::ServerContext* /*context*/, const ::fedtree::GHPair* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendGH(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendDHPubKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendDHPubKey() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_SendDHPubKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDHPubKey(::grpc::ServerContext* /*context*/, const ::fedtree::DHPublicKey* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendDHPubKey(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDHPubKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDHPubKeys() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_GetDHPubKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDHPubKeys(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::DHPublicKeys>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDHPubKeys(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(20, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendNoises : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendNoises() {
      ::grpc::Service::MarkMethodRaw(21);
    }
    ~WithRawMethod_SendNoises() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendNoises(::grpc::ServerContext* /*context*/, const ::fedtree::SANoises* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendNoises(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNoises : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNoises() {
      ::grpc::Service::MarkMethodRaw(22);
    }
    ~WithRawMethod_GetNoises() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNoises(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::SANoises>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNoises(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(22, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendCutPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendCutPoints() {
      ::grpc::Service::MarkMethodRaw(23);
    }
    ~WithRawMethod_SendCutPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendCutPoints(::grpc::ServerContext* /*context*/, const ::fedtree::CutPoints* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendCutPoints(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCutPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCutPoints() {
      ::grpc::Service::MarkMethodRaw(24);
    }
    ~WithRawMethod_GetCutPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCutPoints(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::CutPoints>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCutPoints(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(24, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TriggerBuildUsingGH : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TriggerBuildUsingGH() {
      ::grpc::Service::MarkMethodRaw(25);
    }
    ~WithRawMethod_TriggerBuildUsingGH() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerBuildUsingGH(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTriggerBuildUsingGH(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TriggerCalcTree : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TriggerCalcTree() {
      ::grpc::Service::MarkMethodRaw(26);
    }
    ~WithRawMethod_TriggerCalcTree() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerCalcTree(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTriggerCalcTree(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRootNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRootNode() {
      ::grpc::Service::MarkMethodRaw(27);
    }
    ~WithRawMethod_GetRootNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRootNode(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Node* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRootNode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSplitPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSplitPoints() {
      ::grpc::Service::MarkMethodRaw(28);
    }
    ~WithRawMethod_GetSplitPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSplitPoints(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::SplitPoint>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSplitPoints(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(28, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HCheckIfContinue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HCheckIfContinue() {
      ::grpc::Service::MarkMethodRaw(29);
    }
    ~WithRawMethod_HCheckIfContinue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HCheckIfContinue(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHCheckIfContinue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ScoreReduce : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ScoreReduce() {
      ::grpc::Service::MarkMethodRaw(30);
    }
    ~WithRawMethod_ScoreReduce() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScoreReduce(::grpc::ServerContext* /*context*/, const ::fedtree::Score* /*request*/, ::fedtree::Score* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScoreReduce(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TriggerHomoInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TriggerHomoInit() {
      ::grpc::Service::MarkMethodRaw(31);
    }
    ~WithRawMethod_TriggerHomoInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerHomoInit(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTriggerHomoInit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TriggerSAInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TriggerSAInit() {
      ::grpc::Service::MarkMethodRaw(32);
    }
    ~WithRawMethod_TriggerSAInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerSAInit(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTriggerSAInit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(32, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPaillier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPaillier() {
      ::grpc::Service::MarkMethodRaw(33);
    }
    ~WithRawMethod_GetPaillier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPaillier(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Paillier* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPaillier(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendHistogramsEnc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendHistogramsEnc() {
      ::grpc::Service::MarkMethodRaw(34);
    }
    ~WithRawMethod_SendHistogramsEnc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHistogramsEnc(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::GHPairEnc>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendHistogramsEnc(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(34, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendBatchedHistograms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendBatchedHistograms() {
      ::grpc::Service::MarkMethodRaw(35);
    }
    ~WithRawMethod_SendBatchedHistograms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendBatchedHistograms(::grpc::ServerContext* /*context*/, const ::fedtree::GHArray* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendBatchedHistograms(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(35, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendHistogramBatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendHistogramBatches() {
      ::grpc::Service::MarkMethodRaw(36);
    }
    ~WithRawMethod_SendHistogramBatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHistogramBatches(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::GHBatch>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendHistogramBatches(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(36, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendHistFidBatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendHistFidBatches() {
      ::grpc::Service::MarkMethodRaw(37);
    }
    ~WithRawMethod_SendHistFidBatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHistFidBatches(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::FIDBatch>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendHistFidBatches(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(37, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetIns2NodeIDBatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetIns2NodeIDBatches() {
      ::grpc::Service::MarkMethodRaw(38);
    }
    ~WithRawMethod_GetIns2NodeIDBatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIns2NodeIDBatches(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::Ins2NodeIDBatch>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIns2NodeIDBatches(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(38, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendIns2NodeIDBatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendIns2NodeIDBatches() {
      ::grpc::Service::MarkMethodRaw(39);
    }
    ~WithRawMethod_SendIns2NodeIDBatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendIns2NodeIDBatches(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::Ins2NodeIDBatch>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendIns2NodeIDBatches(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(39, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetGradientBatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetGradientBatches() {
      ::grpc::Service::MarkMethodRaw(40);
    }
    ~WithRawMethod_GetGradientBatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGradientBatches(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::GHBatch>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGradientBatches(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(40, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetGradientBatchesEnc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetGradientBatchesEnc() {
      ::grpc::Service::MarkMethodRaw(41);
    }
    ~WithRawMethod_GetGradientBatchesEnc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGradientBatchesEnc(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::GHEncBatch>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGradientBatchesEnc(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(41, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendNodeEnc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendNodeEnc() {
      ::grpc::Service::MarkMethodRaw(42);
    }
    ~WithRawMethod_SendNodeEnc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendNodeEnc(::grpc::ServerContext* /*context*/, const ::fedtree::NodeEnc* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendNodeEnc(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(42, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendNodes() {
      ::grpc::Service::MarkMethodRaw(43);
    }
    ~WithRawMethod_SendNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendNodes(::grpc::ServerContext* /*context*/, const ::fedtree::NodeArray* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendNodes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(43, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendNodesEnc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendNodesEnc() {
      ::grpc::Service::MarkMethodRaw(44);
    }
    ~WithRawMethod_SendNodesEnc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendNodesEnc(::grpc::ServerContext* /*context*/, const ::fedtree::NodeEncArray* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendNodesEnc(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(44, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendHistogramBatchesEnc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendHistogramBatchesEnc() {
      ::grpc::Service::MarkMethodRaw(45);
    }
    ~WithRawMethod_SendHistogramBatchesEnc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHistogramBatchesEnc(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::GHEncBatch>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendHistogramBatchesEnc(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(45, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StopServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StopServer() {
      ::grpc::Service::MarkMethodRaw(46);
    }
    ~WithRawMethod_StopServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopServer(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Score* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(46, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BeginBarrier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BeginBarrier() {
      ::grpc::Service::MarkMethodRaw(47);
    }
    ~WithRawMethod_BeginBarrier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginBarrier(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBeginBarrier(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(47, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TriggerUpdateGradients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TriggerUpdateGradients() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TriggerUpdateGradients(context, request, response); }));
    }
    ~WithRawCallbackMethod_TriggerUpdateGradients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerUpdateGradients(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TriggerUpdateGradients(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TriggerBuildInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TriggerBuildInit() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TriggerBuildInit(context, request, response); }));
    }
    ~WithRawCallbackMethod_TriggerBuildInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerBuildInit(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TriggerBuildInit(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetGradients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetGradients() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetGradients(context, request); }));
    }
    ~WithRawCallbackMethod_GetGradients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGradients(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::GHPair>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetGradients(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendDatasetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendDatasetInfo() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendDatasetInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendDatasetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDatasetInfo(::grpc::ServerContext* /*context*/, const ::fedtree::DatasetInfo* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendDatasetInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendHistograms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendHistograms() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->SendHistograms(context, response); }));
    }
    ~WithRawCallbackMethod_SendHistograms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHistograms(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::GHPair>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* SendHistograms(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendHistFid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendHistFid() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->SendHistFid(context, response); }));
    }
    ~WithRawCallbackMethod_SendHistFid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHistFid(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::FID>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* SendHistFid(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TriggerAggregate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TriggerAggregate() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TriggerAggregate(context, request, response); }));
    }
    ~WithRawCallbackMethod_TriggerAggregate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerAggregate(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TriggerAggregate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBestInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBestInfo() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetBestInfo(context, request); }));
    }
    ~WithRawCallbackMethod_GetBestInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBestInfo(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::BestInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetBestInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendNode() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendNode(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendNode(::grpc::ServerContext* /*context*/, const ::fedtree::Node* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendNode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendIns2NodeID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendIns2NodeID() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->SendIns2NodeID(context, response); }));
    }
    ~WithRawCallbackMethod_SendIns2NodeID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendIns2NodeID(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::Ins2NodeID>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* SendIns2NodeID(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNodes() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetNodes(context, request); }));
    }
    ~WithRawCallbackMethod_GetNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodes(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::Node>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetNodes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetIns2NodeID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetIns2NodeID() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetIns2NodeID(context, request); }));
    }
    ~WithRawCallbackMethod_GetIns2NodeID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIns2NodeID(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::Ins2NodeID>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetIns2NodeID(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CheckIfContinue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CheckIfContinue() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CheckIfContinue(context, request, response); }));
    }
    ~WithRawCallbackMethod_CheckIfContinue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckIfContinue(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckIfContinue(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TriggerPrune : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TriggerPrune() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TriggerPrune(context, request, response); }));
    }
    ~WithRawCallbackMethod_TriggerPrune() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerPrune(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TriggerPrune(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TriggerPrintScore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TriggerPrintScore() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TriggerPrintScore(context, request, response); }));
    }
    ~WithRawCallbackMethod_TriggerPrintScore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerPrintScore(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TriggerPrintScore(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendRange() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->SendRange(context, response); }));
    }
    ~WithRawCallbackMethod_SendRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendRange(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::GHPair>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* SendRange(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TriggerCut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TriggerCut() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TriggerCut(context, request, response); }));
    }
    ~WithRawCallbackMethod_TriggerCut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerCut(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TriggerCut(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRange() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetRange(context, request); }));
    }
    ~WithRawCallbackMethod_GetRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRange(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::GHPair>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetRange(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendGH : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendGH() {
      ::grpc::Service::MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendGH(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendGH() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendGH(::grpc::ServerContext* /*context*/, const ::fedtree::GHPair* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendGH(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendDHPubKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendDHPubKey() {
      ::grpc::Service::MarkMethodRawCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendDHPubKey(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendDHPubKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDHPubKey(::grpc::ServerContext* /*context*/, const ::fedtree::DHPublicKey* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendDHPubKey(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDHPubKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDHPubKeys() {
      ::grpc::Service::MarkMethodRawCallback(20,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetDHPubKeys(context, request); }));
    }
    ~WithRawCallbackMethod_GetDHPubKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDHPubKeys(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::DHPublicKeys>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetDHPubKeys(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendNoises : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendNoises() {
      ::grpc::Service::MarkMethodRawCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendNoises(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendNoises() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendNoises(::grpc::ServerContext* /*context*/, const ::fedtree::SANoises* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendNoises(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNoises : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNoises() {
      ::grpc::Service::MarkMethodRawCallback(22,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetNoises(context, request); }));
    }
    ~WithRawCallbackMethod_GetNoises() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNoises(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::SANoises>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetNoises(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendCutPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendCutPoints() {
      ::grpc::Service::MarkMethodRawCallback(23,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendCutPoints(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendCutPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendCutPoints(::grpc::ServerContext* /*context*/, const ::fedtree::CutPoints* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendCutPoints(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCutPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCutPoints() {
      ::grpc::Service::MarkMethodRawCallback(24,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetCutPoints(context, request); }));
    }
    ~WithRawCallbackMethod_GetCutPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCutPoints(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::CutPoints>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetCutPoints(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TriggerBuildUsingGH : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TriggerBuildUsingGH() {
      ::grpc::Service::MarkMethodRawCallback(25,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TriggerBuildUsingGH(context, request, response); }));
    }
    ~WithRawCallbackMethod_TriggerBuildUsingGH() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerBuildUsingGH(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TriggerBuildUsingGH(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TriggerCalcTree : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TriggerCalcTree() {
      ::grpc::Service::MarkMethodRawCallback(26,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TriggerCalcTree(context, request, response); }));
    }
    ~WithRawCallbackMethod_TriggerCalcTree() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerCalcTree(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TriggerCalcTree(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRootNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRootNode() {
      ::grpc::Service::MarkMethodRawCallback(27,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRootNode(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetRootNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRootNode(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Node* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRootNode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSplitPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSplitPoints() {
      ::grpc::Service::MarkMethodRawCallback(28,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetSplitPoints(context, request); }));
    }
    ~WithRawCallbackMethod_GetSplitPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSplitPoints(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::SplitPoint>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetSplitPoints(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HCheckIfContinue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HCheckIfContinue() {
      ::grpc::Service::MarkMethodRawCallback(29,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HCheckIfContinue(context, request, response); }));
    }
    ~WithRawCallbackMethod_HCheckIfContinue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HCheckIfContinue(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HCheckIfContinue(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ScoreReduce : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ScoreReduce() {
      ::grpc::Service::MarkMethodRawCallback(30,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ScoreReduce(context, request, response); }));
    }
    ~WithRawCallbackMethod_ScoreReduce() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScoreReduce(::grpc::ServerContext* /*context*/, const ::fedtree::Score* /*request*/, ::fedtree::Score* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ScoreReduce(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TriggerHomoInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TriggerHomoInit() {
      ::grpc::Service::MarkMethodRawCallback(31,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TriggerHomoInit(context, request, response); }));
    }
    ~WithRawCallbackMethod_TriggerHomoInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerHomoInit(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TriggerHomoInit(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TriggerSAInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TriggerSAInit() {
      ::grpc::Service::MarkMethodRawCallback(32,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TriggerSAInit(context, request, response); }));
    }
    ~WithRawCallbackMethod_TriggerSAInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerSAInit(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TriggerSAInit(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPaillier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPaillier() {
      ::grpc::Service::MarkMethodRawCallback(33,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPaillier(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPaillier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPaillier(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Paillier* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPaillier(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendHistogramsEnc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendHistogramsEnc() {
      ::grpc::Service::MarkMethodRawCallback(34,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->SendHistogramsEnc(context, response); }));
    }
    ~WithRawCallbackMethod_SendHistogramsEnc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHistogramsEnc(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::GHPairEnc>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* SendHistogramsEnc(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendBatchedHistograms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendBatchedHistograms() {
      ::grpc::Service::MarkMethodRawCallback(35,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendBatchedHistograms(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendBatchedHistograms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendBatchedHistograms(::grpc::ServerContext* /*context*/, const ::fedtree::GHArray* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendBatchedHistograms(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendHistogramBatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendHistogramBatches() {
      ::grpc::Service::MarkMethodRawCallback(36,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->SendHistogramBatches(context, response); }));
    }
    ~WithRawCallbackMethod_SendHistogramBatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHistogramBatches(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::GHBatch>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* SendHistogramBatches(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendHistFidBatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendHistFidBatches() {
      ::grpc::Service::MarkMethodRawCallback(37,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->SendHistFidBatches(context, response); }));
    }
    ~WithRawCallbackMethod_SendHistFidBatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHistFidBatches(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::FIDBatch>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* SendHistFidBatches(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetIns2NodeIDBatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetIns2NodeIDBatches() {
      ::grpc::Service::MarkMethodRawCallback(38,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetIns2NodeIDBatches(context, request); }));
    }
    ~WithRawCallbackMethod_GetIns2NodeIDBatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIns2NodeIDBatches(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::Ins2NodeIDBatch>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetIns2NodeIDBatches(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendIns2NodeIDBatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendIns2NodeIDBatches() {
      ::grpc::Service::MarkMethodRawCallback(39,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->SendIns2NodeIDBatches(context, response); }));
    }
    ~WithRawCallbackMethod_SendIns2NodeIDBatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendIns2NodeIDBatches(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::Ins2NodeIDBatch>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* SendIns2NodeIDBatches(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetGradientBatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetGradientBatches() {
      ::grpc::Service::MarkMethodRawCallback(40,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetGradientBatches(context, request); }));
    }
    ~WithRawCallbackMethod_GetGradientBatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGradientBatches(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::GHBatch>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetGradientBatches(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetGradientBatchesEnc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetGradientBatchesEnc() {
      ::grpc::Service::MarkMethodRawCallback(41,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetGradientBatchesEnc(context, request); }));
    }
    ~WithRawCallbackMethod_GetGradientBatchesEnc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGradientBatchesEnc(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::GHEncBatch>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetGradientBatchesEnc(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendNodeEnc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendNodeEnc() {
      ::grpc::Service::MarkMethodRawCallback(42,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendNodeEnc(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendNodeEnc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendNodeEnc(::grpc::ServerContext* /*context*/, const ::fedtree::NodeEnc* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendNodeEnc(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendNodes() {
      ::grpc::Service::MarkMethodRawCallback(43,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendNodes(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendNodes(::grpc::ServerContext* /*context*/, const ::fedtree::NodeArray* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendNodes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendNodesEnc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendNodesEnc() {
      ::grpc::Service::MarkMethodRawCallback(44,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendNodesEnc(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendNodesEnc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendNodesEnc(::grpc::ServerContext* /*context*/, const ::fedtree::NodeEncArray* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendNodesEnc(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendHistogramBatchesEnc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendHistogramBatchesEnc() {
      ::grpc::Service::MarkMethodRawCallback(45,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->SendHistogramBatchesEnc(context, response); }));
    }
    ~WithRawCallbackMethod_SendHistogramBatchesEnc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHistogramBatchesEnc(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::fedtree::GHEncBatch>* /*reader*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* SendHistogramBatchesEnc(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StopServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StopServer() {
      ::grpc::Service::MarkMethodRawCallback(46,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StopServer(context, request, response); }));
    }
    ~WithRawCallbackMethod_StopServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopServer(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Score* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StopServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BeginBarrier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BeginBarrier() {
      ::grpc::Service::MarkMethodRawCallback(47,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BeginBarrier(context, request, response); }));
    }
    ~WithRawCallbackMethod_BeginBarrier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginBarrier(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BeginBarrier(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TriggerUpdateGradients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TriggerUpdateGradients() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fedtree::PID, ::fedtree::Ready>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fedtree::PID, ::fedtree::Ready>* streamer) {
                       return this->StreamedTriggerUpdateGradients(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TriggerUpdateGradients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TriggerUpdateGradients(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTriggerUpdateGradients(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fedtree::PID,::fedtree::Ready>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TriggerBuildInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TriggerBuildInit() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fedtree::PID, ::fedtree::Ready>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fedtree::PID, ::fedtree::Ready>* streamer) {
                       return this->StreamedTriggerBuildInit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TriggerBuildInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TriggerBuildInit(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTriggerBuildInit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fedtree::PID,::fedtree::Ready>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendDatasetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendDatasetInfo() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fedtree::DatasetInfo, ::fedtree::PID>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fedtree::DatasetInfo, ::fedtree::PID>* streamer) {
                       return this->StreamedSendDatasetInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendDatasetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendDatasetInfo(::grpc::ServerContext* /*context*/, const ::fedtree::DatasetInfo* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendDatasetInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fedtree::DatasetInfo,::fedtree::PID>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TriggerAggregate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TriggerAggregate() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fedtree::PID, ::fedtree::Ready>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fedtree::PID, ::fedtree::Ready>* streamer) {
                       return this->StreamedTriggerAggregate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TriggerAggregate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TriggerAggregate(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTriggerAggregate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fedtree::PID,::fedtree::Ready>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendNode() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fedtree::Node, ::fedtree::PID>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fedtree::Node, ::fedtree::PID>* streamer) {
                       return this->StreamedSendNode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendNode(::grpc::ServerContext* /*context*/, const ::fedtree::Node* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendNode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fedtree::Node,::fedtree::PID>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckIfContinue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CheckIfContinue() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fedtree::PID, ::fedtree::Ready>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fedtree::PID, ::fedtree::Ready>* streamer) {
                       return this->StreamedCheckIfContinue(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CheckIfContinue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckIfContinue(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckIfContinue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fedtree::PID,::fedtree::Ready>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TriggerPrune : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TriggerPrune() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fedtree::PID, ::fedtree::Ready>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fedtree::PID, ::fedtree::Ready>* streamer) {
                       return this->StreamedTriggerPrune(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TriggerPrune() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TriggerPrune(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTriggerPrune(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fedtree::PID,::fedtree::Ready>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TriggerPrintScore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TriggerPrintScore() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fedtree::PID, ::fedtree::Ready>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fedtree::PID, ::fedtree::Ready>* streamer) {
                       return this->StreamedTriggerPrintScore(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TriggerPrintScore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TriggerPrintScore(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTriggerPrintScore(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fedtree::PID,::fedtree::Ready>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TriggerCut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TriggerCut() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fedtree::PID, ::fedtree::Ready>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fedtree::PID, ::fedtree::Ready>* streamer) {
                       return this->StreamedTriggerCut(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TriggerCut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TriggerCut(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTriggerCut(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fedtree::PID,::fedtree::Ready>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendGH : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendGH() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fedtree::GHPair, ::fedtree::PID>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fedtree::GHPair, ::fedtree::PID>* streamer) {
                       return this->StreamedSendGH(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendGH() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendGH(::grpc::ServerContext* /*context*/, const ::fedtree::GHPair* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendGH(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fedtree::GHPair,::fedtree::PID>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendDHPubKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendDHPubKey() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fedtree::DHPublicKey, ::fedtree::PID>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fedtree::DHPublicKey, ::fedtree::PID>* streamer) {
                       return this->StreamedSendDHPubKey(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendDHPubKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendDHPubKey(::grpc::ServerContext* /*context*/, const ::fedtree::DHPublicKey* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendDHPubKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fedtree::DHPublicKey,::fedtree::PID>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendNoises : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendNoises() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fedtree::SANoises, ::fedtree::PID>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fedtree::SANoises, ::fedtree::PID>* streamer) {
                       return this->StreamedSendNoises(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendNoises() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendNoises(::grpc::ServerContext* /*context*/, const ::fedtree::SANoises* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendNoises(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fedtree::SANoises,::fedtree::PID>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendCutPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendCutPoints() {
      ::grpc::Service::MarkMethodStreamed(23,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fedtree::CutPoints, ::fedtree::PID>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fedtree::CutPoints, ::fedtree::PID>* streamer) {
                       return this->StreamedSendCutPoints(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendCutPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendCutPoints(::grpc::ServerContext* /*context*/, const ::fedtree::CutPoints* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendCutPoints(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fedtree::CutPoints,::fedtree::PID>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TriggerBuildUsingGH : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TriggerBuildUsingGH() {
      ::grpc::Service::MarkMethodStreamed(25,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fedtree::PID, ::fedtree::Ready>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fedtree::PID, ::fedtree::Ready>* streamer) {
                       return this->StreamedTriggerBuildUsingGH(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TriggerBuildUsingGH() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TriggerBuildUsingGH(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTriggerBuildUsingGH(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fedtree::PID,::fedtree::Ready>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TriggerCalcTree : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TriggerCalcTree() {
      ::grpc::Service::MarkMethodStreamed(26,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fedtree::PID, ::fedtree::Ready>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fedtree::PID, ::fedtree::Ready>* streamer) {
                       return this->StreamedTriggerCalcTree(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TriggerCalcTree() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TriggerCalcTree(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTriggerCalcTree(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fedtree::PID,::fedtree::Ready>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRootNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRootNode() {
      ::grpc::Service::MarkMethodStreamed(27,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fedtree::PID, ::fedtree::Node>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fedtree::PID, ::fedtree::Node>* streamer) {
                       return this->StreamedGetRootNode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRootNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRootNode(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Node* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRootNode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fedtree::PID,::fedtree::Node>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HCheckIfContinue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HCheckIfContinue() {
      ::grpc::Service::MarkMethodStreamed(29,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fedtree::PID, ::fedtree::Ready>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fedtree::PID, ::fedtree::Ready>* streamer) {
                       return this->StreamedHCheckIfContinue(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HCheckIfContinue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HCheckIfContinue(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHCheckIfContinue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fedtree::PID,::fedtree::Ready>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ScoreReduce : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ScoreReduce() {
      ::grpc::Service::MarkMethodStreamed(30,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fedtree::Score, ::fedtree::Score>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fedtree::Score, ::fedtree::Score>* streamer) {
                       return this->StreamedScoreReduce(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ScoreReduce() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ScoreReduce(::grpc::ServerContext* /*context*/, const ::fedtree::Score* /*request*/, ::fedtree::Score* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedScoreReduce(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fedtree::Score,::fedtree::Score>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TriggerHomoInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TriggerHomoInit() {
      ::grpc::Service::MarkMethodStreamed(31,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fedtree::PID, ::fedtree::Ready>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fedtree::PID, ::fedtree::Ready>* streamer) {
                       return this->StreamedTriggerHomoInit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TriggerHomoInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TriggerHomoInit(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTriggerHomoInit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fedtree::PID,::fedtree::Ready>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TriggerSAInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TriggerSAInit() {
      ::grpc::Service::MarkMethodStreamed(32,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fedtree::PID, ::fedtree::Ready>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fedtree::PID, ::fedtree::Ready>* streamer) {
                       return this->StreamedTriggerSAInit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TriggerSAInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TriggerSAInit(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTriggerSAInit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fedtree::PID,::fedtree::Ready>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPaillier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPaillier() {
      ::grpc::Service::MarkMethodStreamed(33,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fedtree::PID, ::fedtree::Paillier>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fedtree::PID, ::fedtree::Paillier>* streamer) {
                       return this->StreamedGetPaillier(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPaillier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPaillier(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Paillier* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPaillier(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fedtree::PID,::fedtree::Paillier>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendBatchedHistograms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendBatchedHistograms() {
      ::grpc::Service::MarkMethodStreamed(35,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fedtree::GHArray, ::fedtree::PID>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fedtree::GHArray, ::fedtree::PID>* streamer) {
                       return this->StreamedSendBatchedHistograms(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendBatchedHistograms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendBatchedHistograms(::grpc::ServerContext* /*context*/, const ::fedtree::GHArray* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendBatchedHistograms(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fedtree::GHArray,::fedtree::PID>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendNodeEnc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendNodeEnc() {
      ::grpc::Service::MarkMethodStreamed(42,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fedtree::NodeEnc, ::fedtree::PID>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fedtree::NodeEnc, ::fedtree::PID>* streamer) {
                       return this->StreamedSendNodeEnc(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendNodeEnc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendNodeEnc(::grpc::ServerContext* /*context*/, const ::fedtree::NodeEnc* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendNodeEnc(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fedtree::NodeEnc,::fedtree::PID>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendNodes() {
      ::grpc::Service::MarkMethodStreamed(43,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fedtree::NodeArray, ::fedtree::PID>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fedtree::NodeArray, ::fedtree::PID>* streamer) {
                       return this->StreamedSendNodes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendNodes(::grpc::ServerContext* /*context*/, const ::fedtree::NodeArray* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendNodes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fedtree::NodeArray,::fedtree::PID>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendNodesEnc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendNodesEnc() {
      ::grpc::Service::MarkMethodStreamed(44,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fedtree::NodeEncArray, ::fedtree::PID>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fedtree::NodeEncArray, ::fedtree::PID>* streamer) {
                       return this->StreamedSendNodesEnc(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendNodesEnc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendNodesEnc(::grpc::ServerContext* /*context*/, const ::fedtree::NodeEncArray* /*request*/, ::fedtree::PID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendNodesEnc(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fedtree::NodeEncArray,::fedtree::PID>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StopServer() {
      ::grpc::Service::MarkMethodStreamed(46,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fedtree::PID, ::fedtree::Score>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fedtree::PID, ::fedtree::Score>* streamer) {
                       return this->StreamedStopServer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StopServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopServer(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Score* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fedtree::PID,::fedtree::Score>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BeginBarrier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BeginBarrier() {
      ::grpc::Service::MarkMethodStreamed(47,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fedtree::PID, ::fedtree::Ready>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fedtree::PID, ::fedtree::Ready>* streamer) {
                       return this->StreamedBeginBarrier(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BeginBarrier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BeginBarrier(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::fedtree::Ready* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBeginBarrier(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fedtree::PID,::fedtree::Ready>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_TriggerUpdateGradients<WithStreamedUnaryMethod_TriggerBuildInit<WithStreamedUnaryMethod_SendDatasetInfo<WithStreamedUnaryMethod_TriggerAggregate<WithStreamedUnaryMethod_SendNode<WithStreamedUnaryMethod_CheckIfContinue<WithStreamedUnaryMethod_TriggerPrune<WithStreamedUnaryMethod_TriggerPrintScore<WithStreamedUnaryMethod_TriggerCut<WithStreamedUnaryMethod_SendGH<WithStreamedUnaryMethod_SendDHPubKey<WithStreamedUnaryMethod_SendNoises<WithStreamedUnaryMethod_SendCutPoints<WithStreamedUnaryMethod_TriggerBuildUsingGH<WithStreamedUnaryMethod_TriggerCalcTree<WithStreamedUnaryMethod_GetRootNode<WithStreamedUnaryMethod_HCheckIfContinue<WithStreamedUnaryMethod_ScoreReduce<WithStreamedUnaryMethod_TriggerHomoInit<WithStreamedUnaryMethod_TriggerSAInit<WithStreamedUnaryMethod_GetPaillier<WithStreamedUnaryMethod_SendBatchedHistograms<WithStreamedUnaryMethod_SendNodeEnc<WithStreamedUnaryMethod_SendNodes<WithStreamedUnaryMethod_SendNodesEnc<WithStreamedUnaryMethod_StopServer<WithStreamedUnaryMethod_BeginBarrier<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetGradients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetGradients() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::fedtree::PID, ::fedtree::GHPair>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::fedtree::PID, ::fedtree::GHPair>* streamer) {
                       return this->StreamedGetGradients(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetGradients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetGradients(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::GHPair>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetGradients(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::fedtree::PID,::fedtree::GHPair>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetBestInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetBestInfo() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::fedtree::PID, ::fedtree::BestInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::fedtree::PID, ::fedtree::BestInfo>* streamer) {
                       return this->StreamedGetBestInfo(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetBestInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBestInfo(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::BestInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetBestInfo(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::fedtree::PID,::fedtree::BestInfo>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetNodes() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::fedtree::PID, ::fedtree::Node>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::fedtree::PID, ::fedtree::Node>* streamer) {
                       return this->StreamedGetNodes(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNodes(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::Node>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetNodes(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::fedtree::PID,::fedtree::Node>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetIns2NodeID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetIns2NodeID() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::fedtree::PID, ::fedtree::Ins2NodeID>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::fedtree::PID, ::fedtree::Ins2NodeID>* streamer) {
                       return this->StreamedGetIns2NodeID(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetIns2NodeID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetIns2NodeID(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::Ins2NodeID>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetIns2NodeID(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::fedtree::PID,::fedtree::Ins2NodeID>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetRange() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::fedtree::PID, ::fedtree::GHPair>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::fedtree::PID, ::fedtree::GHPair>* streamer) {
                       return this->StreamedGetRange(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRange(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::GHPair>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetRange(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::fedtree::PID,::fedtree::GHPair>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetDHPubKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetDHPubKeys() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::fedtree::PID, ::fedtree::DHPublicKeys>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::fedtree::PID, ::fedtree::DHPublicKeys>* streamer) {
                       return this->StreamedGetDHPubKeys(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetDHPubKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDHPubKeys(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::DHPublicKeys>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetDHPubKeys(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::fedtree::PID,::fedtree::DHPublicKeys>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetNoises : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetNoises() {
      ::grpc::Service::MarkMethodStreamed(22,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::fedtree::PID, ::fedtree::SANoises>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::fedtree::PID, ::fedtree::SANoises>* streamer) {
                       return this->StreamedGetNoises(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetNoises() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNoises(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::SANoises>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetNoises(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::fedtree::PID,::fedtree::SANoises>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetCutPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetCutPoints() {
      ::grpc::Service::MarkMethodStreamed(24,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::fedtree::PID, ::fedtree::CutPoints>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::fedtree::PID, ::fedtree::CutPoints>* streamer) {
                       return this->StreamedGetCutPoints(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetCutPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCutPoints(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::CutPoints>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetCutPoints(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::fedtree::PID,::fedtree::CutPoints>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetSplitPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetSplitPoints() {
      ::grpc::Service::MarkMethodStreamed(28,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::fedtree::PID, ::fedtree::SplitPoint>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::fedtree::PID, ::fedtree::SplitPoint>* streamer) {
                       return this->StreamedGetSplitPoints(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetSplitPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSplitPoints(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::SplitPoint>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetSplitPoints(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::fedtree::PID,::fedtree::SplitPoint>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetIns2NodeIDBatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetIns2NodeIDBatches() {
      ::grpc::Service::MarkMethodStreamed(38,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::fedtree::PID, ::fedtree::Ins2NodeIDBatch>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::fedtree::PID, ::fedtree::Ins2NodeIDBatch>* streamer) {
                       return this->StreamedGetIns2NodeIDBatches(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetIns2NodeIDBatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetIns2NodeIDBatches(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::Ins2NodeIDBatch>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetIns2NodeIDBatches(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::fedtree::PID,::fedtree::Ins2NodeIDBatch>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetGradientBatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetGradientBatches() {
      ::grpc::Service::MarkMethodStreamed(40,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::fedtree::PID, ::fedtree::GHBatch>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::fedtree::PID, ::fedtree::GHBatch>* streamer) {
                       return this->StreamedGetGradientBatches(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetGradientBatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetGradientBatches(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::GHBatch>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetGradientBatches(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::fedtree::PID,::fedtree::GHBatch>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetGradientBatchesEnc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetGradientBatchesEnc() {
      ::grpc::Service::MarkMethodStreamed(41,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::fedtree::PID, ::fedtree::GHEncBatch>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::fedtree::PID, ::fedtree::GHEncBatch>* streamer) {
                       return this->StreamedGetGradientBatchesEnc(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetGradientBatchesEnc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetGradientBatchesEnc(::grpc::ServerContext* /*context*/, const ::fedtree::PID* /*request*/, ::grpc::ServerWriter< ::fedtree::GHEncBatch>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetGradientBatchesEnc(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::fedtree::PID,::fedtree::GHEncBatch>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetGradients<WithSplitStreamingMethod_GetBestInfo<WithSplitStreamingMethod_GetNodes<WithSplitStreamingMethod_GetIns2NodeID<WithSplitStreamingMethod_GetRange<WithSplitStreamingMethod_GetDHPubKeys<WithSplitStreamingMethod_GetNoises<WithSplitStreamingMethod_GetCutPoints<WithSplitStreamingMethod_GetSplitPoints<WithSplitStreamingMethod_GetIns2NodeIDBatches<WithSplitStreamingMethod_GetGradientBatches<WithSplitStreamingMethod_GetGradientBatchesEnc<Service > > > > > > > > > > > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_TriggerUpdateGradients<WithStreamedUnaryMethod_TriggerBuildInit<WithSplitStreamingMethod_GetGradients<WithStreamedUnaryMethod_SendDatasetInfo<WithStreamedUnaryMethod_TriggerAggregate<WithSplitStreamingMethod_GetBestInfo<WithStreamedUnaryMethod_SendNode<WithSplitStreamingMethod_GetNodes<WithSplitStreamingMethod_GetIns2NodeID<WithStreamedUnaryMethod_CheckIfContinue<WithStreamedUnaryMethod_TriggerPrune<WithStreamedUnaryMethod_TriggerPrintScore<WithStreamedUnaryMethod_TriggerCut<WithSplitStreamingMethod_GetRange<WithStreamedUnaryMethod_SendGH<WithStreamedUnaryMethod_SendDHPubKey<WithSplitStreamingMethod_GetDHPubKeys<WithStreamedUnaryMethod_SendNoises<WithSplitStreamingMethod_GetNoises<WithStreamedUnaryMethod_SendCutPoints<WithSplitStreamingMethod_GetCutPoints<WithStreamedUnaryMethod_TriggerBuildUsingGH<WithStreamedUnaryMethod_TriggerCalcTree<WithStreamedUnaryMethod_GetRootNode<WithSplitStreamingMethod_GetSplitPoints<WithStreamedUnaryMethod_HCheckIfContinue<WithStreamedUnaryMethod_ScoreReduce<WithStreamedUnaryMethod_TriggerHomoInit<WithStreamedUnaryMethod_TriggerSAInit<WithStreamedUnaryMethod_GetPaillier<WithStreamedUnaryMethod_SendBatchedHistograms<WithSplitStreamingMethod_GetIns2NodeIDBatches<WithSplitStreamingMethod_GetGradientBatches<WithSplitStreamingMethod_GetGradientBatchesEnc<WithStreamedUnaryMethod_SendNodeEnc<WithStreamedUnaryMethod_SendNodes<WithStreamedUnaryMethod_SendNodesEnc<WithStreamedUnaryMethod_StopServer<WithStreamedUnaryMethod_BeginBarrier<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace fedtree


#endif  // GRPC_fedtree_2eproto__INCLUDED
