// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fedtree.proto

#include "fedtree.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace fedtree {
PROTOBUF_CONSTEXPR FIDBatch::FIDBatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{}
  , /*decltype(_impl_._id_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FIDBatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FIDBatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FIDBatchDefaultTypeInternal() {}
  union {
    FIDBatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FIDBatchDefaultTypeInternal _FIDBatch_default_instance_;
PROTOBUF_CONSTEXPR GHBatch::GHBatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.g_)*/{}
  , /*decltype(_impl_.h_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GHBatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GHBatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GHBatchDefaultTypeInternal() {}
  union {
    GHBatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GHBatchDefaultTypeInternal _GHBatch_default_instance_;
PROTOBUF_CONSTEXPR GHEncBatch::GHEncBatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.g_enc_)*/{}
  , /*decltype(_impl_.h_enc_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GHEncBatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GHEncBatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GHEncBatchDefaultTypeInternal() {}
  union {
    GHEncBatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GHEncBatchDefaultTypeInternal _GHEncBatch_default_instance_;
PROTOBUF_CONSTEXPR GHPair::GHPair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.g_)*/0
  , /*decltype(_impl_.h_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GHPairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GHPairDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GHPairDefaultTypeInternal() {}
  union {
    GHPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GHPairDefaultTypeInternal _GHPair_default_instance_;
PROTOBUF_CONSTEXPR GHArray::GHArray(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.g_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GHArrayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GHArrayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GHArrayDefaultTypeInternal() {}
  union {
    GHArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GHArrayDefaultTypeInternal _GHArray_default_instance_;
PROTOBUF_CONSTEXPR GHPairEnc::GHPairEnc(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.g_enc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.h_enc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GHPairEncDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GHPairEncDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GHPairEncDefaultTypeInternal() {}
  union {
    GHPairEnc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GHPairEncDefaultTypeInternal _GHPairEnc_default_instance_;
PROTOBUF_CONSTEXPR Paillier::Paillier(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.modulus_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.generator_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PaillierDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PaillierDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PaillierDefaultTypeInternal() {}
  union {
    Paillier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PaillierDefaultTypeInternal _Paillier_default_instance_;
PROTOBUF_CONSTEXPR SplitPoint::SplitPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gain_)*/0
  , /*decltype(_impl_.fea_missing_g_)*/0
  , /*decltype(_impl_.fea_missing_h_)*/0
  , /*decltype(_impl_.rch_sum_g_)*/0
  , /*decltype(_impl_.rch_sum_h_)*/0
  , /*decltype(_impl_.nid_)*/0
  , /*decltype(_impl_.split_fea_id_)*/0
  , /*decltype(_impl_.default_right_)*/false
  , /*decltype(_impl_.no_split_value_update_)*/false
  , /*decltype(_impl_.fval_)*/0
  , /*decltype(_impl_.split_bid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SplitPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SplitPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SplitPointDefaultTypeInternal() {}
  union {
    SplitPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SplitPointDefaultTypeInternal _SplitPoint_default_instance_;
PROTOBUF_CONSTEXPR Score::Score(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ScoreDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScoreDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScoreDefaultTypeInternal() {}
  union {
    Score _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScoreDefaultTypeInternal _Score_default_instance_;
PROTOBUF_CONSTEXPR PID::PID(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PIDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PIDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PIDDefaultTypeInternal() {}
  union {
    PID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PIDDefaultTypeInternal _PID_default_instance_;
PROTOBUF_CONSTEXPR Ready::Ready(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ready_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReadyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadyDefaultTypeInternal() {}
  union {
    Ready _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadyDefaultTypeInternal _Ready_default_instance_;
PROTOBUF_CONSTEXPR DatasetInfo::DatasetInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.n_bins_)*/0
  , /*decltype(_impl_.n_columns_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DatasetInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DatasetInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DatasetInfoDefaultTypeInternal() {}
  union {
    DatasetInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DatasetInfoDefaultTypeInternal _DatasetInfo_default_instance_;
PROTOBUF_CONSTEXPR FID::FID(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FIDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FIDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FIDDefaultTypeInternal() {}
  union {
    FID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FIDDefaultTypeInternal _FID_default_instance_;
PROTOBUF_CONSTEXPR BestInfo::BestInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/0
  , /*decltype(_impl_.nid_)*/0
  , /*decltype(_impl_.idx_)*/0
  , /*decltype(_impl_.global_fid_)*/0
  , /*decltype(_impl_.gain_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BestInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BestInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BestInfoDefaultTypeInternal() {}
  union {
    BestInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BestInfoDefaultTypeInternal _BestInfo_default_instance_;
PROTOBUF_CONSTEXPR NodeEnc::NodeEnc(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sum_gh_pair_g_enc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sum_gh_pair_h_enc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.final_id_)*/0
  , /*decltype(_impl_.lch_index_)*/0
  , /*decltype(_impl_.rch_index_)*/0
  , /*decltype(_impl_.parent_index_)*/0
  , /*decltype(_impl_.gain_)*/0
  , /*decltype(_impl_.base_weight_)*/0
  , /*decltype(_impl_.split_feature_id_)*/0
  , /*decltype(_impl_.pid_)*/0
  , /*decltype(_impl_.split_value_)*/0
  , /*decltype(_impl_.split_bid_)*/0
  , /*decltype(_impl_.default_right_)*/false
  , /*decltype(_impl_.is_leaf_)*/false
  , /*decltype(_impl_.is_valid_)*/false
  , /*decltype(_impl_.is_pruned_)*/false
  , /*decltype(_impl_.n_instances_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NodeEncDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeEncDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeEncDefaultTypeInternal() {}
  union {
    NodeEnc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeEncDefaultTypeInternal _NodeEnc_default_instance_;
PROTOBUF_CONSTEXPR Node::Node(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.final_id_)*/0
  , /*decltype(_impl_.lch_index_)*/0
  , /*decltype(_impl_.rch_index_)*/0
  , /*decltype(_impl_.parent_index_)*/0
  , /*decltype(_impl_.gain_)*/0
  , /*decltype(_impl_.base_weight_)*/0
  , /*decltype(_impl_.split_feature_id_)*/0
  , /*decltype(_impl_.pid_)*/0
  , /*decltype(_impl_.split_value_)*/0
  , /*decltype(_impl_.split_bid_)*/0
  , /*decltype(_impl_.default_right_)*/false
  , /*decltype(_impl_.is_leaf_)*/false
  , /*decltype(_impl_.is_valid_)*/false
  , /*decltype(_impl_.is_pruned_)*/false
  , /*decltype(_impl_.sum_gh_pair_g_)*/0
  , /*decltype(_impl_.sum_gh_pair_h_)*/0
  , /*decltype(_impl_.n_instances_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeDefaultTypeInternal() {}
  union {
    Node _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeDefaultTypeInternal _Node_default_instance_;
PROTOBUF_CONSTEXPR NodeEncArray::NodeEncArray(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.final_id_)*/{}
  , /*decltype(_impl_._final_id_cached_byte_size_)*/{0}
  , /*decltype(_impl_.lch_index_)*/{}
  , /*decltype(_impl_._lch_index_cached_byte_size_)*/{0}
  , /*decltype(_impl_.rch_index_)*/{}
  , /*decltype(_impl_._rch_index_cached_byte_size_)*/{0}
  , /*decltype(_impl_.parent_index_)*/{}
  , /*decltype(_impl_._parent_index_cached_byte_size_)*/{0}
  , /*decltype(_impl_.gain_)*/{}
  , /*decltype(_impl_.base_weight_)*/{}
  , /*decltype(_impl_.split_feature_id_)*/{}
  , /*decltype(_impl_._split_feature_id_cached_byte_size_)*/{0}
  , /*decltype(_impl_.pid_)*/{}
  , /*decltype(_impl_._pid_cached_byte_size_)*/{0}
  , /*decltype(_impl_.split_value_)*/{}
  , /*decltype(_impl_.split_bid_)*/{}
  , /*decltype(_impl_._split_bid_cached_byte_size_)*/{0}
  , /*decltype(_impl_.default_right_)*/{}
  , /*decltype(_impl_.is_leaf_)*/{}
  , /*decltype(_impl_.is_valid_)*/{}
  , /*decltype(_impl_.is_pruned_)*/{}
  , /*decltype(_impl_.sum_gh_pair_g_enc_)*/{}
  , /*decltype(_impl_.sum_gh_pair_h_enc_)*/{}
  , /*decltype(_impl_.n_instances_)*/{}
  , /*decltype(_impl_._n_instances_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NodeEncArrayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeEncArrayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeEncArrayDefaultTypeInternal() {}
  union {
    NodeEncArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeEncArrayDefaultTypeInternal _NodeEncArray_default_instance_;
PROTOBUF_CONSTEXPR NodeArray::NodeArray(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.final_id_)*/{}
  , /*decltype(_impl_._final_id_cached_byte_size_)*/{0}
  , /*decltype(_impl_.lch_index_)*/{}
  , /*decltype(_impl_._lch_index_cached_byte_size_)*/{0}
  , /*decltype(_impl_.rch_index_)*/{}
  , /*decltype(_impl_._rch_index_cached_byte_size_)*/{0}
  , /*decltype(_impl_.parent_index_)*/{}
  , /*decltype(_impl_._parent_index_cached_byte_size_)*/{0}
  , /*decltype(_impl_.gain_)*/{}
  , /*decltype(_impl_.base_weight_)*/{}
  , /*decltype(_impl_.split_feature_id_)*/{}
  , /*decltype(_impl_._split_feature_id_cached_byte_size_)*/{0}
  , /*decltype(_impl_.pid_)*/{}
  , /*decltype(_impl_._pid_cached_byte_size_)*/{0}
  , /*decltype(_impl_.split_value_)*/{}
  , /*decltype(_impl_.split_bid_)*/{}
  , /*decltype(_impl_._split_bid_cached_byte_size_)*/{0}
  , /*decltype(_impl_.default_right_)*/{}
  , /*decltype(_impl_.is_leaf_)*/{}
  , /*decltype(_impl_.is_valid_)*/{}
  , /*decltype(_impl_.is_pruned_)*/{}
  , /*decltype(_impl_.sum_gh_pair_g_)*/{}
  , /*decltype(_impl_.sum_gh_pair_h_)*/{}
  , /*decltype(_impl_.n_instances_)*/{}
  , /*decltype(_impl_._n_instances_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NodeArrayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeArrayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeArrayDefaultTypeInternal() {}
  union {
    NodeArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeArrayDefaultTypeInternal _NodeArray_default_instance_;
PROTOBUF_CONSTEXPR Ins2NodeID::Ins2NodeID(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.iid_)*/0
  , /*decltype(_impl_.nid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Ins2NodeIDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Ins2NodeIDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Ins2NodeIDDefaultTypeInternal() {}
  union {
    Ins2NodeID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Ins2NodeIDDefaultTypeInternal _Ins2NodeID_default_instance_;
PROTOBUF_CONSTEXPR Ins2NodeIDBatch::Ins2NodeIDBatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.iid_)*/{}
  , /*decltype(_impl_._iid_cached_byte_size_)*/{0}
  , /*decltype(_impl_.nid_)*/{}
  , /*decltype(_impl_._nid_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Ins2NodeIDBatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Ins2NodeIDBatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Ins2NodeIDBatchDefaultTypeInternal() {}
  union {
    Ins2NodeIDBatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Ins2NodeIDBatchDefaultTypeInternal _Ins2NodeIDBatch_default_instance_;
PROTOBUF_CONSTEXPR DHPublicKey::DHPublicKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pk_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DHPublicKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DHPublicKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DHPublicKeyDefaultTypeInternal() {}
  union {
    DHPublicKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DHPublicKeyDefaultTypeInternal _DHPublicKey_default_instance_;
PROTOBUF_CONSTEXPR DHPublicKeys::DHPublicKeys(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pk_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DHPublicKeysDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DHPublicKeysDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DHPublicKeysDefaultTypeInternal() {}
  union {
    DHPublicKeys _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DHPublicKeysDefaultTypeInternal _DHPublicKeys_default_instance_;
PROTOBUF_CONSTEXPR SANoise::SANoise(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.noise_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SANoiseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SANoiseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SANoiseDefaultTypeInternal() {}
  union {
    SANoise _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SANoiseDefaultTypeInternal _SANoise_default_instance_;
PROTOBUF_CONSTEXPR SANoises::SANoises(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.noises_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SANoisesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SANoisesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SANoisesDefaultTypeInternal() {}
  union {
    SANoises _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SANoisesDefaultTypeInternal _SANoises_default_instance_;
PROTOBUF_CONSTEXPR CutPoints::CutPoints(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cut_points_val_)*/{}
  , /*decltype(_impl_.cut_col_ptr_)*/{}
  , /*decltype(_impl_._cut_col_ptr_cached_byte_size_)*/{0}
  , /*decltype(_impl_.cut_fid_)*/{}
  , /*decltype(_impl_._cut_fid_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CutPointsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CutPointsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CutPointsDefaultTypeInternal() {}
  union {
    CutPoints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CutPointsDefaultTypeInternal _CutPoints_default_instance_;
}  // namespace fedtree
static ::_pb::Metadata file_level_metadata_fedtree_2eproto[25];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_fedtree_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_fedtree_2eproto = nullptr;

const uint32_t TableStruct_fedtree_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::FIDBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fedtree::FIDBatch, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::GHBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fedtree::GHBatch, _impl_.g_),
  PROTOBUF_FIELD_OFFSET(::fedtree::GHBatch, _impl_.h_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::GHEncBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fedtree::GHEncBatch, _impl_.g_enc_),
  PROTOBUF_FIELD_OFFSET(::fedtree::GHEncBatch, _impl_.h_enc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::GHPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fedtree::GHPair, _impl_.g_),
  PROTOBUF_FIELD_OFFSET(::fedtree::GHPair, _impl_.h_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::GHArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fedtree::GHArray, _impl_.g_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::GHPairEnc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fedtree::GHPairEnc, _impl_.g_enc_),
  PROTOBUF_FIELD_OFFSET(::fedtree::GHPairEnc, _impl_.h_enc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::Paillier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fedtree::Paillier, _impl_.modulus_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Paillier, _impl_.generator_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::SplitPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fedtree::SplitPoint, _impl_.gain_),
  PROTOBUF_FIELD_OFFSET(::fedtree::SplitPoint, _impl_.fea_missing_g_),
  PROTOBUF_FIELD_OFFSET(::fedtree::SplitPoint, _impl_.fea_missing_h_),
  PROTOBUF_FIELD_OFFSET(::fedtree::SplitPoint, _impl_.rch_sum_g_),
  PROTOBUF_FIELD_OFFSET(::fedtree::SplitPoint, _impl_.rch_sum_h_),
  PROTOBUF_FIELD_OFFSET(::fedtree::SplitPoint, _impl_.default_right_),
  PROTOBUF_FIELD_OFFSET(::fedtree::SplitPoint, _impl_.nid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::SplitPoint, _impl_.split_fea_id_),
  PROTOBUF_FIELD_OFFSET(::fedtree::SplitPoint, _impl_.fval_),
  PROTOBUF_FIELD_OFFSET(::fedtree::SplitPoint, _impl_.split_bid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::SplitPoint, _impl_.no_split_value_update_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::Score, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fedtree::Score, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::PID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fedtree::PID, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::Ready, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fedtree::Ready, _impl_.ready_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::DatasetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fedtree::DatasetInfo, _impl_.n_bins_),
  PROTOBUF_FIELD_OFFSET(::fedtree::DatasetInfo, _impl_.n_columns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::FID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fedtree::FID, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::BestInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fedtree::BestInfo, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::BestInfo, _impl_.nid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::BestInfo, _impl_.idx_),
  PROTOBUF_FIELD_OFFSET(::fedtree::BestInfo, _impl_.global_fid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::BestInfo, _impl_.gain_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEnc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEnc, _impl_.final_id_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEnc, _impl_.lch_index_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEnc, _impl_.rch_index_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEnc, _impl_.parent_index_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEnc, _impl_.gain_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEnc, _impl_.base_weight_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEnc, _impl_.split_feature_id_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEnc, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEnc, _impl_.split_value_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEnc, _impl_.split_bid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEnc, _impl_.default_right_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEnc, _impl_.is_leaf_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEnc, _impl_.is_valid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEnc, _impl_.is_pruned_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEnc, _impl_.sum_gh_pair_g_enc_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEnc, _impl_.sum_gh_pair_h_enc_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEnc, _impl_.n_instances_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, _impl_.final_id_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, _impl_.lch_index_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, _impl_.rch_index_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, _impl_.parent_index_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, _impl_.gain_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, _impl_.base_weight_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, _impl_.split_feature_id_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, _impl_.split_value_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, _impl_.split_bid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, _impl_.default_right_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, _impl_.is_leaf_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, _impl_.is_valid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, _impl_.is_pruned_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, _impl_.sum_gh_pair_g_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, _impl_.sum_gh_pair_h_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, _impl_.n_instances_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEncArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEncArray, _impl_.final_id_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEncArray, _impl_.lch_index_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEncArray, _impl_.rch_index_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEncArray, _impl_.parent_index_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEncArray, _impl_.gain_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEncArray, _impl_.base_weight_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEncArray, _impl_.split_feature_id_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEncArray, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEncArray, _impl_.split_value_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEncArray, _impl_.split_bid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEncArray, _impl_.default_right_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEncArray, _impl_.is_leaf_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEncArray, _impl_.is_valid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEncArray, _impl_.is_pruned_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEncArray, _impl_.sum_gh_pair_g_enc_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEncArray, _impl_.sum_gh_pair_h_enc_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEncArray, _impl_.n_instances_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeArray, _impl_.final_id_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeArray, _impl_.lch_index_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeArray, _impl_.rch_index_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeArray, _impl_.parent_index_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeArray, _impl_.gain_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeArray, _impl_.base_weight_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeArray, _impl_.split_feature_id_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeArray, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeArray, _impl_.split_value_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeArray, _impl_.split_bid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeArray, _impl_.default_right_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeArray, _impl_.is_leaf_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeArray, _impl_.is_valid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeArray, _impl_.is_pruned_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeArray, _impl_.sum_gh_pair_g_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeArray, _impl_.sum_gh_pair_h_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeArray, _impl_.n_instances_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::Ins2NodeID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fedtree::Ins2NodeID, _impl_.iid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Ins2NodeID, _impl_.nid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::Ins2NodeIDBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fedtree::Ins2NodeIDBatch, _impl_.iid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Ins2NodeIDBatch, _impl_.nid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::DHPublicKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fedtree::DHPublicKey, _impl_.pk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::DHPublicKeys, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fedtree::DHPublicKeys, _impl_.pk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::SANoise, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fedtree::SANoise, _impl_.noise_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::SANoises, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fedtree::SANoises, _impl_.noises_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::CutPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fedtree::CutPoints, _impl_.cut_points_val_),
  PROTOBUF_FIELD_OFFSET(::fedtree::CutPoints, _impl_.cut_col_ptr_),
  PROTOBUF_FIELD_OFFSET(::fedtree::CutPoints, _impl_.cut_fid_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::fedtree::FIDBatch)},
  { 7, -1, -1, sizeof(::fedtree::GHBatch)},
  { 15, -1, -1, sizeof(::fedtree::GHEncBatch)},
  { 23, -1, -1, sizeof(::fedtree::GHPair)},
  { 31, -1, -1, sizeof(::fedtree::GHArray)},
  { 38, -1, -1, sizeof(::fedtree::GHPairEnc)},
  { 46, -1, -1, sizeof(::fedtree::Paillier)},
  { 54, -1, -1, sizeof(::fedtree::SplitPoint)},
  { 71, -1, -1, sizeof(::fedtree::Score)},
  { 78, -1, -1, sizeof(::fedtree::PID)},
  { 85, -1, -1, sizeof(::fedtree::Ready)},
  { 92, -1, -1, sizeof(::fedtree::DatasetInfo)},
  { 100, -1, -1, sizeof(::fedtree::FID)},
  { 107, -1, -1, sizeof(::fedtree::BestInfo)},
  { 118, -1, -1, sizeof(::fedtree::NodeEnc)},
  { 141, -1, -1, sizeof(::fedtree::Node)},
  { 164, -1, -1, sizeof(::fedtree::NodeEncArray)},
  { 187, -1, -1, sizeof(::fedtree::NodeArray)},
  { 210, -1, -1, sizeof(::fedtree::Ins2NodeID)},
  { 218, -1, -1, sizeof(::fedtree::Ins2NodeIDBatch)},
  { 226, -1, -1, sizeof(::fedtree::DHPublicKey)},
  { 233, -1, -1, sizeof(::fedtree::DHPublicKeys)},
  { 240, -1, -1, sizeof(::fedtree::SANoise)},
  { 247, -1, -1, sizeof(::fedtree::SANoises)},
  { 254, -1, -1, sizeof(::fedtree::CutPoints)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::fedtree::_FIDBatch_default_instance_._instance,
  &::fedtree::_GHBatch_default_instance_._instance,
  &::fedtree::_GHEncBatch_default_instance_._instance,
  &::fedtree::_GHPair_default_instance_._instance,
  &::fedtree::_GHArray_default_instance_._instance,
  &::fedtree::_GHPairEnc_default_instance_._instance,
  &::fedtree::_Paillier_default_instance_._instance,
  &::fedtree::_SplitPoint_default_instance_._instance,
  &::fedtree::_Score_default_instance_._instance,
  &::fedtree::_PID_default_instance_._instance,
  &::fedtree::_Ready_default_instance_._instance,
  &::fedtree::_DatasetInfo_default_instance_._instance,
  &::fedtree::_FID_default_instance_._instance,
  &::fedtree::_BestInfo_default_instance_._instance,
  &::fedtree::_NodeEnc_default_instance_._instance,
  &::fedtree::_Node_default_instance_._instance,
  &::fedtree::_NodeEncArray_default_instance_._instance,
  &::fedtree::_NodeArray_default_instance_._instance,
  &::fedtree::_Ins2NodeID_default_instance_._instance,
  &::fedtree::_Ins2NodeIDBatch_default_instance_._instance,
  &::fedtree::_DHPublicKey_default_instance_._instance,
  &::fedtree::_DHPublicKeys_default_instance_._instance,
  &::fedtree::_SANoise_default_instance_._instance,
  &::fedtree::_SANoises_default_instance_._instance,
  &::fedtree::_CutPoints_default_instance_._instance,
};

const char descriptor_table_protodef_fedtree_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rfedtree.proto\022\007fedtree\"\032\n\010FIDBatch\022\016\n\002"
  "id\030\001 \003(\005B\002\020\001\"\'\n\007GHBatch\022\r\n\001g\030\001 \003(\001B\002\020\001\022\r"
  "\n\001h\030\002 \003(\001B\002\020\001\"*\n\nGHEncBatch\022\r\n\005g_enc\030\001 \003"
  "(\t\022\r\n\005h_enc\030\002 \003(\t\"\036\n\006GHPair\022\t\n\001g\030\001 \001(\001\022\t"
  "\n\001h\030\002 \001(\001\"\030\n\007GHArray\022\r\n\001g\030\001 \003(\001B\002\020\001\")\n\tG"
  "HPairEnc\022\r\n\005g_enc\030\001 \001(\t\022\r\n\005h_enc\030\002 \001(\t\"."
  "\n\010Paillier\022\017\n\007modulus\030\001 \001(\t\022\021\n\tgenerator"
  "\030\002 \001(\t\"\350\001\n\nSplitPoint\022\014\n\004gain\030\001 \001(\002\022\025\n\rf"
  "ea_missing_g\030\002 \001(\002\022\025\n\rfea_missing_h\030\003 \001("
  "\002\022\021\n\trch_sum_g\030\004 \001(\002\022\021\n\trch_sum_h\030\005 \001(\002\022"
  "\025\n\rdefault_right\030\006 \001(\010\022\013\n\003nid\030\007 \001(\005\022\024\n\014s"
  "plit_fea_id\030\010 \001(\005\022\014\n\004fval\030\t \001(\002\022\021\n\tsplit"
  "_bid\030\n \001(\005\022\035\n\025no_split_value_update\030\013 \001("
  "\010\"\030\n\005Score\022\017\n\007content\030\001 \001(\002\"\021\n\003PID\022\n\n\002id"
  "\030\001 \001(\005\"\026\n\005Ready\022\r\n\005ready\030\001 \001(\010\"0\n\013Datase"
  "tInfo\022\016\n\006n_bins\030\001 \001(\005\022\021\n\tn_columns\030\002 \001(\005"
  "\"\021\n\003FID\022\n\n\002id\030\001 \001(\005\"S\n\010BestInfo\022\013\n\003pid\030\001"
  " \001(\005\022\013\n\003nid\030\002 \001(\005\022\013\n\003idx\030\003 \001(\005\022\022\n\nglobal"
  "_fid\030\004 \001(\005\022\014\n\004gain\030\005 \001(\001\"\341\002\n\007NodeEnc\022\020\n\010"
  "final_id\030\001 \001(\005\022\021\n\tlch_index\030\002 \001(\005\022\021\n\trch"
  "_index\030\003 \001(\005\022\024\n\014parent_index\030\004 \001(\005\022\014\n\004ga"
  "in\030\005 \001(\002\022\023\n\013base_weight\030\006 \001(\002\022\030\n\020split_f"
  "eature_id\030\007 \001(\005\022\013\n\003pid\030\010 \001(\005\022\023\n\013split_va"
  "lue\030\t \001(\002\022\021\n\tsplit_bid\030\n \001(\005\022\025\n\rdefault_"
  "right\030\013 \001(\010\022\017\n\007is_leaf\030\014 \001(\010\022\020\n\010is_valid"
  "\030\r \001(\010\022\021\n\tis_pruned\030\016 \001(\010\022\031\n\021sum_gh_pair"
  "_g_enc\030\017 \001(\t\022\031\n\021sum_gh_pair_h_enc\030\020 \001(\t\022"
  "\023\n\013n_instances\030\021 \001(\005\"\326\002\n\004Node\022\020\n\010final_i"
  "d\030\001 \001(\005\022\021\n\tlch_index\030\002 \001(\005\022\021\n\trch_index\030"
  "\003 \001(\005\022\024\n\014parent_index\030\004 \001(\005\022\014\n\004gain\030\005 \001("
  "\002\022\023\n\013base_weight\030\006 \001(\002\022\030\n\020split_feature_"
  "id\030\007 \001(\005\022\013\n\003pid\030\010 \001(\005\022\023\n\013split_value\030\t \001"
  "(\002\022\021\n\tsplit_bid\030\n \001(\005\022\025\n\rdefault_right\030\013"
  " \001(\010\022\017\n\007is_leaf\030\014 \001(\010\022\020\n\010is_valid\030\r \001(\010\022"
  "\021\n\tis_pruned\030\016 \001(\010\022\025\n\rsum_gh_pair_g\030\017 \001("
  "\002\022\025\n\rsum_gh_pair_h\030\020 \001(\002\022\023\n\013n_instances\030"
  "\021 \001(\005\"\242\003\n\014NodeEncArray\022\024\n\010final_id\030\001 \003(\005"
  "B\002\020\001\022\025\n\tlch_index\030\002 \003(\005B\002\020\001\022\025\n\trch_index"
  "\030\003 \003(\005B\002\020\001\022\030\n\014parent_index\030\004 \003(\005B\002\020\001\022\020\n\004"
  "gain\030\005 \003(\002B\002\020\001\022\027\n\013base_weight\030\006 \003(\002B\002\020\001\022"
  "\034\n\020split_feature_id\030\007 \003(\005B\002\020\001\022\017\n\003pid\030\010 \003"
  "(\005B\002\020\001\022\027\n\013split_value\030\t \003(\002B\002\020\001\022\025\n\tsplit"
  "_bid\030\n \003(\005B\002\020\001\022\031\n\rdefault_right\030\013 \003(\010B\002\020"
  "\001\022\023\n\007is_leaf\030\014 \003(\010B\002\020\001\022\024\n\010is_valid\030\r \003(\010"
  "B\002\020\001\022\025\n\tis_pruned\030\016 \003(\010B\002\020\001\022\031\n\021sum_gh_pa"
  "ir_g_enc\030\017 \003(\t\022\031\n\021sum_gh_pair_h_enc\030\020 \003("
  "\t\022\027\n\013n_instances\030\021 \003(\005B\002\020\001\"\237\003\n\tNodeArray"
  "\022\024\n\010final_id\030\001 \003(\005B\002\020\001\022\025\n\tlch_index\030\002 \003("
  "\005B\002\020\001\022\025\n\trch_index\030\003 \003(\005B\002\020\001\022\030\n\014parent_i"
  "ndex\030\004 \003(\005B\002\020\001\022\020\n\004gain\030\005 \003(\002B\002\020\001\022\027\n\013base"
  "_weight\030\006 \003(\002B\002\020\001\022\034\n\020split_feature_id\030\007 "
  "\003(\005B\002\020\001\022\017\n\003pid\030\010 \003(\005B\002\020\001\022\027\n\013split_value\030"
  "\t \003(\002B\002\020\001\022\025\n\tsplit_bid\030\n \003(\005B\002\020\001\022\031\n\rdefa"
  "ult_right\030\013 \003(\010B\002\020\001\022\023\n\007is_leaf\030\014 \003(\010B\002\020\001"
  "\022\024\n\010is_valid\030\r \003(\010B\002\020\001\022\025\n\tis_pruned\030\016 \003("
  "\010B\002\020\001\022\031\n\rsum_gh_pair_g\030\017 \003(\002B\002\020\001\022\031\n\rsum_"
  "gh_pair_h\030\020 \003(\002B\002\020\001\022\027\n\013n_instances\030\021 \003(\005"
  "B\002\020\001\"&\n\nIns2NodeID\022\013\n\003iid\030\001 \001(\005\022\013\n\003nid\030\002"
  " \001(\005\"3\n\017Ins2NodeIDBatch\022\017\n\003iid\030\001 \003(\005B\002\020\001"
  "\022\017\n\003nid\030\002 \003(\005B\002\020\001\"\031\n\013DHPublicKey\022\n\n\002pk\030\001"
  " \001(\t\"\032\n\014DHPublicKeys\022\n\n\002pk\030\001 \003(\t\"\030\n\007SANo"
  "ise\022\r\n\005noise\030\001 \001(\t\"\032\n\010SANoises\022\016\n\006noises"
  "\030\001 \003(\t\"U\n\tCutPoints\022\032\n\016cut_points_val\030\001 "
  "\003(\001B\002\020\001\022\027\n\013cut_col_ptr\030\002 \003(\005B\002\020\001\022\023\n\007cut_"
  "fid\030\003 \003(\005B\002\020\0012\370\023\n\007FedTree\0228\n\026TriggerUpda"
  "teGradients\022\014.fedtree.PID\032\016.fedtree.Read"
  "y\"\000\0222\n\020TriggerBuildInit\022\014.fedtree.PID\032\016."
  "fedtree.Ready\"\000\0221\n\014GetGradients\022\014.fedtre"
  "e.PID\032\017.fedtree.GHPair\"\0000\001\0227\n\017SendDatase"
  "tInfo\022\024.fedtree.DatasetInfo\032\014.fedtree.PI"
  "D\"\000\0223\n\016SendHistograms\022\017.fedtree.GHPair\032\014"
  ".fedtree.PID\"\000(\001\022-\n\013SendHistFid\022\014.fedtre"
  "e.FID\032\014.fedtree.PID\"\000(\001\0222\n\020TriggerAggreg"
  "ate\022\014.fedtree.PID\032\016.fedtree.Ready\"\000\0222\n\013G"
  "etBestInfo\022\014.fedtree.PID\032\021.fedtree.BestI"
  "nfo\"\0000\001\022)\n\010SendNode\022\r.fedtree.Node\032\014.fed"
  "tree.PID\"\000\0227\n\016SendIns2NodeID\022\023.fedtree.I"
  "ns2NodeID\032\014.fedtree.PID\"\000(\001\022+\n\010GetNodes\022"
  "\014.fedtree.PID\032\r.fedtree.Node\"\0000\001\0226\n\rGetI"
  "ns2NodeID\022\014.fedtree.PID\032\023.fedtree.Ins2No"
  "deID\"\0000\001\0221\n\017CheckIfContinue\022\014.fedtree.PI"
  "D\032\016.fedtree.Ready\"\000\022.\n\014TriggerPrune\022\014.fe"
  "dtree.PID\032\016.fedtree.Ready\"\000\0223\n\021TriggerPr"
  "intScore\022\014.fedtree.PID\032\016.fedtree.Ready\"\000"
  "\022.\n\tSendRange\022\017.fedtree.GHPair\032\014.fedtree"
  ".PID\"\000(\001\022,\n\nTriggerCut\022\014.fedtree.PID\032\016.f"
  "edtree.Ready\"\000\022-\n\010GetRange\022\014.fedtree.PID"
  "\032\017.fedtree.GHPair\"\0000\001\022)\n\006SendGH\022\017.fedtre"
  "e.GHPair\032\014.fedtree.PID\"\000\0224\n\014SendDHPubKey"
  "\022\024.fedtree.DHPublicKey\032\014.fedtree.PID\"\000\0227"
  "\n\014GetDHPubKeys\022\014.fedtree.PID\032\025.fedtree.D"
  "HPublicKeys\"\0000\001\022/\n\nSendNoises\022\021.fedtree."
  "SANoises\032\014.fedtree.PID\"\000\0220\n\tGetNoises\022\014."
  "fedtree.PID\032\021.fedtree.SANoises\"\0000\001\0223\n\rSe"
  "ndCutPoints\022\022.fedtree.CutPoints\032\014.fedtre"
  "e.PID\"\000\0224\n\014GetCutPoints\022\014.fedtree.PID\032\022."
  "fedtree.CutPoints\"\0000\001\0225\n\023TriggerBuildUsi"
  "ngGH\022\014.fedtree.PID\032\016.fedtree.Ready\"\000\0221\n\017"
  "TriggerCalcTree\022\014.fedtree.PID\032\016.fedtree."
  "Ready\"\000\022*\n\013GetRootNode\022\014.fedtree.PID\032\r.f"
  "edtree.Node\0227\n\016GetSplitPoints\022\014.fedtree."
  "PID\032\023.fedtree.SplitPoint\"\0000\001\0222\n\020HCheckIf"
  "Continue\022\014.fedtree.PID\032\016.fedtree.Ready\"\000"
  "\022/\n\013ScoreReduce\022\016.fedtree.Score\032\016.fedtre"
  "e.Score\"\000\0221\n\017TriggerHomoInit\022\014.fedtree.P"
  "ID\032\016.fedtree.Ready\"\000\022/\n\rTriggerSAInit\022\014."
  "fedtree.PID\032\016.fedtree.Ready\"\000\0220\n\013GetPail"
  "lier\022\014.fedtree.PID\032\021.fedtree.Paillier\"\000\022"
  "9\n\021SendHistogramsEnc\022\022.fedtree.GHPairEnc"
  "\032\014.fedtree.PID\"\000(\001\0229\n\025SendBatchedHistogr"
  "ams\022\020.fedtree.GHArray\032\014.fedtree.PID\"\000\022:\n"
  "\024SendHistogramBatches\022\020.fedtree.GHBatch\032"
  "\014.fedtree.PID\"\000(\001\0229\n\022SendHistFidBatches\022"
  "\021.fedtree.FIDBatch\032\014.fedtree.PID\"\000(\001\022B\n\024"
  "GetIns2NodeIDBatches\022\014.fedtree.PID\032\030.fed"
  "tree.Ins2NodeIDBatch\"\0000\001\022C\n\025SendIns2Node"
  "IDBatches\022\030.fedtree.Ins2NodeIDBatch\032\014.fe"
  "dtree.PID\"\000(\001\0228\n\022GetGradientBatches\022\014.fe"
  "dtree.PID\032\020.fedtree.GHBatch\"\0000\001\022>\n\025GetGr"
  "adientBatchesEnc\022\014.fedtree.PID\032\023.fedtree"
  ".GHEncBatch\"\0000\001\022/\n\013SendNodeEnc\022\020.fedtree"
  ".NodeEnc\032\014.fedtree.PID\"\000\022/\n\tSendNodes\022\022."
  "fedtree.NodeArray\032\014.fedtree.PID\"\000\0225\n\014Sen"
  "dNodesEnc\022\025.fedtree.NodeEncArray\032\014.fedtr"
  "ee.PID\"\000\022@\n\027SendHistogramBatchesEnc\022\023.fe"
  "dtree.GHEncBatch\032\014.fedtree.PID\"\000(\001\022,\n\nSt"
  "opServer\022\014.fedtree.PID\032\016.fedtree.Score\"\000"
  "\022.\n\014BeginBarrier\022\014.fedtree.PID\032\016.fedtree"
  ".Ready\"\000b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_fedtree_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_fedtree_2eproto = {
    false, false, 5136, descriptor_table_protodef_fedtree_2eproto,
    "fedtree.proto",
    &descriptor_table_fedtree_2eproto_once, nullptr, 0, 25,
    schemas, file_default_instances, TableStruct_fedtree_2eproto::offsets,
    file_level_metadata_fedtree_2eproto, file_level_enum_descriptors_fedtree_2eproto,
    file_level_service_descriptors_fedtree_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_fedtree_2eproto_getter() {
  return &descriptor_table_fedtree_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_fedtree_2eproto(&descriptor_table_fedtree_2eproto);
namespace fedtree {

// ===================================================================

class FIDBatch::_Internal {
 public:
};

FIDBatch::FIDBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fedtree.FIDBatch)
}
FIDBatch::FIDBatch(const FIDBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FIDBatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){from._impl_.id_}
    , /*decltype(_impl_._id_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fedtree.FIDBatch)
}

inline void FIDBatch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){arena}
    , /*decltype(_impl_._id_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FIDBatch::~FIDBatch() {
  // @@protoc_insertion_point(destructor:fedtree.FIDBatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FIDBatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.~RepeatedField();
}

void FIDBatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FIDBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.FIDBatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FIDBatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 id = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FIDBatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.FIDBatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 id = 1 [packed = true];
  {
    int byte_size = _impl_._id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.FIDBatch)
  return target;
}

size_t FIDBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.FIDBatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 id = 1 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.id_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FIDBatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FIDBatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FIDBatch::GetClassData() const { return &_class_data_; }


void FIDBatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FIDBatch*>(&to_msg);
  auto& from = static_cast<const FIDBatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fedtree.FIDBatch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.id_.MergeFrom(from._impl_.id_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FIDBatch::CopyFrom(const FIDBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.FIDBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FIDBatch::IsInitialized() const {
  return true;
}

void FIDBatch::InternalSwap(FIDBatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.id_.InternalSwap(&other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FIDBatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fedtree_2eproto_getter, &descriptor_table_fedtree_2eproto_once,
      file_level_metadata_fedtree_2eproto[0]);
}

// ===================================================================

class GHBatch::_Internal {
 public:
};

GHBatch::GHBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fedtree.GHBatch)
}
GHBatch::GHBatch(const GHBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GHBatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.g_){from._impl_.g_}
    , decltype(_impl_.h_){from._impl_.h_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fedtree.GHBatch)
}

inline void GHBatch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.g_){arena}
    , decltype(_impl_.h_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GHBatch::~GHBatch() {
  // @@protoc_insertion_point(destructor:fedtree.GHBatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GHBatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.g_.~RepeatedField();
  _impl_.h_.~RepeatedField();
}

void GHBatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GHBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.GHBatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.g_.Clear();
  _impl_.h_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GHBatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double g = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_g(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 9) {
          _internal_add_g(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double h = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_h(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_h(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GHBatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.GHBatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double g = 1 [packed = true];
  if (this->_internal_g_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_g(), target);
  }

  // repeated double h = 2 [packed = true];
  if (this->_internal_h_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_h(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.GHBatch)
  return target;
}

size_t GHBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.GHBatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double g = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_g_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double h = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_h_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GHBatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GHBatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GHBatch::GetClassData() const { return &_class_data_; }


void GHBatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GHBatch*>(&to_msg);
  auto& from = static_cast<const GHBatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fedtree.GHBatch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.g_.MergeFrom(from._impl_.g_);
  _this->_impl_.h_.MergeFrom(from._impl_.h_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GHBatch::CopyFrom(const GHBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.GHBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GHBatch::IsInitialized() const {
  return true;
}

void GHBatch::InternalSwap(GHBatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.g_.InternalSwap(&other->_impl_.g_);
  _impl_.h_.InternalSwap(&other->_impl_.h_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GHBatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fedtree_2eproto_getter, &descriptor_table_fedtree_2eproto_once,
      file_level_metadata_fedtree_2eproto[1]);
}

// ===================================================================

class GHEncBatch::_Internal {
 public:
};

GHEncBatch::GHEncBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fedtree.GHEncBatch)
}
GHEncBatch::GHEncBatch(const GHEncBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GHEncBatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.g_enc_){from._impl_.g_enc_}
    , decltype(_impl_.h_enc_){from._impl_.h_enc_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fedtree.GHEncBatch)
}

inline void GHEncBatch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.g_enc_){arena}
    , decltype(_impl_.h_enc_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GHEncBatch::~GHEncBatch() {
  // @@protoc_insertion_point(destructor:fedtree.GHEncBatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GHEncBatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.g_enc_.~RepeatedPtrField();
  _impl_.h_enc_.~RepeatedPtrField();
}

void GHEncBatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GHEncBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.GHEncBatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.g_enc_.Clear();
  _impl_.h_enc_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GHEncBatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string g_enc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_g_enc();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "fedtree.GHEncBatch.g_enc"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string h_enc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_h_enc();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "fedtree.GHEncBatch.h_enc"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GHEncBatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.GHEncBatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string g_enc = 1;
  for (int i = 0, n = this->_internal_g_enc_size(); i < n; i++) {
    const auto& s = this->_internal_g_enc(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fedtree.GHEncBatch.g_enc");
    target = stream->WriteString(1, s, target);
  }

  // repeated string h_enc = 2;
  for (int i = 0, n = this->_internal_h_enc_size(); i < n; i++) {
    const auto& s = this->_internal_h_enc(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fedtree.GHEncBatch.h_enc");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.GHEncBatch)
  return target;
}

size_t GHEncBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.GHEncBatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string g_enc = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.g_enc_.size());
  for (int i = 0, n = _impl_.g_enc_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.g_enc_.Get(i));
  }

  // repeated string h_enc = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.h_enc_.size());
  for (int i = 0, n = _impl_.h_enc_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.h_enc_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GHEncBatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GHEncBatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GHEncBatch::GetClassData() const { return &_class_data_; }


void GHEncBatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GHEncBatch*>(&to_msg);
  auto& from = static_cast<const GHEncBatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fedtree.GHEncBatch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.g_enc_.MergeFrom(from._impl_.g_enc_);
  _this->_impl_.h_enc_.MergeFrom(from._impl_.h_enc_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GHEncBatch::CopyFrom(const GHEncBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.GHEncBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GHEncBatch::IsInitialized() const {
  return true;
}

void GHEncBatch::InternalSwap(GHEncBatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.g_enc_.InternalSwap(&other->_impl_.g_enc_);
  _impl_.h_enc_.InternalSwap(&other->_impl_.h_enc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GHEncBatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fedtree_2eproto_getter, &descriptor_table_fedtree_2eproto_once,
      file_level_metadata_fedtree_2eproto[2]);
}

// ===================================================================

class GHPair::_Internal {
 public:
};

GHPair::GHPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fedtree.GHPair)
}
GHPair::GHPair(const GHPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GHPair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.g_){}
    , decltype(_impl_.h_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.g_, &from._impl_.g_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.h_) -
    reinterpret_cast<char*>(&_impl_.g_)) + sizeof(_impl_.h_));
  // @@protoc_insertion_point(copy_constructor:fedtree.GHPair)
}

inline void GHPair::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.g_){0}
    , decltype(_impl_.h_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GHPair::~GHPair() {
  // @@protoc_insertion_point(destructor:fedtree.GHPair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GHPair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GHPair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GHPair::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.GHPair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.g_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.h_) -
      reinterpret_cast<char*>(&_impl_.g_)) + sizeof(_impl_.h_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GHPair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double g = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double h = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GHPair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.GHPair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double g = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_g = this->_internal_g();
  uint64_t raw_g;
  memcpy(&raw_g, &tmp_g, sizeof(tmp_g));
  if (raw_g != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_g(), target);
  }

  // double h = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_h = this->_internal_h();
  uint64_t raw_h;
  memcpy(&raw_h, &tmp_h, sizeof(tmp_h));
  if (raw_h != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_h(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.GHPair)
  return target;
}

size_t GHPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.GHPair)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double g = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_g = this->_internal_g();
  uint64_t raw_g;
  memcpy(&raw_g, &tmp_g, sizeof(tmp_g));
  if (raw_g != 0) {
    total_size += 1 + 8;
  }

  // double h = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_h = this->_internal_h();
  uint64_t raw_h;
  memcpy(&raw_h, &tmp_h, sizeof(tmp_h));
  if (raw_h != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GHPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GHPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GHPair::GetClassData() const { return &_class_data_; }


void GHPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GHPair*>(&to_msg);
  auto& from = static_cast<const GHPair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fedtree.GHPair)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_g = from._internal_g();
  uint64_t raw_g;
  memcpy(&raw_g, &tmp_g, sizeof(tmp_g));
  if (raw_g != 0) {
    _this->_internal_set_g(from._internal_g());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_h = from._internal_h();
  uint64_t raw_h;
  memcpy(&raw_h, &tmp_h, sizeof(tmp_h));
  if (raw_h != 0) {
    _this->_internal_set_h(from._internal_h());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GHPair::CopyFrom(const GHPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.GHPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GHPair::IsInitialized() const {
  return true;
}

void GHPair::InternalSwap(GHPair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GHPair, _impl_.h_)
      + sizeof(GHPair::_impl_.h_)
      - PROTOBUF_FIELD_OFFSET(GHPair, _impl_.g_)>(
          reinterpret_cast<char*>(&_impl_.g_),
          reinterpret_cast<char*>(&other->_impl_.g_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GHPair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fedtree_2eproto_getter, &descriptor_table_fedtree_2eproto_once,
      file_level_metadata_fedtree_2eproto[3]);
}

// ===================================================================

class GHArray::_Internal {
 public:
};

GHArray::GHArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fedtree.GHArray)
}
GHArray::GHArray(const GHArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GHArray* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.g_){from._impl_.g_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fedtree.GHArray)
}

inline void GHArray::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.g_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GHArray::~GHArray() {
  // @@protoc_insertion_point(destructor:fedtree.GHArray)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GHArray::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.g_.~RepeatedField();
}

void GHArray::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GHArray::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.GHArray)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.g_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GHArray::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double g = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_g(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 9) {
          _internal_add_g(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GHArray::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.GHArray)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double g = 1 [packed = true];
  if (this->_internal_g_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_g(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.GHArray)
  return target;
}

size_t GHArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.GHArray)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double g = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_g_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GHArray::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GHArray::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GHArray::GetClassData() const { return &_class_data_; }


void GHArray::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GHArray*>(&to_msg);
  auto& from = static_cast<const GHArray&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fedtree.GHArray)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.g_.MergeFrom(from._impl_.g_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GHArray::CopyFrom(const GHArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.GHArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GHArray::IsInitialized() const {
  return true;
}

void GHArray::InternalSwap(GHArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.g_.InternalSwap(&other->_impl_.g_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GHArray::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fedtree_2eproto_getter, &descriptor_table_fedtree_2eproto_once,
      file_level_metadata_fedtree_2eproto[4]);
}

// ===================================================================

class GHPairEnc::_Internal {
 public:
};

GHPairEnc::GHPairEnc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fedtree.GHPairEnc)
}
GHPairEnc::GHPairEnc(const GHPairEnc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GHPairEnc* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.g_enc_){}
    , decltype(_impl_.h_enc_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.g_enc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.g_enc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_g_enc().empty()) {
    _this->_impl_.g_enc_.Set(from._internal_g_enc(), 
      _this->GetArenaForAllocation());
  }
  _impl_.h_enc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.h_enc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_h_enc().empty()) {
    _this->_impl_.h_enc_.Set(from._internal_h_enc(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:fedtree.GHPairEnc)
}

inline void GHPairEnc::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.g_enc_){}
    , decltype(_impl_.h_enc_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.g_enc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.g_enc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.h_enc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.h_enc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GHPairEnc::~GHPairEnc() {
  // @@protoc_insertion_point(destructor:fedtree.GHPairEnc)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GHPairEnc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.g_enc_.Destroy();
  _impl_.h_enc_.Destroy();
}

void GHPairEnc::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GHPairEnc::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.GHPairEnc)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.g_enc_.ClearToEmpty();
  _impl_.h_enc_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GHPairEnc::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string g_enc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_g_enc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fedtree.GHPairEnc.g_enc"));
        } else
          goto handle_unusual;
        continue;
      // string h_enc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_h_enc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fedtree.GHPairEnc.h_enc"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GHPairEnc::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.GHPairEnc)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string g_enc = 1;
  if (!this->_internal_g_enc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_g_enc().data(), static_cast<int>(this->_internal_g_enc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fedtree.GHPairEnc.g_enc");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_g_enc(), target);
  }

  // string h_enc = 2;
  if (!this->_internal_h_enc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_h_enc().data(), static_cast<int>(this->_internal_h_enc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fedtree.GHPairEnc.h_enc");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_h_enc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.GHPairEnc)
  return target;
}

size_t GHPairEnc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.GHPairEnc)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string g_enc = 1;
  if (!this->_internal_g_enc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_g_enc());
  }

  // string h_enc = 2;
  if (!this->_internal_h_enc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_h_enc());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GHPairEnc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GHPairEnc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GHPairEnc::GetClassData() const { return &_class_data_; }


void GHPairEnc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GHPairEnc*>(&to_msg);
  auto& from = static_cast<const GHPairEnc&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fedtree.GHPairEnc)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_g_enc().empty()) {
    _this->_internal_set_g_enc(from._internal_g_enc());
  }
  if (!from._internal_h_enc().empty()) {
    _this->_internal_set_h_enc(from._internal_h_enc());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GHPairEnc::CopyFrom(const GHPairEnc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.GHPairEnc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GHPairEnc::IsInitialized() const {
  return true;
}

void GHPairEnc::InternalSwap(GHPairEnc* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.g_enc_, lhs_arena,
      &other->_impl_.g_enc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.h_enc_, lhs_arena,
      &other->_impl_.h_enc_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GHPairEnc::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fedtree_2eproto_getter, &descriptor_table_fedtree_2eproto_once,
      file_level_metadata_fedtree_2eproto[5]);
}

// ===================================================================

class Paillier::_Internal {
 public:
};

Paillier::Paillier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fedtree.Paillier)
}
Paillier::Paillier(const Paillier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Paillier* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.modulus_){}
    , decltype(_impl_.generator_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.modulus_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.modulus_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_modulus().empty()) {
    _this->_impl_.modulus_.Set(from._internal_modulus(), 
      _this->GetArenaForAllocation());
  }
  _impl_.generator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.generator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_generator().empty()) {
    _this->_impl_.generator_.Set(from._internal_generator(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:fedtree.Paillier)
}

inline void Paillier::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.modulus_){}
    , decltype(_impl_.generator_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.modulus_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.modulus_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.generator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.generator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Paillier::~Paillier() {
  // @@protoc_insertion_point(destructor:fedtree.Paillier)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Paillier::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.modulus_.Destroy();
  _impl_.generator_.Destroy();
}

void Paillier::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Paillier::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.Paillier)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.modulus_.ClearToEmpty();
  _impl_.generator_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Paillier::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string modulus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_modulus();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fedtree.Paillier.modulus"));
        } else
          goto handle_unusual;
        continue;
      // string generator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_generator();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fedtree.Paillier.generator"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Paillier::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.Paillier)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string modulus = 1;
  if (!this->_internal_modulus().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modulus().data(), static_cast<int>(this->_internal_modulus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fedtree.Paillier.modulus");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_modulus(), target);
  }

  // string generator = 2;
  if (!this->_internal_generator().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_generator().data(), static_cast<int>(this->_internal_generator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fedtree.Paillier.generator");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_generator(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.Paillier)
  return target;
}

size_t Paillier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.Paillier)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string modulus = 1;
  if (!this->_internal_modulus().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modulus());
  }

  // string generator = 2;
  if (!this->_internal_generator().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_generator());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Paillier::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Paillier::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Paillier::GetClassData() const { return &_class_data_; }


void Paillier::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Paillier*>(&to_msg);
  auto& from = static_cast<const Paillier&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fedtree.Paillier)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_modulus().empty()) {
    _this->_internal_set_modulus(from._internal_modulus());
  }
  if (!from._internal_generator().empty()) {
    _this->_internal_set_generator(from._internal_generator());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Paillier::CopyFrom(const Paillier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.Paillier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Paillier::IsInitialized() const {
  return true;
}

void Paillier::InternalSwap(Paillier* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.modulus_, lhs_arena,
      &other->_impl_.modulus_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.generator_, lhs_arena,
      &other->_impl_.generator_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Paillier::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fedtree_2eproto_getter, &descriptor_table_fedtree_2eproto_once,
      file_level_metadata_fedtree_2eproto[6]);
}

// ===================================================================

class SplitPoint::_Internal {
 public:
};

SplitPoint::SplitPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fedtree.SplitPoint)
}
SplitPoint::SplitPoint(const SplitPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SplitPoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gain_){}
    , decltype(_impl_.fea_missing_g_){}
    , decltype(_impl_.fea_missing_h_){}
    , decltype(_impl_.rch_sum_g_){}
    , decltype(_impl_.rch_sum_h_){}
    , decltype(_impl_.nid_){}
    , decltype(_impl_.split_fea_id_){}
    , decltype(_impl_.default_right_){}
    , decltype(_impl_.no_split_value_update_){}
    , decltype(_impl_.fval_){}
    , decltype(_impl_.split_bid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gain_, &from._impl_.gain_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.split_bid_) -
    reinterpret_cast<char*>(&_impl_.gain_)) + sizeof(_impl_.split_bid_));
  // @@protoc_insertion_point(copy_constructor:fedtree.SplitPoint)
}

inline void SplitPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gain_){0}
    , decltype(_impl_.fea_missing_g_){0}
    , decltype(_impl_.fea_missing_h_){0}
    , decltype(_impl_.rch_sum_g_){0}
    , decltype(_impl_.rch_sum_h_){0}
    , decltype(_impl_.nid_){0}
    , decltype(_impl_.split_fea_id_){0}
    , decltype(_impl_.default_right_){false}
    , decltype(_impl_.no_split_value_update_){false}
    , decltype(_impl_.fval_){0}
    , decltype(_impl_.split_bid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SplitPoint::~SplitPoint() {
  // @@protoc_insertion_point(destructor:fedtree.SplitPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SplitPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SplitPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SplitPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.SplitPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.gain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.split_bid_) -
      reinterpret_cast<char*>(&_impl_.gain_)) + sizeof(_impl_.split_bid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SplitPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float gain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float fea_missing_g = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.fea_missing_g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float fea_missing_h = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.fea_missing_h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float rch_sum_g = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.rch_sum_g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float rch_sum_h = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.rch_sum_h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool default_right = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.default_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 nid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 split_fea_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.split_fea_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float fval = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.fval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 split_bid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.split_bid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool no_split_value_update = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.no_split_value_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SplitPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.SplitPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float gain = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gain = this->_internal_gain();
  uint32_t raw_gain;
  memcpy(&raw_gain, &tmp_gain, sizeof(tmp_gain));
  if (raw_gain != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_gain(), target);
  }

  // float fea_missing_g = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fea_missing_g = this->_internal_fea_missing_g();
  uint32_t raw_fea_missing_g;
  memcpy(&raw_fea_missing_g, &tmp_fea_missing_g, sizeof(tmp_fea_missing_g));
  if (raw_fea_missing_g != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_fea_missing_g(), target);
  }

  // float fea_missing_h = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fea_missing_h = this->_internal_fea_missing_h();
  uint32_t raw_fea_missing_h;
  memcpy(&raw_fea_missing_h, &tmp_fea_missing_h, sizeof(tmp_fea_missing_h));
  if (raw_fea_missing_h != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_fea_missing_h(), target);
  }

  // float rch_sum_g = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rch_sum_g = this->_internal_rch_sum_g();
  uint32_t raw_rch_sum_g;
  memcpy(&raw_rch_sum_g, &tmp_rch_sum_g, sizeof(tmp_rch_sum_g));
  if (raw_rch_sum_g != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_rch_sum_g(), target);
  }

  // float rch_sum_h = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rch_sum_h = this->_internal_rch_sum_h();
  uint32_t raw_rch_sum_h;
  memcpy(&raw_rch_sum_h, &tmp_rch_sum_h, sizeof(tmp_rch_sum_h));
  if (raw_rch_sum_h != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_rch_sum_h(), target);
  }

  // bool default_right = 6;
  if (this->_internal_default_right() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_default_right(), target);
  }

  // int32 nid = 7;
  if (this->_internal_nid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_nid(), target);
  }

  // int32 split_fea_id = 8;
  if (this->_internal_split_fea_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_split_fea_id(), target);
  }

  // float fval = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fval = this->_internal_fval();
  uint32_t raw_fval;
  memcpy(&raw_fval, &tmp_fval, sizeof(tmp_fval));
  if (raw_fval != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_fval(), target);
  }

  // int32 split_bid = 10;
  if (this->_internal_split_bid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_split_bid(), target);
  }

  // bool no_split_value_update = 11;
  if (this->_internal_no_split_value_update() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_no_split_value_update(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.SplitPoint)
  return target;
}

size_t SplitPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.SplitPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float gain = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gain = this->_internal_gain();
  uint32_t raw_gain;
  memcpy(&raw_gain, &tmp_gain, sizeof(tmp_gain));
  if (raw_gain != 0) {
    total_size += 1 + 4;
  }

  // float fea_missing_g = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fea_missing_g = this->_internal_fea_missing_g();
  uint32_t raw_fea_missing_g;
  memcpy(&raw_fea_missing_g, &tmp_fea_missing_g, sizeof(tmp_fea_missing_g));
  if (raw_fea_missing_g != 0) {
    total_size += 1 + 4;
  }

  // float fea_missing_h = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fea_missing_h = this->_internal_fea_missing_h();
  uint32_t raw_fea_missing_h;
  memcpy(&raw_fea_missing_h, &tmp_fea_missing_h, sizeof(tmp_fea_missing_h));
  if (raw_fea_missing_h != 0) {
    total_size += 1 + 4;
  }

  // float rch_sum_g = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rch_sum_g = this->_internal_rch_sum_g();
  uint32_t raw_rch_sum_g;
  memcpy(&raw_rch_sum_g, &tmp_rch_sum_g, sizeof(tmp_rch_sum_g));
  if (raw_rch_sum_g != 0) {
    total_size += 1 + 4;
  }

  // float rch_sum_h = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rch_sum_h = this->_internal_rch_sum_h();
  uint32_t raw_rch_sum_h;
  memcpy(&raw_rch_sum_h, &tmp_rch_sum_h, sizeof(tmp_rch_sum_h));
  if (raw_rch_sum_h != 0) {
    total_size += 1 + 4;
  }

  // int32 nid = 7;
  if (this->_internal_nid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nid());
  }

  // int32 split_fea_id = 8;
  if (this->_internal_split_fea_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_split_fea_id());
  }

  // bool default_right = 6;
  if (this->_internal_default_right() != 0) {
    total_size += 1 + 1;
  }

  // bool no_split_value_update = 11;
  if (this->_internal_no_split_value_update() != 0) {
    total_size += 1 + 1;
  }

  // float fval = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fval = this->_internal_fval();
  uint32_t raw_fval;
  memcpy(&raw_fval, &tmp_fval, sizeof(tmp_fval));
  if (raw_fval != 0) {
    total_size += 1 + 4;
  }

  // int32 split_bid = 10;
  if (this->_internal_split_bid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_split_bid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SplitPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SplitPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SplitPoint::GetClassData() const { return &_class_data_; }


void SplitPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SplitPoint*>(&to_msg);
  auto& from = static_cast<const SplitPoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fedtree.SplitPoint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gain = from._internal_gain();
  uint32_t raw_gain;
  memcpy(&raw_gain, &tmp_gain, sizeof(tmp_gain));
  if (raw_gain != 0) {
    _this->_internal_set_gain(from._internal_gain());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fea_missing_g = from._internal_fea_missing_g();
  uint32_t raw_fea_missing_g;
  memcpy(&raw_fea_missing_g, &tmp_fea_missing_g, sizeof(tmp_fea_missing_g));
  if (raw_fea_missing_g != 0) {
    _this->_internal_set_fea_missing_g(from._internal_fea_missing_g());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fea_missing_h = from._internal_fea_missing_h();
  uint32_t raw_fea_missing_h;
  memcpy(&raw_fea_missing_h, &tmp_fea_missing_h, sizeof(tmp_fea_missing_h));
  if (raw_fea_missing_h != 0) {
    _this->_internal_set_fea_missing_h(from._internal_fea_missing_h());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rch_sum_g = from._internal_rch_sum_g();
  uint32_t raw_rch_sum_g;
  memcpy(&raw_rch_sum_g, &tmp_rch_sum_g, sizeof(tmp_rch_sum_g));
  if (raw_rch_sum_g != 0) {
    _this->_internal_set_rch_sum_g(from._internal_rch_sum_g());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rch_sum_h = from._internal_rch_sum_h();
  uint32_t raw_rch_sum_h;
  memcpy(&raw_rch_sum_h, &tmp_rch_sum_h, sizeof(tmp_rch_sum_h));
  if (raw_rch_sum_h != 0) {
    _this->_internal_set_rch_sum_h(from._internal_rch_sum_h());
  }
  if (from._internal_nid() != 0) {
    _this->_internal_set_nid(from._internal_nid());
  }
  if (from._internal_split_fea_id() != 0) {
    _this->_internal_set_split_fea_id(from._internal_split_fea_id());
  }
  if (from._internal_default_right() != 0) {
    _this->_internal_set_default_right(from._internal_default_right());
  }
  if (from._internal_no_split_value_update() != 0) {
    _this->_internal_set_no_split_value_update(from._internal_no_split_value_update());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fval = from._internal_fval();
  uint32_t raw_fval;
  memcpy(&raw_fval, &tmp_fval, sizeof(tmp_fval));
  if (raw_fval != 0) {
    _this->_internal_set_fval(from._internal_fval());
  }
  if (from._internal_split_bid() != 0) {
    _this->_internal_set_split_bid(from._internal_split_bid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SplitPoint::CopyFrom(const SplitPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.SplitPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitPoint::IsInitialized() const {
  return true;
}

void SplitPoint::InternalSwap(SplitPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SplitPoint, _impl_.split_bid_)
      + sizeof(SplitPoint::_impl_.split_bid_)
      - PROTOBUF_FIELD_OFFSET(SplitPoint, _impl_.gain_)>(
          reinterpret_cast<char*>(&_impl_.gain_),
          reinterpret_cast<char*>(&other->_impl_.gain_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SplitPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fedtree_2eproto_getter, &descriptor_table_fedtree_2eproto_once,
      file_level_metadata_fedtree_2eproto[7]);
}

// ===================================================================

class Score::_Internal {
 public:
};

Score::Score(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fedtree.Score)
}
Score::Score(const Score& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Score* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.content_ = from._impl_.content_;
  // @@protoc_insertion_point(copy_constructor:fedtree.Score)
}

inline void Score::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Score::~Score() {
  // @@protoc_insertion_point(destructor:fedtree.Score)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Score::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Score::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Score::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.Score)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Score::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.content_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Score::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.Score)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float content = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_content = this->_internal_content();
  uint32_t raw_content;
  memcpy(&raw_content, &tmp_content, sizeof(tmp_content));
  if (raw_content != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.Score)
  return target;
}

size_t Score::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.Score)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float content = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_content = this->_internal_content();
  uint32_t raw_content;
  memcpy(&raw_content, &tmp_content, sizeof(tmp_content));
  if (raw_content != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Score::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Score::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Score::GetClassData() const { return &_class_data_; }


void Score::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Score*>(&to_msg);
  auto& from = static_cast<const Score&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fedtree.Score)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_content = from._internal_content();
  uint32_t raw_content;
  memcpy(&raw_content, &tmp_content, sizeof(tmp_content));
  if (raw_content != 0) {
    _this->_internal_set_content(from._internal_content());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Score::CopyFrom(const Score& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.Score)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Score::IsInitialized() const {
  return true;
}

void Score::InternalSwap(Score* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.content_, other->_impl_.content_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Score::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fedtree_2eproto_getter, &descriptor_table_fedtree_2eproto_once,
      file_level_metadata_fedtree_2eproto[8]);
}

// ===================================================================

class PID::_Internal {
 public:
};

PID::PID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fedtree.PID)
}
PID::PID(const PID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PID* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:fedtree.PID)
}

inline void PID::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PID::~PID() {
  // @@protoc_insertion_point(destructor:fedtree.PID)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PID::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PID::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.PID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PID::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.PID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.PID)
  return target;
}

size_t PID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.PID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PID::GetClassData() const { return &_class_data_; }


void PID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PID*>(&to_msg);
  auto& from = static_cast<const PID&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fedtree.PID)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PID::CopyFrom(const PID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.PID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PID::IsInitialized() const {
  return true;
}

void PID::InternalSwap(PID* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PID::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fedtree_2eproto_getter, &descriptor_table_fedtree_2eproto_once,
      file_level_metadata_fedtree_2eproto[9]);
}

// ===================================================================

class Ready::_Internal {
 public:
};

Ready::Ready(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fedtree.Ready)
}
Ready::Ready(const Ready& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Ready* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ready_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.ready_ = from._impl_.ready_;
  // @@protoc_insertion_point(copy_constructor:fedtree.Ready)
}

inline void Ready::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ready_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Ready::~Ready() {
  // @@protoc_insertion_point(destructor:fedtree.Ready)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ready::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Ready::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ready::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.Ready)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ready_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ready::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool ready = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ready::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.Ready)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ready = 1;
  if (this->_internal_ready() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ready(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.Ready)
  return target;
}

size_t Ready::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.Ready)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ready = 1;
  if (this->_internal_ready() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ready::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Ready::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ready::GetClassData() const { return &_class_data_; }


void Ready::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Ready*>(&to_msg);
  auto& from = static_cast<const Ready&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fedtree.Ready)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ready() != 0) {
    _this->_internal_set_ready(from._internal_ready());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ready::CopyFrom(const Ready& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.Ready)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ready::IsInitialized() const {
  return true;
}

void Ready::InternalSwap(Ready* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.ready_, other->_impl_.ready_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ready::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fedtree_2eproto_getter, &descriptor_table_fedtree_2eproto_once,
      file_level_metadata_fedtree_2eproto[10]);
}

// ===================================================================

class DatasetInfo::_Internal {
 public:
};

DatasetInfo::DatasetInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fedtree.DatasetInfo)
}
DatasetInfo::DatasetInfo(const DatasetInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DatasetInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.n_bins_){}
    , decltype(_impl_.n_columns_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.n_bins_, &from._impl_.n_bins_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.n_columns_) -
    reinterpret_cast<char*>(&_impl_.n_bins_)) + sizeof(_impl_.n_columns_));
  // @@protoc_insertion_point(copy_constructor:fedtree.DatasetInfo)
}

inline void DatasetInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.n_bins_){0}
    , decltype(_impl_.n_columns_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DatasetInfo::~DatasetInfo() {
  // @@protoc_insertion_point(destructor:fedtree.DatasetInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DatasetInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DatasetInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DatasetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.DatasetInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.n_bins_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.n_columns_) -
      reinterpret_cast<char*>(&_impl_.n_bins_)) + sizeof(_impl_.n_columns_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DatasetInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 n_bins = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.n_bins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 n_columns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.n_columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DatasetInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.DatasetInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 n_bins = 1;
  if (this->_internal_n_bins() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_n_bins(), target);
  }

  // int32 n_columns = 2;
  if (this->_internal_n_columns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_n_columns(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.DatasetInfo)
  return target;
}

size_t DatasetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.DatasetInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 n_bins = 1;
  if (this->_internal_n_bins() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_n_bins());
  }

  // int32 n_columns = 2;
  if (this->_internal_n_columns() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_n_columns());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DatasetInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DatasetInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DatasetInfo::GetClassData() const { return &_class_data_; }


void DatasetInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DatasetInfo*>(&to_msg);
  auto& from = static_cast<const DatasetInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fedtree.DatasetInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_n_bins() != 0) {
    _this->_internal_set_n_bins(from._internal_n_bins());
  }
  if (from._internal_n_columns() != 0) {
    _this->_internal_set_n_columns(from._internal_n_columns());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DatasetInfo::CopyFrom(const DatasetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.DatasetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetInfo::IsInitialized() const {
  return true;
}

void DatasetInfo::InternalSwap(DatasetInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DatasetInfo, _impl_.n_columns_)
      + sizeof(DatasetInfo::_impl_.n_columns_)
      - PROTOBUF_FIELD_OFFSET(DatasetInfo, _impl_.n_bins_)>(
          reinterpret_cast<char*>(&_impl_.n_bins_),
          reinterpret_cast<char*>(&other->_impl_.n_bins_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DatasetInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fedtree_2eproto_getter, &descriptor_table_fedtree_2eproto_once,
      file_level_metadata_fedtree_2eproto[11]);
}

// ===================================================================

class FID::_Internal {
 public:
};

FID::FID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fedtree.FID)
}
FID::FID(const FID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FID* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:fedtree.FID)
}

inline void FID::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FID::~FID() {
  // @@protoc_insertion_point(destructor:fedtree.FID)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FID::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FID::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.FID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FID::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.FID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.FID)
  return target;
}

size_t FID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.FID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FID::GetClassData() const { return &_class_data_; }


void FID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FID*>(&to_msg);
  auto& from = static_cast<const FID&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fedtree.FID)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FID::CopyFrom(const FID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.FID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FID::IsInitialized() const {
  return true;
}

void FID::InternalSwap(FID* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FID::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fedtree_2eproto_getter, &descriptor_table_fedtree_2eproto_once,
      file_level_metadata_fedtree_2eproto[12]);
}

// ===================================================================

class BestInfo::_Internal {
 public:
};

BestInfo::BestInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fedtree.BestInfo)
}
BestInfo::BestInfo(const BestInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BestInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , decltype(_impl_.nid_){}
    , decltype(_impl_.idx_){}
    , decltype(_impl_.global_fid_){}
    , decltype(_impl_.gain_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gain_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.gain_));
  // @@protoc_insertion_point(copy_constructor:fedtree.BestInfo)
}

inline void BestInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){0}
    , decltype(_impl_.nid_){0}
    , decltype(_impl_.idx_){0}
    , decltype(_impl_.global_fid_){0}
    , decltype(_impl_.gain_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BestInfo::~BestInfo() {
  // @@protoc_insertion_point(destructor:fedtree.BestInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BestInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BestInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BestInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.BestInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.gain_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.gain_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BestInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 nid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 global_fid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.global_fid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double gain = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BestInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.BestInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_pid(), target);
  }

  // int32 nid = 2;
  if (this->_internal_nid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_nid(), target);
  }

  // int32 idx = 3;
  if (this->_internal_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_idx(), target);
  }

  // int32 global_fid = 4;
  if (this->_internal_global_fid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_global_fid(), target);
  }

  // double gain = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_gain = this->_internal_gain();
  uint64_t raw_gain;
  memcpy(&raw_gain, &tmp_gain, sizeof(tmp_gain));
  if (raw_gain != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_gain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.BestInfo)
  return target;
}

size_t BestInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.BestInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pid());
  }

  // int32 nid = 2;
  if (this->_internal_nid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nid());
  }

  // int32 idx = 3;
  if (this->_internal_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_idx());
  }

  // int32 global_fid = 4;
  if (this->_internal_global_fid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_global_fid());
  }

  // double gain = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_gain = this->_internal_gain();
  uint64_t raw_gain;
  memcpy(&raw_gain, &tmp_gain, sizeof(tmp_gain));
  if (raw_gain != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BestInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BestInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BestInfo::GetClassData() const { return &_class_data_; }


void BestInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BestInfo*>(&to_msg);
  auto& from = static_cast<const BestInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fedtree.BestInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_nid() != 0) {
    _this->_internal_set_nid(from._internal_nid());
  }
  if (from._internal_idx() != 0) {
    _this->_internal_set_idx(from._internal_idx());
  }
  if (from._internal_global_fid() != 0) {
    _this->_internal_set_global_fid(from._internal_global_fid());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_gain = from._internal_gain();
  uint64_t raw_gain;
  memcpy(&raw_gain, &tmp_gain, sizeof(tmp_gain));
  if (raw_gain != 0) {
    _this->_internal_set_gain(from._internal_gain());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BestInfo::CopyFrom(const BestInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.BestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BestInfo::IsInitialized() const {
  return true;
}

void BestInfo::InternalSwap(BestInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BestInfo, _impl_.gain_)
      + sizeof(BestInfo::_impl_.gain_)
      - PROTOBUF_FIELD_OFFSET(BestInfo, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BestInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fedtree_2eproto_getter, &descriptor_table_fedtree_2eproto_once,
      file_level_metadata_fedtree_2eproto[13]);
}

// ===================================================================

class NodeEnc::_Internal {
 public:
};

NodeEnc::NodeEnc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fedtree.NodeEnc)
}
NodeEnc::NodeEnc(const NodeEnc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NodeEnc* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sum_gh_pair_g_enc_){}
    , decltype(_impl_.sum_gh_pair_h_enc_){}
    , decltype(_impl_.final_id_){}
    , decltype(_impl_.lch_index_){}
    , decltype(_impl_.rch_index_){}
    , decltype(_impl_.parent_index_){}
    , decltype(_impl_.gain_){}
    , decltype(_impl_.base_weight_){}
    , decltype(_impl_.split_feature_id_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.split_value_){}
    , decltype(_impl_.split_bid_){}
    , decltype(_impl_.default_right_){}
    , decltype(_impl_.is_leaf_){}
    , decltype(_impl_.is_valid_){}
    , decltype(_impl_.is_pruned_){}
    , decltype(_impl_.n_instances_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sum_gh_pair_g_enc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sum_gh_pair_g_enc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sum_gh_pair_g_enc().empty()) {
    _this->_impl_.sum_gh_pair_g_enc_.Set(from._internal_sum_gh_pair_g_enc(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sum_gh_pair_h_enc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sum_gh_pair_h_enc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sum_gh_pair_h_enc().empty()) {
    _this->_impl_.sum_gh_pair_h_enc_.Set(from._internal_sum_gh_pair_h_enc(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.final_id_, &from._impl_.final_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.n_instances_) -
    reinterpret_cast<char*>(&_impl_.final_id_)) + sizeof(_impl_.n_instances_));
  // @@protoc_insertion_point(copy_constructor:fedtree.NodeEnc)
}

inline void NodeEnc::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sum_gh_pair_g_enc_){}
    , decltype(_impl_.sum_gh_pair_h_enc_){}
    , decltype(_impl_.final_id_){0}
    , decltype(_impl_.lch_index_){0}
    , decltype(_impl_.rch_index_){0}
    , decltype(_impl_.parent_index_){0}
    , decltype(_impl_.gain_){0}
    , decltype(_impl_.base_weight_){0}
    , decltype(_impl_.split_feature_id_){0}
    , decltype(_impl_.pid_){0}
    , decltype(_impl_.split_value_){0}
    , decltype(_impl_.split_bid_){0}
    , decltype(_impl_.default_right_){false}
    , decltype(_impl_.is_leaf_){false}
    , decltype(_impl_.is_valid_){false}
    , decltype(_impl_.is_pruned_){false}
    , decltype(_impl_.n_instances_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sum_gh_pair_g_enc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sum_gh_pair_g_enc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sum_gh_pair_h_enc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sum_gh_pair_h_enc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NodeEnc::~NodeEnc() {
  // @@protoc_insertion_point(destructor:fedtree.NodeEnc)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NodeEnc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sum_gh_pair_g_enc_.Destroy();
  _impl_.sum_gh_pair_h_enc_.Destroy();
}

void NodeEnc::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NodeEnc::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.NodeEnc)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sum_gh_pair_g_enc_.ClearToEmpty();
  _impl_.sum_gh_pair_h_enc_.ClearToEmpty();
  ::memset(&_impl_.final_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.n_instances_) -
      reinterpret_cast<char*>(&_impl_.final_id_)) + sizeof(_impl_.n_instances_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeEnc::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 final_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.final_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 lch_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.lch_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rch_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.rch_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 parent_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.parent_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float gain = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float base_weight = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.base_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 split_feature_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.split_feature_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float split_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.split_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 split_bid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.split_bid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool default_right = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.default_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_leaf = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.is_leaf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_valid = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_pruned = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.is_pruned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sum_gh_pair_g_enc = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_sum_gh_pair_g_enc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fedtree.NodeEnc.sum_gh_pair_g_enc"));
        } else
          goto handle_unusual;
        continue;
      // string sum_gh_pair_h_enc = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_sum_gh_pair_h_enc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fedtree.NodeEnc.sum_gh_pair_h_enc"));
        } else
          goto handle_unusual;
        continue;
      // int32 n_instances = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.n_instances_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NodeEnc::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.NodeEnc)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 final_id = 1;
  if (this->_internal_final_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_final_id(), target);
  }

  // int32 lch_index = 2;
  if (this->_internal_lch_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_lch_index(), target);
  }

  // int32 rch_index = 3;
  if (this->_internal_rch_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_rch_index(), target);
  }

  // int32 parent_index = 4;
  if (this->_internal_parent_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_parent_index(), target);
  }

  // float gain = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gain = this->_internal_gain();
  uint32_t raw_gain;
  memcpy(&raw_gain, &tmp_gain, sizeof(tmp_gain));
  if (raw_gain != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_gain(), target);
  }

  // float base_weight = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_weight = this->_internal_base_weight();
  uint32_t raw_base_weight;
  memcpy(&raw_base_weight, &tmp_base_weight, sizeof(tmp_base_weight));
  if (raw_base_weight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_base_weight(), target);
  }

  // int32 split_feature_id = 7;
  if (this->_internal_split_feature_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_split_feature_id(), target);
  }

  // int32 pid = 8;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_pid(), target);
  }

  // float split_value = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_split_value = this->_internal_split_value();
  uint32_t raw_split_value;
  memcpy(&raw_split_value, &tmp_split_value, sizeof(tmp_split_value));
  if (raw_split_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_split_value(), target);
  }

  // int32 split_bid = 10;
  if (this->_internal_split_bid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_split_bid(), target);
  }

  // bool default_right = 11;
  if (this->_internal_default_right() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_default_right(), target);
  }

  // bool is_leaf = 12;
  if (this->_internal_is_leaf() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_is_leaf(), target);
  }

  // bool is_valid = 13;
  if (this->_internal_is_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_is_valid(), target);
  }

  // bool is_pruned = 14;
  if (this->_internal_is_pruned() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_is_pruned(), target);
  }

  // string sum_gh_pair_g_enc = 15;
  if (!this->_internal_sum_gh_pair_g_enc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sum_gh_pair_g_enc().data(), static_cast<int>(this->_internal_sum_gh_pair_g_enc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fedtree.NodeEnc.sum_gh_pair_g_enc");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_sum_gh_pair_g_enc(), target);
  }

  // string sum_gh_pair_h_enc = 16;
  if (!this->_internal_sum_gh_pair_h_enc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sum_gh_pair_h_enc().data(), static_cast<int>(this->_internal_sum_gh_pair_h_enc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fedtree.NodeEnc.sum_gh_pair_h_enc");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_sum_gh_pair_h_enc(), target);
  }

  // int32 n_instances = 17;
  if (this->_internal_n_instances() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_n_instances(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.NodeEnc)
  return target;
}

size_t NodeEnc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.NodeEnc)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sum_gh_pair_g_enc = 15;
  if (!this->_internal_sum_gh_pair_g_enc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sum_gh_pair_g_enc());
  }

  // string sum_gh_pair_h_enc = 16;
  if (!this->_internal_sum_gh_pair_h_enc().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sum_gh_pair_h_enc());
  }

  // int32 final_id = 1;
  if (this->_internal_final_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_final_id());
  }

  // int32 lch_index = 2;
  if (this->_internal_lch_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lch_index());
  }

  // int32 rch_index = 3;
  if (this->_internal_rch_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rch_index());
  }

  // int32 parent_index = 4;
  if (this->_internal_parent_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_parent_index());
  }

  // float gain = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gain = this->_internal_gain();
  uint32_t raw_gain;
  memcpy(&raw_gain, &tmp_gain, sizeof(tmp_gain));
  if (raw_gain != 0) {
    total_size += 1 + 4;
  }

  // float base_weight = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_weight = this->_internal_base_weight();
  uint32_t raw_base_weight;
  memcpy(&raw_base_weight, &tmp_base_weight, sizeof(tmp_base_weight));
  if (raw_base_weight != 0) {
    total_size += 1 + 4;
  }

  // int32 split_feature_id = 7;
  if (this->_internal_split_feature_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_split_feature_id());
  }

  // int32 pid = 8;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pid());
  }

  // float split_value = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_split_value = this->_internal_split_value();
  uint32_t raw_split_value;
  memcpy(&raw_split_value, &tmp_split_value, sizeof(tmp_split_value));
  if (raw_split_value != 0) {
    total_size += 1 + 4;
  }

  // int32 split_bid = 10;
  if (this->_internal_split_bid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_split_bid());
  }

  // bool default_right = 11;
  if (this->_internal_default_right() != 0) {
    total_size += 1 + 1;
  }

  // bool is_leaf = 12;
  if (this->_internal_is_leaf() != 0) {
    total_size += 1 + 1;
  }

  // bool is_valid = 13;
  if (this->_internal_is_valid() != 0) {
    total_size += 1 + 1;
  }

  // bool is_pruned = 14;
  if (this->_internal_is_pruned() != 0) {
    total_size += 1 + 1;
  }

  // int32 n_instances = 17;
  if (this->_internal_n_instances() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_n_instances());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeEnc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NodeEnc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeEnc::GetClassData() const { return &_class_data_; }


void NodeEnc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NodeEnc*>(&to_msg);
  auto& from = static_cast<const NodeEnc&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fedtree.NodeEnc)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sum_gh_pair_g_enc().empty()) {
    _this->_internal_set_sum_gh_pair_g_enc(from._internal_sum_gh_pair_g_enc());
  }
  if (!from._internal_sum_gh_pair_h_enc().empty()) {
    _this->_internal_set_sum_gh_pair_h_enc(from._internal_sum_gh_pair_h_enc());
  }
  if (from._internal_final_id() != 0) {
    _this->_internal_set_final_id(from._internal_final_id());
  }
  if (from._internal_lch_index() != 0) {
    _this->_internal_set_lch_index(from._internal_lch_index());
  }
  if (from._internal_rch_index() != 0) {
    _this->_internal_set_rch_index(from._internal_rch_index());
  }
  if (from._internal_parent_index() != 0) {
    _this->_internal_set_parent_index(from._internal_parent_index());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gain = from._internal_gain();
  uint32_t raw_gain;
  memcpy(&raw_gain, &tmp_gain, sizeof(tmp_gain));
  if (raw_gain != 0) {
    _this->_internal_set_gain(from._internal_gain());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_weight = from._internal_base_weight();
  uint32_t raw_base_weight;
  memcpy(&raw_base_weight, &tmp_base_weight, sizeof(tmp_base_weight));
  if (raw_base_weight != 0) {
    _this->_internal_set_base_weight(from._internal_base_weight());
  }
  if (from._internal_split_feature_id() != 0) {
    _this->_internal_set_split_feature_id(from._internal_split_feature_id());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_split_value = from._internal_split_value();
  uint32_t raw_split_value;
  memcpy(&raw_split_value, &tmp_split_value, sizeof(tmp_split_value));
  if (raw_split_value != 0) {
    _this->_internal_set_split_value(from._internal_split_value());
  }
  if (from._internal_split_bid() != 0) {
    _this->_internal_set_split_bid(from._internal_split_bid());
  }
  if (from._internal_default_right() != 0) {
    _this->_internal_set_default_right(from._internal_default_right());
  }
  if (from._internal_is_leaf() != 0) {
    _this->_internal_set_is_leaf(from._internal_is_leaf());
  }
  if (from._internal_is_valid() != 0) {
    _this->_internal_set_is_valid(from._internal_is_valid());
  }
  if (from._internal_is_pruned() != 0) {
    _this->_internal_set_is_pruned(from._internal_is_pruned());
  }
  if (from._internal_n_instances() != 0) {
    _this->_internal_set_n_instances(from._internal_n_instances());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeEnc::CopyFrom(const NodeEnc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.NodeEnc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeEnc::IsInitialized() const {
  return true;
}

void NodeEnc::InternalSwap(NodeEnc* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sum_gh_pair_g_enc_, lhs_arena,
      &other->_impl_.sum_gh_pair_g_enc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sum_gh_pair_h_enc_, lhs_arena,
      &other->_impl_.sum_gh_pair_h_enc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeEnc, _impl_.n_instances_)
      + sizeof(NodeEnc::_impl_.n_instances_)
      - PROTOBUF_FIELD_OFFSET(NodeEnc, _impl_.final_id_)>(
          reinterpret_cast<char*>(&_impl_.final_id_),
          reinterpret_cast<char*>(&other->_impl_.final_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeEnc::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fedtree_2eproto_getter, &descriptor_table_fedtree_2eproto_once,
      file_level_metadata_fedtree_2eproto[14]);
}

// ===================================================================

class Node::_Internal {
 public:
};

Node::Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fedtree.Node)
}
Node::Node(const Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Node* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.final_id_){}
    , decltype(_impl_.lch_index_){}
    , decltype(_impl_.rch_index_){}
    , decltype(_impl_.parent_index_){}
    , decltype(_impl_.gain_){}
    , decltype(_impl_.base_weight_){}
    , decltype(_impl_.split_feature_id_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.split_value_){}
    , decltype(_impl_.split_bid_){}
    , decltype(_impl_.default_right_){}
    , decltype(_impl_.is_leaf_){}
    , decltype(_impl_.is_valid_){}
    , decltype(_impl_.is_pruned_){}
    , decltype(_impl_.sum_gh_pair_g_){}
    , decltype(_impl_.sum_gh_pair_h_){}
    , decltype(_impl_.n_instances_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.final_id_, &from._impl_.final_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.n_instances_) -
    reinterpret_cast<char*>(&_impl_.final_id_)) + sizeof(_impl_.n_instances_));
  // @@protoc_insertion_point(copy_constructor:fedtree.Node)
}

inline void Node::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.final_id_){0}
    , decltype(_impl_.lch_index_){0}
    , decltype(_impl_.rch_index_){0}
    , decltype(_impl_.parent_index_){0}
    , decltype(_impl_.gain_){0}
    , decltype(_impl_.base_weight_){0}
    , decltype(_impl_.split_feature_id_){0}
    , decltype(_impl_.pid_){0}
    , decltype(_impl_.split_value_){0}
    , decltype(_impl_.split_bid_){0}
    , decltype(_impl_.default_right_){false}
    , decltype(_impl_.is_leaf_){false}
    , decltype(_impl_.is_valid_){false}
    , decltype(_impl_.is_pruned_){false}
    , decltype(_impl_.sum_gh_pair_g_){0}
    , decltype(_impl_.sum_gh_pair_h_){0}
    , decltype(_impl_.n_instances_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:fedtree.Node)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Node::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Node::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.Node)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.final_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.n_instances_) -
      reinterpret_cast<char*>(&_impl_.final_id_)) + sizeof(_impl_.n_instances_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Node::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 final_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.final_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 lch_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.lch_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rch_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.rch_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 parent_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.parent_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float gain = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float base_weight = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.base_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 split_feature_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.split_feature_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float split_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.split_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 split_bid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.split_bid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool default_right = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.default_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_leaf = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.is_leaf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_valid = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_pruned = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.is_pruned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float sum_gh_pair_g = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _impl_.sum_gh_pair_g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float sum_gh_pair_h = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _impl_.sum_gh_pair_h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 n_instances = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.n_instances_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Node::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.Node)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 final_id = 1;
  if (this->_internal_final_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_final_id(), target);
  }

  // int32 lch_index = 2;
  if (this->_internal_lch_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_lch_index(), target);
  }

  // int32 rch_index = 3;
  if (this->_internal_rch_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_rch_index(), target);
  }

  // int32 parent_index = 4;
  if (this->_internal_parent_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_parent_index(), target);
  }

  // float gain = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gain = this->_internal_gain();
  uint32_t raw_gain;
  memcpy(&raw_gain, &tmp_gain, sizeof(tmp_gain));
  if (raw_gain != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_gain(), target);
  }

  // float base_weight = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_weight = this->_internal_base_weight();
  uint32_t raw_base_weight;
  memcpy(&raw_base_weight, &tmp_base_weight, sizeof(tmp_base_weight));
  if (raw_base_weight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_base_weight(), target);
  }

  // int32 split_feature_id = 7;
  if (this->_internal_split_feature_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_split_feature_id(), target);
  }

  // int32 pid = 8;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_pid(), target);
  }

  // float split_value = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_split_value = this->_internal_split_value();
  uint32_t raw_split_value;
  memcpy(&raw_split_value, &tmp_split_value, sizeof(tmp_split_value));
  if (raw_split_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_split_value(), target);
  }

  // int32 split_bid = 10;
  if (this->_internal_split_bid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_split_bid(), target);
  }

  // bool default_right = 11;
  if (this->_internal_default_right() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_default_right(), target);
  }

  // bool is_leaf = 12;
  if (this->_internal_is_leaf() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_is_leaf(), target);
  }

  // bool is_valid = 13;
  if (this->_internal_is_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_is_valid(), target);
  }

  // bool is_pruned = 14;
  if (this->_internal_is_pruned() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_is_pruned(), target);
  }

  // float sum_gh_pair_g = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sum_gh_pair_g = this->_internal_sum_gh_pair_g();
  uint32_t raw_sum_gh_pair_g;
  memcpy(&raw_sum_gh_pair_g, &tmp_sum_gh_pair_g, sizeof(tmp_sum_gh_pair_g));
  if (raw_sum_gh_pair_g != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_sum_gh_pair_g(), target);
  }

  // float sum_gh_pair_h = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sum_gh_pair_h = this->_internal_sum_gh_pair_h();
  uint32_t raw_sum_gh_pair_h;
  memcpy(&raw_sum_gh_pair_h, &tmp_sum_gh_pair_h, sizeof(tmp_sum_gh_pair_h));
  if (raw_sum_gh_pair_h != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_sum_gh_pair_h(), target);
  }

  // int32 n_instances = 17;
  if (this->_internal_n_instances() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_n_instances(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.Node)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 final_id = 1;
  if (this->_internal_final_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_final_id());
  }

  // int32 lch_index = 2;
  if (this->_internal_lch_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lch_index());
  }

  // int32 rch_index = 3;
  if (this->_internal_rch_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rch_index());
  }

  // int32 parent_index = 4;
  if (this->_internal_parent_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_parent_index());
  }

  // float gain = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gain = this->_internal_gain();
  uint32_t raw_gain;
  memcpy(&raw_gain, &tmp_gain, sizeof(tmp_gain));
  if (raw_gain != 0) {
    total_size += 1 + 4;
  }

  // float base_weight = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_weight = this->_internal_base_weight();
  uint32_t raw_base_weight;
  memcpy(&raw_base_weight, &tmp_base_weight, sizeof(tmp_base_weight));
  if (raw_base_weight != 0) {
    total_size += 1 + 4;
  }

  // int32 split_feature_id = 7;
  if (this->_internal_split_feature_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_split_feature_id());
  }

  // int32 pid = 8;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pid());
  }

  // float split_value = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_split_value = this->_internal_split_value();
  uint32_t raw_split_value;
  memcpy(&raw_split_value, &tmp_split_value, sizeof(tmp_split_value));
  if (raw_split_value != 0) {
    total_size += 1 + 4;
  }

  // int32 split_bid = 10;
  if (this->_internal_split_bid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_split_bid());
  }

  // bool default_right = 11;
  if (this->_internal_default_right() != 0) {
    total_size += 1 + 1;
  }

  // bool is_leaf = 12;
  if (this->_internal_is_leaf() != 0) {
    total_size += 1 + 1;
  }

  // bool is_valid = 13;
  if (this->_internal_is_valid() != 0) {
    total_size += 1 + 1;
  }

  // bool is_pruned = 14;
  if (this->_internal_is_pruned() != 0) {
    total_size += 1 + 1;
  }

  // float sum_gh_pair_g = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sum_gh_pair_g = this->_internal_sum_gh_pair_g();
  uint32_t raw_sum_gh_pair_g;
  memcpy(&raw_sum_gh_pair_g, &tmp_sum_gh_pair_g, sizeof(tmp_sum_gh_pair_g));
  if (raw_sum_gh_pair_g != 0) {
    total_size += 1 + 4;
  }

  // float sum_gh_pair_h = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sum_gh_pair_h = this->_internal_sum_gh_pair_h();
  uint32_t raw_sum_gh_pair_h;
  memcpy(&raw_sum_gh_pair_h, &tmp_sum_gh_pair_h, sizeof(tmp_sum_gh_pair_h));
  if (raw_sum_gh_pair_h != 0) {
    total_size += 2 + 4;
  }

  // int32 n_instances = 17;
  if (this->_internal_n_instances() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_n_instances());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Node::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Node::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Node::GetClassData() const { return &_class_data_; }


void Node::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Node*>(&to_msg);
  auto& from = static_cast<const Node&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fedtree.Node)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_final_id() != 0) {
    _this->_internal_set_final_id(from._internal_final_id());
  }
  if (from._internal_lch_index() != 0) {
    _this->_internal_set_lch_index(from._internal_lch_index());
  }
  if (from._internal_rch_index() != 0) {
    _this->_internal_set_rch_index(from._internal_rch_index());
  }
  if (from._internal_parent_index() != 0) {
    _this->_internal_set_parent_index(from._internal_parent_index());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gain = from._internal_gain();
  uint32_t raw_gain;
  memcpy(&raw_gain, &tmp_gain, sizeof(tmp_gain));
  if (raw_gain != 0) {
    _this->_internal_set_gain(from._internal_gain());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_weight = from._internal_base_weight();
  uint32_t raw_base_weight;
  memcpy(&raw_base_weight, &tmp_base_weight, sizeof(tmp_base_weight));
  if (raw_base_weight != 0) {
    _this->_internal_set_base_weight(from._internal_base_weight());
  }
  if (from._internal_split_feature_id() != 0) {
    _this->_internal_set_split_feature_id(from._internal_split_feature_id());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_split_value = from._internal_split_value();
  uint32_t raw_split_value;
  memcpy(&raw_split_value, &tmp_split_value, sizeof(tmp_split_value));
  if (raw_split_value != 0) {
    _this->_internal_set_split_value(from._internal_split_value());
  }
  if (from._internal_split_bid() != 0) {
    _this->_internal_set_split_bid(from._internal_split_bid());
  }
  if (from._internal_default_right() != 0) {
    _this->_internal_set_default_right(from._internal_default_right());
  }
  if (from._internal_is_leaf() != 0) {
    _this->_internal_set_is_leaf(from._internal_is_leaf());
  }
  if (from._internal_is_valid() != 0) {
    _this->_internal_set_is_valid(from._internal_is_valid());
  }
  if (from._internal_is_pruned() != 0) {
    _this->_internal_set_is_pruned(from._internal_is_pruned());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sum_gh_pair_g = from._internal_sum_gh_pair_g();
  uint32_t raw_sum_gh_pair_g;
  memcpy(&raw_sum_gh_pair_g, &tmp_sum_gh_pair_g, sizeof(tmp_sum_gh_pair_g));
  if (raw_sum_gh_pair_g != 0) {
    _this->_internal_set_sum_gh_pair_g(from._internal_sum_gh_pair_g());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sum_gh_pair_h = from._internal_sum_gh_pair_h();
  uint32_t raw_sum_gh_pair_h;
  memcpy(&raw_sum_gh_pair_h, &tmp_sum_gh_pair_h, sizeof(tmp_sum_gh_pair_h));
  if (raw_sum_gh_pair_h != 0) {
    _this->_internal_set_sum_gh_pair_h(from._internal_sum_gh_pair_h());
  }
  if (from._internal_n_instances() != 0) {
    _this->_internal_set_n_instances(from._internal_n_instances());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::InternalSwap(Node* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Node, _impl_.n_instances_)
      + sizeof(Node::_impl_.n_instances_)
      - PROTOBUF_FIELD_OFFSET(Node, _impl_.final_id_)>(
          reinterpret_cast<char*>(&_impl_.final_id_),
          reinterpret_cast<char*>(&other->_impl_.final_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fedtree_2eproto_getter, &descriptor_table_fedtree_2eproto_once,
      file_level_metadata_fedtree_2eproto[15]);
}

// ===================================================================

class NodeEncArray::_Internal {
 public:
};

NodeEncArray::NodeEncArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fedtree.NodeEncArray)
}
NodeEncArray::NodeEncArray(const NodeEncArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NodeEncArray* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.final_id_){from._impl_.final_id_}
    , /*decltype(_impl_._final_id_cached_byte_size_)*/{0}
    , decltype(_impl_.lch_index_){from._impl_.lch_index_}
    , /*decltype(_impl_._lch_index_cached_byte_size_)*/{0}
    , decltype(_impl_.rch_index_){from._impl_.rch_index_}
    , /*decltype(_impl_._rch_index_cached_byte_size_)*/{0}
    , decltype(_impl_.parent_index_){from._impl_.parent_index_}
    , /*decltype(_impl_._parent_index_cached_byte_size_)*/{0}
    , decltype(_impl_.gain_){from._impl_.gain_}
    , decltype(_impl_.base_weight_){from._impl_.base_weight_}
    , decltype(_impl_.split_feature_id_){from._impl_.split_feature_id_}
    , /*decltype(_impl_._split_feature_id_cached_byte_size_)*/{0}
    , decltype(_impl_.pid_){from._impl_.pid_}
    , /*decltype(_impl_._pid_cached_byte_size_)*/{0}
    , decltype(_impl_.split_value_){from._impl_.split_value_}
    , decltype(_impl_.split_bid_){from._impl_.split_bid_}
    , /*decltype(_impl_._split_bid_cached_byte_size_)*/{0}
    , decltype(_impl_.default_right_){from._impl_.default_right_}
    , decltype(_impl_.is_leaf_){from._impl_.is_leaf_}
    , decltype(_impl_.is_valid_){from._impl_.is_valid_}
    , decltype(_impl_.is_pruned_){from._impl_.is_pruned_}
    , decltype(_impl_.sum_gh_pair_g_enc_){from._impl_.sum_gh_pair_g_enc_}
    , decltype(_impl_.sum_gh_pair_h_enc_){from._impl_.sum_gh_pair_h_enc_}
    , decltype(_impl_.n_instances_){from._impl_.n_instances_}
    , /*decltype(_impl_._n_instances_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fedtree.NodeEncArray)
}

inline void NodeEncArray::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.final_id_){arena}
    , /*decltype(_impl_._final_id_cached_byte_size_)*/{0}
    , decltype(_impl_.lch_index_){arena}
    , /*decltype(_impl_._lch_index_cached_byte_size_)*/{0}
    , decltype(_impl_.rch_index_){arena}
    , /*decltype(_impl_._rch_index_cached_byte_size_)*/{0}
    , decltype(_impl_.parent_index_){arena}
    , /*decltype(_impl_._parent_index_cached_byte_size_)*/{0}
    , decltype(_impl_.gain_){arena}
    , decltype(_impl_.base_weight_){arena}
    , decltype(_impl_.split_feature_id_){arena}
    , /*decltype(_impl_._split_feature_id_cached_byte_size_)*/{0}
    , decltype(_impl_.pid_){arena}
    , /*decltype(_impl_._pid_cached_byte_size_)*/{0}
    , decltype(_impl_.split_value_){arena}
    , decltype(_impl_.split_bid_){arena}
    , /*decltype(_impl_._split_bid_cached_byte_size_)*/{0}
    , decltype(_impl_.default_right_){arena}
    , decltype(_impl_.is_leaf_){arena}
    , decltype(_impl_.is_valid_){arena}
    , decltype(_impl_.is_pruned_){arena}
    , decltype(_impl_.sum_gh_pair_g_enc_){arena}
    , decltype(_impl_.sum_gh_pair_h_enc_){arena}
    , decltype(_impl_.n_instances_){arena}
    , /*decltype(_impl_._n_instances_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NodeEncArray::~NodeEncArray() {
  // @@protoc_insertion_point(destructor:fedtree.NodeEncArray)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NodeEncArray::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.final_id_.~RepeatedField();
  _impl_.lch_index_.~RepeatedField();
  _impl_.rch_index_.~RepeatedField();
  _impl_.parent_index_.~RepeatedField();
  _impl_.gain_.~RepeatedField();
  _impl_.base_weight_.~RepeatedField();
  _impl_.split_feature_id_.~RepeatedField();
  _impl_.pid_.~RepeatedField();
  _impl_.split_value_.~RepeatedField();
  _impl_.split_bid_.~RepeatedField();
  _impl_.default_right_.~RepeatedField();
  _impl_.is_leaf_.~RepeatedField();
  _impl_.is_valid_.~RepeatedField();
  _impl_.is_pruned_.~RepeatedField();
  _impl_.sum_gh_pair_g_enc_.~RepeatedPtrField();
  _impl_.sum_gh_pair_h_enc_.~RepeatedPtrField();
  _impl_.n_instances_.~RepeatedField();
}

void NodeEncArray::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NodeEncArray::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.NodeEncArray)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.final_id_.Clear();
  _impl_.lch_index_.Clear();
  _impl_.rch_index_.Clear();
  _impl_.parent_index_.Clear();
  _impl_.gain_.Clear();
  _impl_.base_weight_.Clear();
  _impl_.split_feature_id_.Clear();
  _impl_.pid_.Clear();
  _impl_.split_value_.Clear();
  _impl_.split_bid_.Clear();
  _impl_.default_right_.Clear();
  _impl_.is_leaf_.Clear();
  _impl_.is_valid_.Clear();
  _impl_.is_pruned_.Clear();
  _impl_.sum_gh_pair_g_enc_.Clear();
  _impl_.sum_gh_pair_h_enc_.Clear();
  _impl_.n_instances_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeEncArray::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 final_id = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_final_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_final_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 lch_index = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_lch_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_lch_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 rch_index = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_rch_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_rch_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 parent_index = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_parent_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_parent_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float gain = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_gain(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 45) {
          _internal_add_gain(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float base_weight = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_base_weight(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 53) {
          _internal_add_base_weight(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 split_feature_id = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_split_feature_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_split_feature_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 pid = 8 [packed = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_pid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_pid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float split_value = 9 [packed = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_split_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 77) {
          _internal_add_split_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 split_bid = 10 [packed = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_split_bid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 80) {
          _internal_add_split_bid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool default_right = 11 [packed = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_default_right(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 88) {
          _internal_add_default_right(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool is_leaf = 12 [packed = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_is_leaf(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 96) {
          _internal_add_is_leaf(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool is_valid = 13 [packed = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_is_valid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 104) {
          _internal_add_is_valid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool is_pruned = 14 [packed = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_is_pruned(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 112) {
          _internal_add_is_pruned(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string sum_gh_pair_g_enc = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_sum_gh_pair_g_enc();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "fedtree.NodeEncArray.sum_gh_pair_g_enc"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string sum_gh_pair_h_enc = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_sum_gh_pair_h_enc();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "fedtree.NodeEncArray.sum_gh_pair_h_enc"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 n_instances = 17 [packed = true];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_n_instances(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 136) {
          _internal_add_n_instances(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NodeEncArray::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.NodeEncArray)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 final_id = 1 [packed = true];
  {
    int byte_size = _impl_._final_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_final_id(), byte_size, target);
    }
  }

  // repeated int32 lch_index = 2 [packed = true];
  {
    int byte_size = _impl_._lch_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_lch_index(), byte_size, target);
    }
  }

  // repeated int32 rch_index = 3 [packed = true];
  {
    int byte_size = _impl_._rch_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_rch_index(), byte_size, target);
    }
  }

  // repeated int32 parent_index = 4 [packed = true];
  {
    int byte_size = _impl_._parent_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_parent_index(), byte_size, target);
    }
  }

  // repeated float gain = 5 [packed = true];
  if (this->_internal_gain_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_gain(), target);
  }

  // repeated float base_weight = 6 [packed = true];
  if (this->_internal_base_weight_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_base_weight(), target);
  }

  // repeated int32 split_feature_id = 7 [packed = true];
  {
    int byte_size = _impl_._split_feature_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_split_feature_id(), byte_size, target);
    }
  }

  // repeated int32 pid = 8 [packed = true];
  {
    int byte_size = _impl_._pid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_pid(), byte_size, target);
    }
  }

  // repeated float split_value = 9 [packed = true];
  if (this->_internal_split_value_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_split_value(), target);
  }

  // repeated int32 split_bid = 10 [packed = true];
  {
    int byte_size = _impl_._split_bid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          10, _internal_split_bid(), byte_size, target);
    }
  }

  // repeated bool default_right = 11 [packed = true];
  if (this->_internal_default_right_size() > 0) {
    target = stream->WriteFixedPacked(11, _internal_default_right(), target);
  }

  // repeated bool is_leaf = 12 [packed = true];
  if (this->_internal_is_leaf_size() > 0) {
    target = stream->WriteFixedPacked(12, _internal_is_leaf(), target);
  }

  // repeated bool is_valid = 13 [packed = true];
  if (this->_internal_is_valid_size() > 0) {
    target = stream->WriteFixedPacked(13, _internal_is_valid(), target);
  }

  // repeated bool is_pruned = 14 [packed = true];
  if (this->_internal_is_pruned_size() > 0) {
    target = stream->WriteFixedPacked(14, _internal_is_pruned(), target);
  }

  // repeated string sum_gh_pair_g_enc = 15;
  for (int i = 0, n = this->_internal_sum_gh_pair_g_enc_size(); i < n; i++) {
    const auto& s = this->_internal_sum_gh_pair_g_enc(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fedtree.NodeEncArray.sum_gh_pair_g_enc");
    target = stream->WriteString(15, s, target);
  }

  // repeated string sum_gh_pair_h_enc = 16;
  for (int i = 0, n = this->_internal_sum_gh_pair_h_enc_size(); i < n; i++) {
    const auto& s = this->_internal_sum_gh_pair_h_enc(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fedtree.NodeEncArray.sum_gh_pair_h_enc");
    target = stream->WriteString(16, s, target);
  }

  // repeated int32 n_instances = 17 [packed = true];
  {
    int byte_size = _impl_._n_instances_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          17, _internal_n_instances(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.NodeEncArray)
  return target;
}

size_t NodeEncArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.NodeEncArray)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 final_id = 1 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.final_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._final_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 lch_index = 2 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.lch_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._lch_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 rch_index = 3 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.rch_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._rch_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 parent_index = 4 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.parent_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._parent_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float gain = 5 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_gain_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float base_weight = 6 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_base_weight_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 split_feature_id = 7 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.split_feature_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._split_feature_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 pid = 8 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.pid_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._pid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float split_value = 9 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_split_value_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 split_bid = 10 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.split_bid_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._split_bid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool default_right = 11 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_default_right_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated bool is_leaf = 12 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_is_leaf_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated bool is_valid = 13 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_is_valid_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated bool is_pruned = 14 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_is_pruned_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated string sum_gh_pair_g_enc = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.sum_gh_pair_g_enc_.size());
  for (int i = 0, n = _impl_.sum_gh_pair_g_enc_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.sum_gh_pair_g_enc_.Get(i));
  }

  // repeated string sum_gh_pair_h_enc = 16;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.sum_gh_pair_h_enc_.size());
  for (int i = 0, n = _impl_.sum_gh_pair_h_enc_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.sum_gh_pair_h_enc_.Get(i));
  }

  // repeated int32 n_instances = 17 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.n_instances_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._n_instances_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeEncArray::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NodeEncArray::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeEncArray::GetClassData() const { return &_class_data_; }


void NodeEncArray::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NodeEncArray*>(&to_msg);
  auto& from = static_cast<const NodeEncArray&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fedtree.NodeEncArray)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.final_id_.MergeFrom(from._impl_.final_id_);
  _this->_impl_.lch_index_.MergeFrom(from._impl_.lch_index_);
  _this->_impl_.rch_index_.MergeFrom(from._impl_.rch_index_);
  _this->_impl_.parent_index_.MergeFrom(from._impl_.parent_index_);
  _this->_impl_.gain_.MergeFrom(from._impl_.gain_);
  _this->_impl_.base_weight_.MergeFrom(from._impl_.base_weight_);
  _this->_impl_.split_feature_id_.MergeFrom(from._impl_.split_feature_id_);
  _this->_impl_.pid_.MergeFrom(from._impl_.pid_);
  _this->_impl_.split_value_.MergeFrom(from._impl_.split_value_);
  _this->_impl_.split_bid_.MergeFrom(from._impl_.split_bid_);
  _this->_impl_.default_right_.MergeFrom(from._impl_.default_right_);
  _this->_impl_.is_leaf_.MergeFrom(from._impl_.is_leaf_);
  _this->_impl_.is_valid_.MergeFrom(from._impl_.is_valid_);
  _this->_impl_.is_pruned_.MergeFrom(from._impl_.is_pruned_);
  _this->_impl_.sum_gh_pair_g_enc_.MergeFrom(from._impl_.sum_gh_pair_g_enc_);
  _this->_impl_.sum_gh_pair_h_enc_.MergeFrom(from._impl_.sum_gh_pair_h_enc_);
  _this->_impl_.n_instances_.MergeFrom(from._impl_.n_instances_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeEncArray::CopyFrom(const NodeEncArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.NodeEncArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeEncArray::IsInitialized() const {
  return true;
}

void NodeEncArray::InternalSwap(NodeEncArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.final_id_.InternalSwap(&other->_impl_.final_id_);
  _impl_.lch_index_.InternalSwap(&other->_impl_.lch_index_);
  _impl_.rch_index_.InternalSwap(&other->_impl_.rch_index_);
  _impl_.parent_index_.InternalSwap(&other->_impl_.parent_index_);
  _impl_.gain_.InternalSwap(&other->_impl_.gain_);
  _impl_.base_weight_.InternalSwap(&other->_impl_.base_weight_);
  _impl_.split_feature_id_.InternalSwap(&other->_impl_.split_feature_id_);
  _impl_.pid_.InternalSwap(&other->_impl_.pid_);
  _impl_.split_value_.InternalSwap(&other->_impl_.split_value_);
  _impl_.split_bid_.InternalSwap(&other->_impl_.split_bid_);
  _impl_.default_right_.InternalSwap(&other->_impl_.default_right_);
  _impl_.is_leaf_.InternalSwap(&other->_impl_.is_leaf_);
  _impl_.is_valid_.InternalSwap(&other->_impl_.is_valid_);
  _impl_.is_pruned_.InternalSwap(&other->_impl_.is_pruned_);
  _impl_.sum_gh_pair_g_enc_.InternalSwap(&other->_impl_.sum_gh_pair_g_enc_);
  _impl_.sum_gh_pair_h_enc_.InternalSwap(&other->_impl_.sum_gh_pair_h_enc_);
  _impl_.n_instances_.InternalSwap(&other->_impl_.n_instances_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeEncArray::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fedtree_2eproto_getter, &descriptor_table_fedtree_2eproto_once,
      file_level_metadata_fedtree_2eproto[16]);
}

// ===================================================================

class NodeArray::_Internal {
 public:
};

NodeArray::NodeArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fedtree.NodeArray)
}
NodeArray::NodeArray(const NodeArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NodeArray* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.final_id_){from._impl_.final_id_}
    , /*decltype(_impl_._final_id_cached_byte_size_)*/{0}
    , decltype(_impl_.lch_index_){from._impl_.lch_index_}
    , /*decltype(_impl_._lch_index_cached_byte_size_)*/{0}
    , decltype(_impl_.rch_index_){from._impl_.rch_index_}
    , /*decltype(_impl_._rch_index_cached_byte_size_)*/{0}
    , decltype(_impl_.parent_index_){from._impl_.parent_index_}
    , /*decltype(_impl_._parent_index_cached_byte_size_)*/{0}
    , decltype(_impl_.gain_){from._impl_.gain_}
    , decltype(_impl_.base_weight_){from._impl_.base_weight_}
    , decltype(_impl_.split_feature_id_){from._impl_.split_feature_id_}
    , /*decltype(_impl_._split_feature_id_cached_byte_size_)*/{0}
    , decltype(_impl_.pid_){from._impl_.pid_}
    , /*decltype(_impl_._pid_cached_byte_size_)*/{0}
    , decltype(_impl_.split_value_){from._impl_.split_value_}
    , decltype(_impl_.split_bid_){from._impl_.split_bid_}
    , /*decltype(_impl_._split_bid_cached_byte_size_)*/{0}
    , decltype(_impl_.default_right_){from._impl_.default_right_}
    , decltype(_impl_.is_leaf_){from._impl_.is_leaf_}
    , decltype(_impl_.is_valid_){from._impl_.is_valid_}
    , decltype(_impl_.is_pruned_){from._impl_.is_pruned_}
    , decltype(_impl_.sum_gh_pair_g_){from._impl_.sum_gh_pair_g_}
    , decltype(_impl_.sum_gh_pair_h_){from._impl_.sum_gh_pair_h_}
    , decltype(_impl_.n_instances_){from._impl_.n_instances_}
    , /*decltype(_impl_._n_instances_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fedtree.NodeArray)
}

inline void NodeArray::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.final_id_){arena}
    , /*decltype(_impl_._final_id_cached_byte_size_)*/{0}
    , decltype(_impl_.lch_index_){arena}
    , /*decltype(_impl_._lch_index_cached_byte_size_)*/{0}
    , decltype(_impl_.rch_index_){arena}
    , /*decltype(_impl_._rch_index_cached_byte_size_)*/{0}
    , decltype(_impl_.parent_index_){arena}
    , /*decltype(_impl_._parent_index_cached_byte_size_)*/{0}
    , decltype(_impl_.gain_){arena}
    , decltype(_impl_.base_weight_){arena}
    , decltype(_impl_.split_feature_id_){arena}
    , /*decltype(_impl_._split_feature_id_cached_byte_size_)*/{0}
    , decltype(_impl_.pid_){arena}
    , /*decltype(_impl_._pid_cached_byte_size_)*/{0}
    , decltype(_impl_.split_value_){arena}
    , decltype(_impl_.split_bid_){arena}
    , /*decltype(_impl_._split_bid_cached_byte_size_)*/{0}
    , decltype(_impl_.default_right_){arena}
    , decltype(_impl_.is_leaf_){arena}
    , decltype(_impl_.is_valid_){arena}
    , decltype(_impl_.is_pruned_){arena}
    , decltype(_impl_.sum_gh_pair_g_){arena}
    , decltype(_impl_.sum_gh_pair_h_){arena}
    , decltype(_impl_.n_instances_){arena}
    , /*decltype(_impl_._n_instances_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NodeArray::~NodeArray() {
  // @@protoc_insertion_point(destructor:fedtree.NodeArray)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NodeArray::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.final_id_.~RepeatedField();
  _impl_.lch_index_.~RepeatedField();
  _impl_.rch_index_.~RepeatedField();
  _impl_.parent_index_.~RepeatedField();
  _impl_.gain_.~RepeatedField();
  _impl_.base_weight_.~RepeatedField();
  _impl_.split_feature_id_.~RepeatedField();
  _impl_.pid_.~RepeatedField();
  _impl_.split_value_.~RepeatedField();
  _impl_.split_bid_.~RepeatedField();
  _impl_.default_right_.~RepeatedField();
  _impl_.is_leaf_.~RepeatedField();
  _impl_.is_valid_.~RepeatedField();
  _impl_.is_pruned_.~RepeatedField();
  _impl_.sum_gh_pair_g_.~RepeatedField();
  _impl_.sum_gh_pair_h_.~RepeatedField();
  _impl_.n_instances_.~RepeatedField();
}

void NodeArray::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NodeArray::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.NodeArray)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.final_id_.Clear();
  _impl_.lch_index_.Clear();
  _impl_.rch_index_.Clear();
  _impl_.parent_index_.Clear();
  _impl_.gain_.Clear();
  _impl_.base_weight_.Clear();
  _impl_.split_feature_id_.Clear();
  _impl_.pid_.Clear();
  _impl_.split_value_.Clear();
  _impl_.split_bid_.Clear();
  _impl_.default_right_.Clear();
  _impl_.is_leaf_.Clear();
  _impl_.is_valid_.Clear();
  _impl_.is_pruned_.Clear();
  _impl_.sum_gh_pair_g_.Clear();
  _impl_.sum_gh_pair_h_.Clear();
  _impl_.n_instances_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeArray::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 final_id = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_final_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_final_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 lch_index = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_lch_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_lch_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 rch_index = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_rch_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_rch_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 parent_index = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_parent_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_parent_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float gain = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_gain(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 45) {
          _internal_add_gain(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float base_weight = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_base_weight(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 53) {
          _internal_add_base_weight(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 split_feature_id = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_split_feature_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_split_feature_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 pid = 8 [packed = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_pid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_pid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float split_value = 9 [packed = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_split_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 77) {
          _internal_add_split_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 split_bid = 10 [packed = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_split_bid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 80) {
          _internal_add_split_bid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool default_right = 11 [packed = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_default_right(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 88) {
          _internal_add_default_right(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool is_leaf = 12 [packed = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_is_leaf(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 96) {
          _internal_add_is_leaf(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool is_valid = 13 [packed = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_is_valid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 104) {
          _internal_add_is_valid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool is_pruned = 14 [packed = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_is_pruned(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 112) {
          _internal_add_is_pruned(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float sum_gh_pair_g = 15 [packed = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_sum_gh_pair_g(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 125) {
          _internal_add_sum_gh_pair_g(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float sum_gh_pair_h = 16 [packed = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_sum_gh_pair_h(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 133) {
          _internal_add_sum_gh_pair_h(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 n_instances = 17 [packed = true];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_n_instances(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 136) {
          _internal_add_n_instances(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NodeArray::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.NodeArray)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 final_id = 1 [packed = true];
  {
    int byte_size = _impl_._final_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_final_id(), byte_size, target);
    }
  }

  // repeated int32 lch_index = 2 [packed = true];
  {
    int byte_size = _impl_._lch_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_lch_index(), byte_size, target);
    }
  }

  // repeated int32 rch_index = 3 [packed = true];
  {
    int byte_size = _impl_._rch_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_rch_index(), byte_size, target);
    }
  }

  // repeated int32 parent_index = 4 [packed = true];
  {
    int byte_size = _impl_._parent_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_parent_index(), byte_size, target);
    }
  }

  // repeated float gain = 5 [packed = true];
  if (this->_internal_gain_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_gain(), target);
  }

  // repeated float base_weight = 6 [packed = true];
  if (this->_internal_base_weight_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_base_weight(), target);
  }

  // repeated int32 split_feature_id = 7 [packed = true];
  {
    int byte_size = _impl_._split_feature_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_split_feature_id(), byte_size, target);
    }
  }

  // repeated int32 pid = 8 [packed = true];
  {
    int byte_size = _impl_._pid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_pid(), byte_size, target);
    }
  }

  // repeated float split_value = 9 [packed = true];
  if (this->_internal_split_value_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_split_value(), target);
  }

  // repeated int32 split_bid = 10 [packed = true];
  {
    int byte_size = _impl_._split_bid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          10, _internal_split_bid(), byte_size, target);
    }
  }

  // repeated bool default_right = 11 [packed = true];
  if (this->_internal_default_right_size() > 0) {
    target = stream->WriteFixedPacked(11, _internal_default_right(), target);
  }

  // repeated bool is_leaf = 12 [packed = true];
  if (this->_internal_is_leaf_size() > 0) {
    target = stream->WriteFixedPacked(12, _internal_is_leaf(), target);
  }

  // repeated bool is_valid = 13 [packed = true];
  if (this->_internal_is_valid_size() > 0) {
    target = stream->WriteFixedPacked(13, _internal_is_valid(), target);
  }

  // repeated bool is_pruned = 14 [packed = true];
  if (this->_internal_is_pruned_size() > 0) {
    target = stream->WriteFixedPacked(14, _internal_is_pruned(), target);
  }

  // repeated float sum_gh_pair_g = 15 [packed = true];
  if (this->_internal_sum_gh_pair_g_size() > 0) {
    target = stream->WriteFixedPacked(15, _internal_sum_gh_pair_g(), target);
  }

  // repeated float sum_gh_pair_h = 16 [packed = true];
  if (this->_internal_sum_gh_pair_h_size() > 0) {
    target = stream->WriteFixedPacked(16, _internal_sum_gh_pair_h(), target);
  }

  // repeated int32 n_instances = 17 [packed = true];
  {
    int byte_size = _impl_._n_instances_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          17, _internal_n_instances(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.NodeArray)
  return target;
}

size_t NodeArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.NodeArray)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 final_id = 1 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.final_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._final_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 lch_index = 2 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.lch_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._lch_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 rch_index = 3 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.rch_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._rch_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 parent_index = 4 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.parent_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._parent_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float gain = 5 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_gain_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float base_weight = 6 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_base_weight_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 split_feature_id = 7 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.split_feature_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._split_feature_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 pid = 8 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.pid_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._pid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float split_value = 9 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_split_value_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 split_bid = 10 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.split_bid_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._split_bid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool default_right = 11 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_default_right_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated bool is_leaf = 12 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_is_leaf_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated bool is_valid = 13 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_is_valid_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated bool is_pruned = 14 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_is_pruned_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float sum_gh_pair_g = 15 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_sum_gh_pair_g_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float sum_gh_pair_h = 16 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_sum_gh_pair_h_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 n_instances = 17 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.n_instances_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._n_instances_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeArray::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NodeArray::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeArray::GetClassData() const { return &_class_data_; }


void NodeArray::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NodeArray*>(&to_msg);
  auto& from = static_cast<const NodeArray&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fedtree.NodeArray)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.final_id_.MergeFrom(from._impl_.final_id_);
  _this->_impl_.lch_index_.MergeFrom(from._impl_.lch_index_);
  _this->_impl_.rch_index_.MergeFrom(from._impl_.rch_index_);
  _this->_impl_.parent_index_.MergeFrom(from._impl_.parent_index_);
  _this->_impl_.gain_.MergeFrom(from._impl_.gain_);
  _this->_impl_.base_weight_.MergeFrom(from._impl_.base_weight_);
  _this->_impl_.split_feature_id_.MergeFrom(from._impl_.split_feature_id_);
  _this->_impl_.pid_.MergeFrom(from._impl_.pid_);
  _this->_impl_.split_value_.MergeFrom(from._impl_.split_value_);
  _this->_impl_.split_bid_.MergeFrom(from._impl_.split_bid_);
  _this->_impl_.default_right_.MergeFrom(from._impl_.default_right_);
  _this->_impl_.is_leaf_.MergeFrom(from._impl_.is_leaf_);
  _this->_impl_.is_valid_.MergeFrom(from._impl_.is_valid_);
  _this->_impl_.is_pruned_.MergeFrom(from._impl_.is_pruned_);
  _this->_impl_.sum_gh_pair_g_.MergeFrom(from._impl_.sum_gh_pair_g_);
  _this->_impl_.sum_gh_pair_h_.MergeFrom(from._impl_.sum_gh_pair_h_);
  _this->_impl_.n_instances_.MergeFrom(from._impl_.n_instances_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeArray::CopyFrom(const NodeArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.NodeArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeArray::IsInitialized() const {
  return true;
}

void NodeArray::InternalSwap(NodeArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.final_id_.InternalSwap(&other->_impl_.final_id_);
  _impl_.lch_index_.InternalSwap(&other->_impl_.lch_index_);
  _impl_.rch_index_.InternalSwap(&other->_impl_.rch_index_);
  _impl_.parent_index_.InternalSwap(&other->_impl_.parent_index_);
  _impl_.gain_.InternalSwap(&other->_impl_.gain_);
  _impl_.base_weight_.InternalSwap(&other->_impl_.base_weight_);
  _impl_.split_feature_id_.InternalSwap(&other->_impl_.split_feature_id_);
  _impl_.pid_.InternalSwap(&other->_impl_.pid_);
  _impl_.split_value_.InternalSwap(&other->_impl_.split_value_);
  _impl_.split_bid_.InternalSwap(&other->_impl_.split_bid_);
  _impl_.default_right_.InternalSwap(&other->_impl_.default_right_);
  _impl_.is_leaf_.InternalSwap(&other->_impl_.is_leaf_);
  _impl_.is_valid_.InternalSwap(&other->_impl_.is_valid_);
  _impl_.is_pruned_.InternalSwap(&other->_impl_.is_pruned_);
  _impl_.sum_gh_pair_g_.InternalSwap(&other->_impl_.sum_gh_pair_g_);
  _impl_.sum_gh_pair_h_.InternalSwap(&other->_impl_.sum_gh_pair_h_);
  _impl_.n_instances_.InternalSwap(&other->_impl_.n_instances_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeArray::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fedtree_2eproto_getter, &descriptor_table_fedtree_2eproto_once,
      file_level_metadata_fedtree_2eproto[17]);
}

// ===================================================================

class Ins2NodeID::_Internal {
 public:
};

Ins2NodeID::Ins2NodeID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fedtree.Ins2NodeID)
}
Ins2NodeID::Ins2NodeID(const Ins2NodeID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Ins2NodeID* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.iid_){}
    , decltype(_impl_.nid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.iid_, &from._impl_.iid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nid_) -
    reinterpret_cast<char*>(&_impl_.iid_)) + sizeof(_impl_.nid_));
  // @@protoc_insertion_point(copy_constructor:fedtree.Ins2NodeID)
}

inline void Ins2NodeID::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.iid_){0}
    , decltype(_impl_.nid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Ins2NodeID::~Ins2NodeID() {
  // @@protoc_insertion_point(destructor:fedtree.Ins2NodeID)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ins2NodeID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Ins2NodeID::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ins2NodeID::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.Ins2NodeID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.iid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.nid_) -
      reinterpret_cast<char*>(&_impl_.iid_)) + sizeof(_impl_.nid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ins2NodeID::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 nid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ins2NodeID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.Ins2NodeID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 iid = 1;
  if (this->_internal_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_iid(), target);
  }

  // int32 nid = 2;
  if (this->_internal_nid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_nid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.Ins2NodeID)
  return target;
}

size_t Ins2NodeID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.Ins2NodeID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 iid = 1;
  if (this->_internal_iid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_iid());
  }

  // int32 nid = 2;
  if (this->_internal_nid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ins2NodeID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Ins2NodeID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ins2NodeID::GetClassData() const { return &_class_data_; }


void Ins2NodeID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Ins2NodeID*>(&to_msg);
  auto& from = static_cast<const Ins2NodeID&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fedtree.Ins2NodeID)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_iid() != 0) {
    _this->_internal_set_iid(from._internal_iid());
  }
  if (from._internal_nid() != 0) {
    _this->_internal_set_nid(from._internal_nid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ins2NodeID::CopyFrom(const Ins2NodeID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.Ins2NodeID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ins2NodeID::IsInitialized() const {
  return true;
}

void Ins2NodeID::InternalSwap(Ins2NodeID* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ins2NodeID, _impl_.nid_)
      + sizeof(Ins2NodeID::_impl_.nid_)
      - PROTOBUF_FIELD_OFFSET(Ins2NodeID, _impl_.iid_)>(
          reinterpret_cast<char*>(&_impl_.iid_),
          reinterpret_cast<char*>(&other->_impl_.iid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ins2NodeID::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fedtree_2eproto_getter, &descriptor_table_fedtree_2eproto_once,
      file_level_metadata_fedtree_2eproto[18]);
}

// ===================================================================

class Ins2NodeIDBatch::_Internal {
 public:
};

Ins2NodeIDBatch::Ins2NodeIDBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fedtree.Ins2NodeIDBatch)
}
Ins2NodeIDBatch::Ins2NodeIDBatch(const Ins2NodeIDBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Ins2NodeIDBatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.iid_){from._impl_.iid_}
    , /*decltype(_impl_._iid_cached_byte_size_)*/{0}
    , decltype(_impl_.nid_){from._impl_.nid_}
    , /*decltype(_impl_._nid_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fedtree.Ins2NodeIDBatch)
}

inline void Ins2NodeIDBatch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.iid_){arena}
    , /*decltype(_impl_._iid_cached_byte_size_)*/{0}
    , decltype(_impl_.nid_){arena}
    , /*decltype(_impl_._nid_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Ins2NodeIDBatch::~Ins2NodeIDBatch() {
  // @@protoc_insertion_point(destructor:fedtree.Ins2NodeIDBatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ins2NodeIDBatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.iid_.~RepeatedField();
  _impl_.nid_.~RepeatedField();
}

void Ins2NodeIDBatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ins2NodeIDBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.Ins2NodeIDBatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.iid_.Clear();
  _impl_.nid_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ins2NodeIDBatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 iid = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_iid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_iid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 nid = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_nid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_nid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ins2NodeIDBatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.Ins2NodeIDBatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 iid = 1 [packed = true];
  {
    int byte_size = _impl_._iid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_iid(), byte_size, target);
    }
  }

  // repeated int32 nid = 2 [packed = true];
  {
    int byte_size = _impl_._nid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_nid(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.Ins2NodeIDBatch)
  return target;
}

size_t Ins2NodeIDBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.Ins2NodeIDBatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 iid = 1 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.iid_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._iid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 nid = 2 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.nid_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._nid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ins2NodeIDBatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Ins2NodeIDBatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ins2NodeIDBatch::GetClassData() const { return &_class_data_; }


void Ins2NodeIDBatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Ins2NodeIDBatch*>(&to_msg);
  auto& from = static_cast<const Ins2NodeIDBatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fedtree.Ins2NodeIDBatch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.iid_.MergeFrom(from._impl_.iid_);
  _this->_impl_.nid_.MergeFrom(from._impl_.nid_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ins2NodeIDBatch::CopyFrom(const Ins2NodeIDBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.Ins2NodeIDBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ins2NodeIDBatch::IsInitialized() const {
  return true;
}

void Ins2NodeIDBatch::InternalSwap(Ins2NodeIDBatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.iid_.InternalSwap(&other->_impl_.iid_);
  _impl_.nid_.InternalSwap(&other->_impl_.nid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ins2NodeIDBatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fedtree_2eproto_getter, &descriptor_table_fedtree_2eproto_once,
      file_level_metadata_fedtree_2eproto[19]);
}

// ===================================================================

class DHPublicKey::_Internal {
 public:
};

DHPublicKey::DHPublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fedtree.DHPublicKey)
}
DHPublicKey::DHPublicKey(const DHPublicKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DHPublicKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pk_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pk().empty()) {
    _this->_impl_.pk_.Set(from._internal_pk(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:fedtree.DHPublicKey)
}

inline void DHPublicKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pk_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DHPublicKey::~DHPublicKey() {
  // @@protoc_insertion_point(destructor:fedtree.DHPublicKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DHPublicKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pk_.Destroy();
}

void DHPublicKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DHPublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.DHPublicKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pk_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DHPublicKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fedtree.DHPublicKey.pk"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DHPublicKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.DHPublicKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string pk = 1;
  if (!this->_internal_pk().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pk().data(), static_cast<int>(this->_internal_pk().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fedtree.DHPublicKey.pk");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.DHPublicKey)
  return target;
}

size_t DHPublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.DHPublicKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pk = 1;
  if (!this->_internal_pk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pk());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DHPublicKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DHPublicKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DHPublicKey::GetClassData() const { return &_class_data_; }


void DHPublicKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DHPublicKey*>(&to_msg);
  auto& from = static_cast<const DHPublicKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fedtree.DHPublicKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pk().empty()) {
    _this->_internal_set_pk(from._internal_pk());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DHPublicKey::CopyFrom(const DHPublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.DHPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DHPublicKey::IsInitialized() const {
  return true;
}

void DHPublicKey::InternalSwap(DHPublicKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pk_, lhs_arena,
      &other->_impl_.pk_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DHPublicKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fedtree_2eproto_getter, &descriptor_table_fedtree_2eproto_once,
      file_level_metadata_fedtree_2eproto[20]);
}

// ===================================================================

class DHPublicKeys::_Internal {
 public:
};

DHPublicKeys::DHPublicKeys(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fedtree.DHPublicKeys)
}
DHPublicKeys::DHPublicKeys(const DHPublicKeys& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DHPublicKeys* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pk_){from._impl_.pk_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fedtree.DHPublicKeys)
}

inline void DHPublicKeys::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pk_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DHPublicKeys::~DHPublicKeys() {
  // @@protoc_insertion_point(destructor:fedtree.DHPublicKeys)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DHPublicKeys::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pk_.~RepeatedPtrField();
}

void DHPublicKeys::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DHPublicKeys::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.DHPublicKeys)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pk_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DHPublicKeys::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string pk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_pk();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "fedtree.DHPublicKeys.pk"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DHPublicKeys::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.DHPublicKeys)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string pk = 1;
  for (int i = 0, n = this->_internal_pk_size(); i < n; i++) {
    const auto& s = this->_internal_pk(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fedtree.DHPublicKeys.pk");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.DHPublicKeys)
  return target;
}

size_t DHPublicKeys::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.DHPublicKeys)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string pk = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.pk_.size());
  for (int i = 0, n = _impl_.pk_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.pk_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DHPublicKeys::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DHPublicKeys::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DHPublicKeys::GetClassData() const { return &_class_data_; }


void DHPublicKeys::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DHPublicKeys*>(&to_msg);
  auto& from = static_cast<const DHPublicKeys&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fedtree.DHPublicKeys)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pk_.MergeFrom(from._impl_.pk_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DHPublicKeys::CopyFrom(const DHPublicKeys& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.DHPublicKeys)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DHPublicKeys::IsInitialized() const {
  return true;
}

void DHPublicKeys::InternalSwap(DHPublicKeys* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pk_.InternalSwap(&other->_impl_.pk_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DHPublicKeys::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fedtree_2eproto_getter, &descriptor_table_fedtree_2eproto_once,
      file_level_metadata_fedtree_2eproto[21]);
}

// ===================================================================

class SANoise::_Internal {
 public:
};

SANoise::SANoise(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fedtree.SANoise)
}
SANoise::SANoise(const SANoise& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SANoise* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.noise_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.noise_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.noise_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_noise().empty()) {
    _this->_impl_.noise_.Set(from._internal_noise(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:fedtree.SANoise)
}

inline void SANoise::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.noise_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.noise_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.noise_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SANoise::~SANoise() {
  // @@protoc_insertion_point(destructor:fedtree.SANoise)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SANoise::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.noise_.Destroy();
}

void SANoise::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SANoise::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.SANoise)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.noise_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SANoise::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string noise = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_noise();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fedtree.SANoise.noise"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SANoise::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.SANoise)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string noise = 1;
  if (!this->_internal_noise().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_noise().data(), static_cast<int>(this->_internal_noise().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fedtree.SANoise.noise");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_noise(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.SANoise)
  return target;
}

size_t SANoise::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.SANoise)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string noise = 1;
  if (!this->_internal_noise().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_noise());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SANoise::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SANoise::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SANoise::GetClassData() const { return &_class_data_; }


void SANoise::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SANoise*>(&to_msg);
  auto& from = static_cast<const SANoise&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fedtree.SANoise)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_noise().empty()) {
    _this->_internal_set_noise(from._internal_noise());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SANoise::CopyFrom(const SANoise& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.SANoise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SANoise::IsInitialized() const {
  return true;
}

void SANoise::InternalSwap(SANoise* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.noise_, lhs_arena,
      &other->_impl_.noise_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SANoise::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fedtree_2eproto_getter, &descriptor_table_fedtree_2eproto_once,
      file_level_metadata_fedtree_2eproto[22]);
}

// ===================================================================

class SANoises::_Internal {
 public:
};

SANoises::SANoises(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fedtree.SANoises)
}
SANoises::SANoises(const SANoises& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SANoises* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.noises_){from._impl_.noises_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fedtree.SANoises)
}

inline void SANoises::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.noises_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SANoises::~SANoises() {
  // @@protoc_insertion_point(destructor:fedtree.SANoises)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SANoises::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.noises_.~RepeatedPtrField();
}

void SANoises::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SANoises::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.SANoises)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.noises_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SANoises::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string noises = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_noises();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "fedtree.SANoises.noises"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SANoises::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.SANoises)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string noises = 1;
  for (int i = 0, n = this->_internal_noises_size(); i < n; i++) {
    const auto& s = this->_internal_noises(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fedtree.SANoises.noises");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.SANoises)
  return target;
}

size_t SANoises::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.SANoises)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string noises = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.noises_.size());
  for (int i = 0, n = _impl_.noises_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.noises_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SANoises::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SANoises::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SANoises::GetClassData() const { return &_class_data_; }


void SANoises::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SANoises*>(&to_msg);
  auto& from = static_cast<const SANoises&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fedtree.SANoises)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.noises_.MergeFrom(from._impl_.noises_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SANoises::CopyFrom(const SANoises& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.SANoises)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SANoises::IsInitialized() const {
  return true;
}

void SANoises::InternalSwap(SANoises* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.noises_.InternalSwap(&other->_impl_.noises_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SANoises::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fedtree_2eproto_getter, &descriptor_table_fedtree_2eproto_once,
      file_level_metadata_fedtree_2eproto[23]);
}

// ===================================================================

class CutPoints::_Internal {
 public:
};

CutPoints::CutPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fedtree.CutPoints)
}
CutPoints::CutPoints(const CutPoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CutPoints* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cut_points_val_){from._impl_.cut_points_val_}
    , decltype(_impl_.cut_col_ptr_){from._impl_.cut_col_ptr_}
    , /*decltype(_impl_._cut_col_ptr_cached_byte_size_)*/{0}
    , decltype(_impl_.cut_fid_){from._impl_.cut_fid_}
    , /*decltype(_impl_._cut_fid_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fedtree.CutPoints)
}

inline void CutPoints::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cut_points_val_){arena}
    , decltype(_impl_.cut_col_ptr_){arena}
    , /*decltype(_impl_._cut_col_ptr_cached_byte_size_)*/{0}
    , decltype(_impl_.cut_fid_){arena}
    , /*decltype(_impl_._cut_fid_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CutPoints::~CutPoints() {
  // @@protoc_insertion_point(destructor:fedtree.CutPoints)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CutPoints::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cut_points_val_.~RepeatedField();
  _impl_.cut_col_ptr_.~RepeatedField();
  _impl_.cut_fid_.~RepeatedField();
}

void CutPoints::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CutPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.CutPoints)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cut_points_val_.Clear();
  _impl_.cut_col_ptr_.Clear();
  _impl_.cut_fid_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CutPoints::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double cut_points_val = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_cut_points_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 9) {
          _internal_add_cut_points_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 cut_col_ptr = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_cut_col_ptr(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_cut_col_ptr(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 cut_fid = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_cut_fid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_cut_fid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CutPoints::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.CutPoints)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double cut_points_val = 1 [packed = true];
  if (this->_internal_cut_points_val_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_cut_points_val(), target);
  }

  // repeated int32 cut_col_ptr = 2 [packed = true];
  {
    int byte_size = _impl_._cut_col_ptr_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_cut_col_ptr(), byte_size, target);
    }
  }

  // repeated int32 cut_fid = 3 [packed = true];
  {
    int byte_size = _impl_._cut_fid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_cut_fid(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.CutPoints)
  return target;
}

size_t CutPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.CutPoints)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double cut_points_val = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_cut_points_val_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 cut_col_ptr = 2 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.cut_col_ptr_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._cut_col_ptr_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 cut_fid = 3 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.cut_fid_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._cut_fid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CutPoints::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CutPoints::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CutPoints::GetClassData() const { return &_class_data_; }


void CutPoints::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CutPoints*>(&to_msg);
  auto& from = static_cast<const CutPoints&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fedtree.CutPoints)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cut_points_val_.MergeFrom(from._impl_.cut_points_val_);
  _this->_impl_.cut_col_ptr_.MergeFrom(from._impl_.cut_col_ptr_);
  _this->_impl_.cut_fid_.MergeFrom(from._impl_.cut_fid_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CutPoints::CopyFrom(const CutPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.CutPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CutPoints::IsInitialized() const {
  return true;
}

void CutPoints::InternalSwap(CutPoints* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cut_points_val_.InternalSwap(&other->_impl_.cut_points_val_);
  _impl_.cut_col_ptr_.InternalSwap(&other->_impl_.cut_col_ptr_);
  _impl_.cut_fid_.InternalSwap(&other->_impl_.cut_fid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CutPoints::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fedtree_2eproto_getter, &descriptor_table_fedtree_2eproto_once,
      file_level_metadata_fedtree_2eproto[24]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace fedtree
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fedtree::FIDBatch*
Arena::CreateMaybeMessage< ::fedtree::FIDBatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::FIDBatch >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::GHBatch*
Arena::CreateMaybeMessage< ::fedtree::GHBatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::GHBatch >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::GHEncBatch*
Arena::CreateMaybeMessage< ::fedtree::GHEncBatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::GHEncBatch >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::GHPair*
Arena::CreateMaybeMessage< ::fedtree::GHPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::GHPair >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::GHArray*
Arena::CreateMaybeMessage< ::fedtree::GHArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::GHArray >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::GHPairEnc*
Arena::CreateMaybeMessage< ::fedtree::GHPairEnc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::GHPairEnc >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::Paillier*
Arena::CreateMaybeMessage< ::fedtree::Paillier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::Paillier >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::SplitPoint*
Arena::CreateMaybeMessage< ::fedtree::SplitPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::SplitPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::Score*
Arena::CreateMaybeMessage< ::fedtree::Score >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::Score >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::PID*
Arena::CreateMaybeMessage< ::fedtree::PID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::PID >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::Ready*
Arena::CreateMaybeMessage< ::fedtree::Ready >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::Ready >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::DatasetInfo*
Arena::CreateMaybeMessage< ::fedtree::DatasetInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::DatasetInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::FID*
Arena::CreateMaybeMessage< ::fedtree::FID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::FID >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::BestInfo*
Arena::CreateMaybeMessage< ::fedtree::BestInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::BestInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::NodeEnc*
Arena::CreateMaybeMessage< ::fedtree::NodeEnc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::NodeEnc >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::Node*
Arena::CreateMaybeMessage< ::fedtree::Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::NodeEncArray*
Arena::CreateMaybeMessage< ::fedtree::NodeEncArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::NodeEncArray >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::NodeArray*
Arena::CreateMaybeMessage< ::fedtree::NodeArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::NodeArray >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::Ins2NodeID*
Arena::CreateMaybeMessage< ::fedtree::Ins2NodeID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::Ins2NodeID >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::Ins2NodeIDBatch*
Arena::CreateMaybeMessage< ::fedtree::Ins2NodeIDBatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::Ins2NodeIDBatch >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::DHPublicKey*
Arena::CreateMaybeMessage< ::fedtree::DHPublicKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::DHPublicKey >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::DHPublicKeys*
Arena::CreateMaybeMessage< ::fedtree::DHPublicKeys >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::DHPublicKeys >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::SANoise*
Arena::CreateMaybeMessage< ::fedtree::SANoise >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::SANoise >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::SANoises*
Arena::CreateMaybeMessage< ::fedtree::SANoises >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::SANoises >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::CutPoints*
Arena::CreateMaybeMessage< ::fedtree::CutPoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::CutPoints >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
