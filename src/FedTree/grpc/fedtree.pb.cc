// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fedtree.proto

#include "fedtree.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace fedtree {
class FIDBatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FIDBatch> _instance;
} _FIDBatch_default_instance_;
class GHBatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GHBatch> _instance;
} _GHBatch_default_instance_;
class GHEncBatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GHEncBatch> _instance;
} _GHEncBatch_default_instance_;
class GHPairDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GHPair> _instance;
} _GHPair_default_instance_;
class GHArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GHArray> _instance;
} _GHArray_default_instance_;
class GHPairEncDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GHPairEnc> _instance;
} _GHPairEnc_default_instance_;
class PaillierDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Paillier> _instance;
} _Paillier_default_instance_;
class SplitPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SplitPoint> _instance;
} _SplitPoint_default_instance_;
class ScoreDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Score> _instance;
} _Score_default_instance_;
class PIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PID> _instance;
} _PID_default_instance_;
class ReadyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ready> _instance;
} _Ready_default_instance_;
class DatasetInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DatasetInfo> _instance;
} _DatasetInfo_default_instance_;
class FIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FID> _instance;
} _FID_default_instance_;
class BestInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BestInfo> _instance;
} _BestInfo_default_instance_;
class NodeEncDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeEnc> _instance;
} _NodeEnc_default_instance_;
class NodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Node> _instance;
} _Node_default_instance_;
class NodeEncArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeEncArray> _instance;
} _NodeEncArray_default_instance_;
class NodeArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeArray> _instance;
} _NodeArray_default_instance_;
class Ins2NodeIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ins2NodeID> _instance;
} _Ins2NodeID_default_instance_;
class Ins2NodeIDBatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ins2NodeIDBatch> _instance;
} _Ins2NodeIDBatch_default_instance_;
class DHPublicKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DHPublicKey> _instance;
} _DHPublicKey_default_instance_;
class DHPublicKeysDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DHPublicKeys> _instance;
} _DHPublicKeys_default_instance_;
class SANoiseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SANoise> _instance;
} _SANoise_default_instance_;
class SANoisesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SANoises> _instance;
} _SANoises_default_instance_;
class CutPointsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CutPoints> _instance;
} _CutPoints_default_instance_;
}  // namespace fedtree
static void InitDefaultsscc_info_BestInfo_fedtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fedtree::_BestInfo_default_instance_;
    new (ptr) ::fedtree::BestInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BestInfo_fedtree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BestInfo_fedtree_2eproto}, {}};

static void InitDefaultsscc_info_CutPoints_fedtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fedtree::_CutPoints_default_instance_;
    new (ptr) ::fedtree::CutPoints();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CutPoints_fedtree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CutPoints_fedtree_2eproto}, {}};

static void InitDefaultsscc_info_DHPublicKey_fedtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fedtree::_DHPublicKey_default_instance_;
    new (ptr) ::fedtree::DHPublicKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DHPublicKey_fedtree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DHPublicKey_fedtree_2eproto}, {}};

static void InitDefaultsscc_info_DHPublicKeys_fedtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fedtree::_DHPublicKeys_default_instance_;
    new (ptr) ::fedtree::DHPublicKeys();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DHPublicKeys_fedtree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DHPublicKeys_fedtree_2eproto}, {}};

static void InitDefaultsscc_info_DatasetInfo_fedtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fedtree::_DatasetInfo_default_instance_;
    new (ptr) ::fedtree::DatasetInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DatasetInfo_fedtree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DatasetInfo_fedtree_2eproto}, {}};

static void InitDefaultsscc_info_FID_fedtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fedtree::_FID_default_instance_;
    new (ptr) ::fedtree::FID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FID_fedtree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FID_fedtree_2eproto}, {}};

static void InitDefaultsscc_info_FIDBatch_fedtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fedtree::_FIDBatch_default_instance_;
    new (ptr) ::fedtree::FIDBatch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FIDBatch_fedtree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FIDBatch_fedtree_2eproto}, {}};

static void InitDefaultsscc_info_GHArray_fedtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fedtree::_GHArray_default_instance_;
    new (ptr) ::fedtree::GHArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GHArray_fedtree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GHArray_fedtree_2eproto}, {}};

static void InitDefaultsscc_info_GHBatch_fedtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fedtree::_GHBatch_default_instance_;
    new (ptr) ::fedtree::GHBatch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GHBatch_fedtree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GHBatch_fedtree_2eproto}, {}};

static void InitDefaultsscc_info_GHEncBatch_fedtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fedtree::_GHEncBatch_default_instance_;
    new (ptr) ::fedtree::GHEncBatch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GHEncBatch_fedtree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GHEncBatch_fedtree_2eproto}, {}};

static void InitDefaultsscc_info_GHPair_fedtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fedtree::_GHPair_default_instance_;
    new (ptr) ::fedtree::GHPair();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GHPair_fedtree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GHPair_fedtree_2eproto}, {}};

static void InitDefaultsscc_info_GHPairEnc_fedtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fedtree::_GHPairEnc_default_instance_;
    new (ptr) ::fedtree::GHPairEnc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GHPairEnc_fedtree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GHPairEnc_fedtree_2eproto}, {}};

static void InitDefaultsscc_info_Ins2NodeID_fedtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fedtree::_Ins2NodeID_default_instance_;
    new (ptr) ::fedtree::Ins2NodeID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ins2NodeID_fedtree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Ins2NodeID_fedtree_2eproto}, {}};

static void InitDefaultsscc_info_Ins2NodeIDBatch_fedtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fedtree::_Ins2NodeIDBatch_default_instance_;
    new (ptr) ::fedtree::Ins2NodeIDBatch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ins2NodeIDBatch_fedtree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Ins2NodeIDBatch_fedtree_2eproto}, {}};

static void InitDefaultsscc_info_Node_fedtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fedtree::_Node_default_instance_;
    new (ptr) ::fedtree::Node();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Node_fedtree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Node_fedtree_2eproto}, {}};

static void InitDefaultsscc_info_NodeArray_fedtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fedtree::_NodeArray_default_instance_;
    new (ptr) ::fedtree::NodeArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeArray_fedtree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NodeArray_fedtree_2eproto}, {}};

static void InitDefaultsscc_info_NodeEnc_fedtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fedtree::_NodeEnc_default_instance_;
    new (ptr) ::fedtree::NodeEnc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeEnc_fedtree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NodeEnc_fedtree_2eproto}, {}};

static void InitDefaultsscc_info_NodeEncArray_fedtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fedtree::_NodeEncArray_default_instance_;
    new (ptr) ::fedtree::NodeEncArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeEncArray_fedtree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NodeEncArray_fedtree_2eproto}, {}};

static void InitDefaultsscc_info_PID_fedtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fedtree::_PID_default_instance_;
    new (ptr) ::fedtree::PID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PID_fedtree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PID_fedtree_2eproto}, {}};

static void InitDefaultsscc_info_Paillier_fedtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fedtree::_Paillier_default_instance_;
    new (ptr) ::fedtree::Paillier();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Paillier_fedtree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Paillier_fedtree_2eproto}, {}};

static void InitDefaultsscc_info_Ready_fedtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fedtree::_Ready_default_instance_;
    new (ptr) ::fedtree::Ready();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ready_fedtree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Ready_fedtree_2eproto}, {}};

static void InitDefaultsscc_info_SANoise_fedtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fedtree::_SANoise_default_instance_;
    new (ptr) ::fedtree::SANoise();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SANoise_fedtree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SANoise_fedtree_2eproto}, {}};

static void InitDefaultsscc_info_SANoises_fedtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fedtree::_SANoises_default_instance_;
    new (ptr) ::fedtree::SANoises();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SANoises_fedtree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SANoises_fedtree_2eproto}, {}};

static void InitDefaultsscc_info_Score_fedtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fedtree::_Score_default_instance_;
    new (ptr) ::fedtree::Score();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Score_fedtree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Score_fedtree_2eproto}, {}};

static void InitDefaultsscc_info_SplitPoint_fedtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fedtree::_SplitPoint_default_instance_;
    new (ptr) ::fedtree::SplitPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SplitPoint_fedtree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SplitPoint_fedtree_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_fedtree_2eproto[25];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_fedtree_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_fedtree_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_fedtree_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::FIDBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fedtree::FIDBatch, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::GHBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fedtree::GHBatch, g_),
  PROTOBUF_FIELD_OFFSET(::fedtree::GHBatch, h_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::GHEncBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fedtree::GHEncBatch, g_enc_),
  PROTOBUF_FIELD_OFFSET(::fedtree::GHEncBatch, h_enc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::GHPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fedtree::GHPair, g_),
  PROTOBUF_FIELD_OFFSET(::fedtree::GHPair, h_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::GHArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fedtree::GHArray, g_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::GHPairEnc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fedtree::GHPairEnc, g_enc_),
  PROTOBUF_FIELD_OFFSET(::fedtree::GHPairEnc, h_enc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::Paillier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fedtree::Paillier, modulus_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Paillier, generator_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::SplitPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fedtree::SplitPoint, gain_),
  PROTOBUF_FIELD_OFFSET(::fedtree::SplitPoint, fea_missing_g_),
  PROTOBUF_FIELD_OFFSET(::fedtree::SplitPoint, fea_missing_h_),
  PROTOBUF_FIELD_OFFSET(::fedtree::SplitPoint, rch_sum_g_),
  PROTOBUF_FIELD_OFFSET(::fedtree::SplitPoint, rch_sum_h_),
  PROTOBUF_FIELD_OFFSET(::fedtree::SplitPoint, default_right_),
  PROTOBUF_FIELD_OFFSET(::fedtree::SplitPoint, nid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::SplitPoint, split_fea_id_),
  PROTOBUF_FIELD_OFFSET(::fedtree::SplitPoint, fval_),
  PROTOBUF_FIELD_OFFSET(::fedtree::SplitPoint, split_bid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::SplitPoint, no_split_value_update_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::Score, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fedtree::Score, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::PID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fedtree::PID, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::Ready, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fedtree::Ready, ready_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::DatasetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fedtree::DatasetInfo, n_bins_),
  PROTOBUF_FIELD_OFFSET(::fedtree::DatasetInfo, n_columns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::FID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fedtree::FID, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::BestInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fedtree::BestInfo, pid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::BestInfo, nid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::BestInfo, idx_),
  PROTOBUF_FIELD_OFFSET(::fedtree::BestInfo, global_fid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::BestInfo, gain_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEnc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEnc, final_id_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEnc, lch_index_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEnc, rch_index_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEnc, parent_index_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEnc, gain_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEnc, base_weight_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEnc, split_feature_id_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEnc, pid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEnc, split_value_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEnc, split_bid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEnc, default_right_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEnc, is_leaf_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEnc, is_valid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEnc, is_pruned_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEnc, sum_gh_pair_g_enc_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEnc, sum_gh_pair_h_enc_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEnc, n_instances_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, final_id_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, lch_index_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, rch_index_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, parent_index_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, gain_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, base_weight_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, split_feature_id_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, pid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, split_value_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, split_bid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, default_right_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, is_leaf_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, is_valid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, is_pruned_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, sum_gh_pair_g_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, sum_gh_pair_h_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, n_instances_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEncArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEncArray, final_id_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEncArray, lch_index_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEncArray, rch_index_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEncArray, parent_index_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEncArray, gain_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEncArray, base_weight_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEncArray, split_feature_id_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEncArray, pid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEncArray, split_value_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEncArray, split_bid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEncArray, default_right_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEncArray, is_leaf_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEncArray, is_valid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEncArray, is_pruned_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEncArray, sum_gh_pair_g_enc_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEncArray, sum_gh_pair_h_enc_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeEncArray, n_instances_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeArray, final_id_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeArray, lch_index_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeArray, rch_index_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeArray, parent_index_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeArray, gain_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeArray, base_weight_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeArray, split_feature_id_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeArray, pid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeArray, split_value_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeArray, split_bid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeArray, default_right_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeArray, is_leaf_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeArray, is_valid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeArray, is_pruned_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeArray, sum_gh_pair_g_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeArray, sum_gh_pair_h_),
  PROTOBUF_FIELD_OFFSET(::fedtree::NodeArray, n_instances_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::Ins2NodeID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fedtree::Ins2NodeID, iid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Ins2NodeID, nid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::Ins2NodeIDBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fedtree::Ins2NodeIDBatch, iid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Ins2NodeIDBatch, nid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::DHPublicKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fedtree::DHPublicKey, pk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::DHPublicKeys, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fedtree::DHPublicKeys, pk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::SANoise, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fedtree::SANoise, noise_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::SANoises, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fedtree::SANoises, noises_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::CutPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fedtree::CutPoints, cut_points_val_),
  PROTOBUF_FIELD_OFFSET(::fedtree::CutPoints, cut_col_ptr_),
  PROTOBUF_FIELD_OFFSET(::fedtree::CutPoints, cut_fid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::fedtree::FIDBatch)},
  { 6, -1, sizeof(::fedtree::GHBatch)},
  { 13, -1, sizeof(::fedtree::GHEncBatch)},
  { 20, -1, sizeof(::fedtree::GHPair)},
  { 27, -1, sizeof(::fedtree::GHArray)},
  { 33, -1, sizeof(::fedtree::GHPairEnc)},
  { 40, -1, sizeof(::fedtree::Paillier)},
  { 47, -1, sizeof(::fedtree::SplitPoint)},
  { 63, -1, sizeof(::fedtree::Score)},
  { 69, -1, sizeof(::fedtree::PID)},
  { 75, -1, sizeof(::fedtree::Ready)},
  { 81, -1, sizeof(::fedtree::DatasetInfo)},
  { 88, -1, sizeof(::fedtree::FID)},
  { 94, -1, sizeof(::fedtree::BestInfo)},
  { 104, -1, sizeof(::fedtree::NodeEnc)},
  { 126, -1, sizeof(::fedtree::Node)},
  { 148, -1, sizeof(::fedtree::NodeEncArray)},
  { 170, -1, sizeof(::fedtree::NodeArray)},
  { 192, -1, sizeof(::fedtree::Ins2NodeID)},
  { 199, -1, sizeof(::fedtree::Ins2NodeIDBatch)},
  { 206, -1, sizeof(::fedtree::DHPublicKey)},
  { 212, -1, sizeof(::fedtree::DHPublicKeys)},
  { 218, -1, sizeof(::fedtree::SANoise)},
  { 224, -1, sizeof(::fedtree::SANoises)},
  { 230, -1, sizeof(::fedtree::CutPoints)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fedtree::_FIDBatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fedtree::_GHBatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fedtree::_GHEncBatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fedtree::_GHPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fedtree::_GHArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fedtree::_GHPairEnc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fedtree::_Paillier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fedtree::_SplitPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fedtree::_Score_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fedtree::_PID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fedtree::_Ready_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fedtree::_DatasetInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fedtree::_FID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fedtree::_BestInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fedtree::_NodeEnc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fedtree::_Node_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fedtree::_NodeEncArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fedtree::_NodeArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fedtree::_Ins2NodeID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fedtree::_Ins2NodeIDBatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fedtree::_DHPublicKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fedtree::_DHPublicKeys_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fedtree::_SANoise_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fedtree::_SANoises_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fedtree::_CutPoints_default_instance_),
};

const char descriptor_table_protodef_fedtree_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rfedtree.proto\022\007fedtree\"\032\n\010FIDBatch\022\016\n\002"
  "id\030\001 \003(\005B\002\020\001\"\'\n\007GHBatch\022\r\n\001g\030\001 \003(\001B\002\020\001\022\r"
  "\n\001h\030\002 \003(\001B\002\020\001\"*\n\nGHEncBatch\022\r\n\005g_enc\030\001 \003"
  "(\t\022\r\n\005h_enc\030\002 \003(\t\"\036\n\006GHPair\022\t\n\001g\030\001 \001(\001\022\t"
  "\n\001h\030\002 \001(\001\"\030\n\007GHArray\022\r\n\001g\030\001 \003(\001B\002\020\001\")\n\tG"
  "HPairEnc\022\r\n\005g_enc\030\001 \001(\t\022\r\n\005h_enc\030\002 \001(\t\"."
  "\n\010Paillier\022\017\n\007modulus\030\001 \001(\t\022\021\n\tgenerator"
  "\030\002 \001(\t\"\350\001\n\nSplitPoint\022\014\n\004gain\030\001 \001(\002\022\025\n\rf"
  "ea_missing_g\030\002 \001(\002\022\025\n\rfea_missing_h\030\003 \001("
  "\002\022\021\n\trch_sum_g\030\004 \001(\002\022\021\n\trch_sum_h\030\005 \001(\002\022"
  "\025\n\rdefault_right\030\006 \001(\010\022\013\n\003nid\030\007 \001(\005\022\024\n\014s"
  "plit_fea_id\030\010 \001(\005\022\014\n\004fval\030\t \001(\002\022\021\n\tsplit"
  "_bid\030\n \001(\005\022\035\n\025no_split_value_update\030\013 \001("
  "\010\"\030\n\005Score\022\017\n\007content\030\001 \001(\002\"\021\n\003PID\022\n\n\002id"
  "\030\001 \001(\005\"\026\n\005Ready\022\r\n\005ready\030\001 \001(\010\"0\n\013Datase"
  "tInfo\022\016\n\006n_bins\030\001 \001(\005\022\021\n\tn_columns\030\002 \001(\005"
  "\"\021\n\003FID\022\n\n\002id\030\001 \001(\005\"S\n\010BestInfo\022\013\n\003pid\030\001"
  " \001(\005\022\013\n\003nid\030\002 \001(\005\022\013\n\003idx\030\003 \001(\005\022\022\n\nglobal"
  "_fid\030\004 \001(\005\022\014\n\004gain\030\005 \001(\001\"\341\002\n\007NodeEnc\022\020\n\010"
  "final_id\030\001 \001(\005\022\021\n\tlch_index\030\002 \001(\005\022\021\n\trch"
  "_index\030\003 \001(\005\022\024\n\014parent_index\030\004 \001(\005\022\014\n\004ga"
  "in\030\005 \001(\002\022\023\n\013base_weight\030\006 \001(\002\022\030\n\020split_f"
  "eature_id\030\007 \001(\005\022\013\n\003pid\030\010 \001(\005\022\023\n\013split_va"
  "lue\030\t \001(\002\022\021\n\tsplit_bid\030\n \001(\005\022\025\n\rdefault_"
  "right\030\013 \001(\010\022\017\n\007is_leaf\030\014 \001(\010\022\020\n\010is_valid"
  "\030\r \001(\010\022\021\n\tis_pruned\030\016 \001(\010\022\031\n\021sum_gh_pair"
  "_g_enc\030\017 \001(\t\022\031\n\021sum_gh_pair_h_enc\030\020 \001(\t\022"
  "\023\n\013n_instances\030\021 \001(\005\"\326\002\n\004Node\022\020\n\010final_i"
  "d\030\001 \001(\005\022\021\n\tlch_index\030\002 \001(\005\022\021\n\trch_index\030"
  "\003 \001(\005\022\024\n\014parent_index\030\004 \001(\005\022\014\n\004gain\030\005 \001("
  "\002\022\023\n\013base_weight\030\006 \001(\002\022\030\n\020split_feature_"
  "id\030\007 \001(\005\022\013\n\003pid\030\010 \001(\005\022\023\n\013split_value\030\t \001"
  "(\002\022\021\n\tsplit_bid\030\n \001(\005\022\025\n\rdefault_right\030\013"
  " \001(\010\022\017\n\007is_leaf\030\014 \001(\010\022\020\n\010is_valid\030\r \001(\010\022"
  "\021\n\tis_pruned\030\016 \001(\010\022\025\n\rsum_gh_pair_g\030\017 \001("
  "\002\022\025\n\rsum_gh_pair_h\030\020 \001(\002\022\023\n\013n_instances\030"
  "\021 \001(\005\"\242\003\n\014NodeEncArray\022\024\n\010final_id\030\001 \003(\005"
  "B\002\020\001\022\025\n\tlch_index\030\002 \003(\005B\002\020\001\022\025\n\trch_index"
  "\030\003 \003(\005B\002\020\001\022\030\n\014parent_index\030\004 \003(\005B\002\020\001\022\020\n\004"
  "gain\030\005 \003(\002B\002\020\001\022\027\n\013base_weight\030\006 \003(\002B\002\020\001\022"
  "\034\n\020split_feature_id\030\007 \003(\005B\002\020\001\022\017\n\003pid\030\010 \003"
  "(\005B\002\020\001\022\027\n\013split_value\030\t \003(\002B\002\020\001\022\025\n\tsplit"
  "_bid\030\n \003(\005B\002\020\001\022\031\n\rdefault_right\030\013 \003(\010B\002\020"
  "\001\022\023\n\007is_leaf\030\014 \003(\010B\002\020\001\022\024\n\010is_valid\030\r \003(\010"
  "B\002\020\001\022\025\n\tis_pruned\030\016 \003(\010B\002\020\001\022\031\n\021sum_gh_pa"
  "ir_g_enc\030\017 \003(\t\022\031\n\021sum_gh_pair_h_enc\030\020 \003("
  "\t\022\027\n\013n_instances\030\021 \003(\005B\002\020\001\"\237\003\n\tNodeArray"
  "\022\024\n\010final_id\030\001 \003(\005B\002\020\001\022\025\n\tlch_index\030\002 \003("
  "\005B\002\020\001\022\025\n\trch_index\030\003 \003(\005B\002\020\001\022\030\n\014parent_i"
  "ndex\030\004 \003(\005B\002\020\001\022\020\n\004gain\030\005 \003(\002B\002\020\001\022\027\n\013base"
  "_weight\030\006 \003(\002B\002\020\001\022\034\n\020split_feature_id\030\007 "
  "\003(\005B\002\020\001\022\017\n\003pid\030\010 \003(\005B\002\020\001\022\027\n\013split_value\030"
  "\t \003(\002B\002\020\001\022\025\n\tsplit_bid\030\n \003(\005B\002\020\001\022\031\n\rdefa"
  "ult_right\030\013 \003(\010B\002\020\001\022\023\n\007is_leaf\030\014 \003(\010B\002\020\001"
  "\022\024\n\010is_valid\030\r \003(\010B\002\020\001\022\025\n\tis_pruned\030\016 \003("
  "\010B\002\020\001\022\031\n\rsum_gh_pair_g\030\017 \003(\002B\002\020\001\022\031\n\rsum_"
  "gh_pair_h\030\020 \003(\002B\002\020\001\022\027\n\013n_instances\030\021 \003(\005"
  "B\002\020\001\"&\n\nIns2NodeID\022\013\n\003iid\030\001 \001(\005\022\013\n\003nid\030\002"
  " \001(\005\"3\n\017Ins2NodeIDBatch\022\017\n\003iid\030\001 \003(\005B\002\020\001"
  "\022\017\n\003nid\030\002 \003(\005B\002\020\001\"\031\n\013DHPublicKey\022\n\n\002pk\030\001"
  " \001(\t\"\032\n\014DHPublicKeys\022\n\n\002pk\030\001 \003(\t\"\030\n\007SANo"
  "ise\022\r\n\005noise\030\001 \001(\t\"\032\n\010SANoises\022\016\n\006noises"
  "\030\001 \003(\t\"U\n\tCutPoints\022\032\n\016cut_points_val\030\001 "
  "\003(\001B\002\020\001\022\027\n\013cut_col_ptr\030\002 \003(\005B\002\020\001\022\023\n\007cut_"
  "fid\030\003 \003(\005B\002\020\0012\370\023\n\007FedTree\0228\n\026TriggerUpda"
  "teGradients\022\014.fedtree.PID\032\016.fedtree.Read"
  "y\"\000\0222\n\020TriggerBuildInit\022\014.fedtree.PID\032\016."
  "fedtree.Ready\"\000\0221\n\014GetGradients\022\014.fedtre"
  "e.PID\032\017.fedtree.GHPair\"\0000\001\0227\n\017SendDatase"
  "tInfo\022\024.fedtree.DatasetInfo\032\014.fedtree.PI"
  "D\"\000\0223\n\016SendHistograms\022\017.fedtree.GHPair\032\014"
  ".fedtree.PID\"\000(\001\022-\n\013SendHistFid\022\014.fedtre"
  "e.FID\032\014.fedtree.PID\"\000(\001\0222\n\020TriggerAggreg"
  "ate\022\014.fedtree.PID\032\016.fedtree.Ready\"\000\0222\n\013G"
  "etBestInfo\022\014.fedtree.PID\032\021.fedtree.BestI"
  "nfo\"\0000\001\022)\n\010SendNode\022\r.fedtree.Node\032\014.fed"
  "tree.PID\"\000\0227\n\016SendIns2NodeID\022\023.fedtree.I"
  "ns2NodeID\032\014.fedtree.PID\"\000(\001\022+\n\010GetNodes\022"
  "\014.fedtree.PID\032\r.fedtree.Node\"\0000\001\0226\n\rGetI"
  "ns2NodeID\022\014.fedtree.PID\032\023.fedtree.Ins2No"
  "deID\"\0000\001\0221\n\017CheckIfContinue\022\014.fedtree.PI"
  "D\032\016.fedtree.Ready\"\000\022.\n\014TriggerPrune\022\014.fe"
  "dtree.PID\032\016.fedtree.Ready\"\000\0223\n\021TriggerPr"
  "intScore\022\014.fedtree.PID\032\016.fedtree.Ready\"\000"
  "\022.\n\tSendRange\022\017.fedtree.GHPair\032\014.fedtree"
  ".PID\"\000(\001\022,\n\nTriggerCut\022\014.fedtree.PID\032\016.f"
  "edtree.Ready\"\000\022-\n\010GetRange\022\014.fedtree.PID"
  "\032\017.fedtree.GHPair\"\0000\001\022)\n\006SendGH\022\017.fedtre"
  "e.GHPair\032\014.fedtree.PID\"\000\0224\n\014SendDHPubKey"
  "\022\024.fedtree.DHPublicKey\032\014.fedtree.PID\"\000\0227"
  "\n\014GetDHPubKeys\022\014.fedtree.PID\032\025.fedtree.D"
  "HPublicKeys\"\0000\001\022/\n\nSendNoises\022\021.fedtree."
  "SANoises\032\014.fedtree.PID\"\000\0220\n\tGetNoises\022\014."
  "fedtree.PID\032\021.fedtree.SANoises\"\0000\001\0223\n\rSe"
  "ndCutPoints\022\022.fedtree.CutPoints\032\014.fedtre"
  "e.PID\"\000\0224\n\014GetCutPoints\022\014.fedtree.PID\032\022."
  "fedtree.CutPoints\"\0000\001\0225\n\023TriggerBuildUsi"
  "ngGH\022\014.fedtree.PID\032\016.fedtree.Ready\"\000\0221\n\017"
  "TriggerCalcTree\022\014.fedtree.PID\032\016.fedtree."
  "Ready\"\000\022*\n\013GetRootNode\022\014.fedtree.PID\032\r.f"
  "edtree.Node\0227\n\016GetSplitPoints\022\014.fedtree."
  "PID\032\023.fedtree.SplitPoint\"\0000\001\0222\n\020HCheckIf"
  "Continue\022\014.fedtree.PID\032\016.fedtree.Ready\"\000"
  "\022/\n\013ScoreReduce\022\016.fedtree.Score\032\016.fedtre"
  "e.Score\"\000\0221\n\017TriggerHomoInit\022\014.fedtree.P"
  "ID\032\016.fedtree.Ready\"\000\022/\n\rTriggerSAInit\022\014."
  "fedtree.PID\032\016.fedtree.Ready\"\000\0220\n\013GetPail"
  "lier\022\014.fedtree.PID\032\021.fedtree.Paillier\"\000\022"
  "9\n\021SendHistogramsEnc\022\022.fedtree.GHPairEnc"
  "\032\014.fedtree.PID\"\000(\001\0229\n\025SendBatchedHistogr"
  "ams\022\020.fedtree.GHArray\032\014.fedtree.PID\"\000\022:\n"
  "\024SendHistogramBatches\022\020.fedtree.GHBatch\032"
  "\014.fedtree.PID\"\000(\001\0229\n\022SendHistFidBatches\022"
  "\021.fedtree.FIDBatch\032\014.fedtree.PID\"\000(\001\022B\n\024"
  "GetIns2NodeIDBatches\022\014.fedtree.PID\032\030.fed"
  "tree.Ins2NodeIDBatch\"\0000\001\022C\n\025SendIns2Node"
  "IDBatches\022\030.fedtree.Ins2NodeIDBatch\032\014.fe"
  "dtree.PID\"\000(\001\0228\n\022GetGradientBatches\022\014.fe"
  "dtree.PID\032\020.fedtree.GHBatch\"\0000\001\022>\n\025GetGr"
  "adientBatchesEnc\022\014.fedtree.PID\032\023.fedtree"
  ".GHEncBatch\"\0000\001\022/\n\013SendNodeEnc\022\020.fedtree"
  ".NodeEnc\032\014.fedtree.PID\"\000\022/\n\tSendNodes\022\022."
  "fedtree.NodeArray\032\014.fedtree.PID\"\000\0225\n\014Sen"
  "dNodesEnc\022\025.fedtree.NodeEncArray\032\014.fedtr"
  "ee.PID\"\000\022@\n\027SendHistogramBatchesEnc\022\023.fe"
  "dtree.GHEncBatch\032\014.fedtree.PID\"\000(\001\022,\n\nSt"
  "opServer\022\014.fedtree.PID\032\016.fedtree.Score\"\000"
  "\022.\n\014BeginBarrier\022\014.fedtree.PID\032\016.fedtree"
  ".Ready\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_fedtree_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_fedtree_2eproto_sccs[25] = {
  &scc_info_BestInfo_fedtree_2eproto.base,
  &scc_info_CutPoints_fedtree_2eproto.base,
  &scc_info_DHPublicKey_fedtree_2eproto.base,
  &scc_info_DHPublicKeys_fedtree_2eproto.base,
  &scc_info_DatasetInfo_fedtree_2eproto.base,
  &scc_info_FID_fedtree_2eproto.base,
  &scc_info_FIDBatch_fedtree_2eproto.base,
  &scc_info_GHArray_fedtree_2eproto.base,
  &scc_info_GHBatch_fedtree_2eproto.base,
  &scc_info_GHEncBatch_fedtree_2eproto.base,
  &scc_info_GHPair_fedtree_2eproto.base,
  &scc_info_GHPairEnc_fedtree_2eproto.base,
  &scc_info_Ins2NodeID_fedtree_2eproto.base,
  &scc_info_Ins2NodeIDBatch_fedtree_2eproto.base,
  &scc_info_Node_fedtree_2eproto.base,
  &scc_info_NodeArray_fedtree_2eproto.base,
  &scc_info_NodeEnc_fedtree_2eproto.base,
  &scc_info_NodeEncArray_fedtree_2eproto.base,
  &scc_info_PID_fedtree_2eproto.base,
  &scc_info_Paillier_fedtree_2eproto.base,
  &scc_info_Ready_fedtree_2eproto.base,
  &scc_info_SANoise_fedtree_2eproto.base,
  &scc_info_SANoises_fedtree_2eproto.base,
  &scc_info_Score_fedtree_2eproto.base,
  &scc_info_SplitPoint_fedtree_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_fedtree_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fedtree_2eproto = {
  false, false, descriptor_table_protodef_fedtree_2eproto, "fedtree.proto", 5136,
  &descriptor_table_fedtree_2eproto_once, descriptor_table_fedtree_2eproto_sccs, descriptor_table_fedtree_2eproto_deps, 25, 0,
  schemas, file_default_instances, TableStruct_fedtree_2eproto::offsets,
  file_level_metadata_fedtree_2eproto, 25, file_level_enum_descriptors_fedtree_2eproto, file_level_service_descriptors_fedtree_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_fedtree_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_fedtree_2eproto)), true);
namespace fedtree {

// ===================================================================

class FIDBatch::_Internal {
 public:
};

FIDBatch::FIDBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fedtree.FIDBatch)
}
FIDBatch::FIDBatch(const FIDBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      id_(from.id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fedtree.FIDBatch)
}

void FIDBatch::SharedCtor() {
}

FIDBatch::~FIDBatch() {
  // @@protoc_insertion_point(destructor:fedtree.FIDBatch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FIDBatch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FIDBatch::ArenaDtor(void* object) {
  FIDBatch* _this = reinterpret_cast< FIDBatch* >(object);
  (void)_this;
}
void FIDBatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FIDBatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FIDBatch& FIDBatch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FIDBatch_fedtree_2eproto.base);
  return *internal_default_instance();
}


void FIDBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.FIDBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FIDBatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 id = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FIDBatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.FIDBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 id = 1 [packed = true];
  {
    int byte_size = _id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.FIDBatch)
  return target;
}

size_t FIDBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.FIDBatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 id = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FIDBatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fedtree.FIDBatch)
  GOOGLE_DCHECK_NE(&from, this);
  const FIDBatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FIDBatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fedtree.FIDBatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fedtree.FIDBatch)
    MergeFrom(*source);
  }
}

void FIDBatch::MergeFrom(const FIDBatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fedtree.FIDBatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  id_.MergeFrom(from.id_);
}

void FIDBatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fedtree.FIDBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FIDBatch::CopyFrom(const FIDBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.FIDBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FIDBatch::IsInitialized() const {
  return true;
}

void FIDBatch::InternalSwap(FIDBatch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.InternalSwap(&other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FIDBatch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GHBatch::_Internal {
 public:
};

GHBatch::GHBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  g_(arena),
  h_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fedtree.GHBatch)
}
GHBatch::GHBatch(const GHBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      g_(from.g_),
      h_(from.h_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fedtree.GHBatch)
}

void GHBatch::SharedCtor() {
}

GHBatch::~GHBatch() {
  // @@protoc_insertion_point(destructor:fedtree.GHBatch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GHBatch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GHBatch::ArenaDtor(void* object) {
  GHBatch* _this = reinterpret_cast< GHBatch* >(object);
  (void)_this;
}
void GHBatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GHBatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GHBatch& GHBatch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GHBatch_fedtree_2eproto.base);
  return *internal_default_instance();
}


void GHBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.GHBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  g_.Clear();
  h_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GHBatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double g = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_g(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_g(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double h = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_h(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_h(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GHBatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.GHBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double g = 1 [packed = true];
  if (this->_internal_g_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_g(), target);
  }

  // repeated double h = 2 [packed = true];
  if (this->_internal_h_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_h(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.GHBatch)
  return target;
}

size_t GHBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.GHBatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double g = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_g_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _g_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double h = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_h_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _h_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GHBatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fedtree.GHBatch)
  GOOGLE_DCHECK_NE(&from, this);
  const GHBatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GHBatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fedtree.GHBatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fedtree.GHBatch)
    MergeFrom(*source);
  }
}

void GHBatch::MergeFrom(const GHBatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fedtree.GHBatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  g_.MergeFrom(from.g_);
  h_.MergeFrom(from.h_);
}

void GHBatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fedtree.GHBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GHBatch::CopyFrom(const GHBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.GHBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GHBatch::IsInitialized() const {
  return true;
}

void GHBatch::InternalSwap(GHBatch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  g_.InternalSwap(&other->g_);
  h_.InternalSwap(&other->h_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GHBatch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GHEncBatch::_Internal {
 public:
};

GHEncBatch::GHEncBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  g_enc_(arena),
  h_enc_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fedtree.GHEncBatch)
}
GHEncBatch::GHEncBatch(const GHEncBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      g_enc_(from.g_enc_),
      h_enc_(from.h_enc_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fedtree.GHEncBatch)
}

void GHEncBatch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GHEncBatch_fedtree_2eproto.base);
}

GHEncBatch::~GHEncBatch() {
  // @@protoc_insertion_point(destructor:fedtree.GHEncBatch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GHEncBatch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GHEncBatch::ArenaDtor(void* object) {
  GHEncBatch* _this = reinterpret_cast< GHEncBatch* >(object);
  (void)_this;
}
void GHEncBatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GHEncBatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GHEncBatch& GHEncBatch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GHEncBatch_fedtree_2eproto.base);
  return *internal_default_instance();
}


void GHEncBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.GHEncBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  g_enc_.Clear();
  h_enc_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GHEncBatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string g_enc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_g_enc();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fedtree.GHEncBatch.g_enc"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string h_enc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_h_enc();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fedtree.GHEncBatch.h_enc"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GHEncBatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.GHEncBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string g_enc = 1;
  for (int i = 0, n = this->_internal_g_enc_size(); i < n; i++) {
    const auto& s = this->_internal_g_enc(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fedtree.GHEncBatch.g_enc");
    target = stream->WriteString(1, s, target);
  }

  // repeated string h_enc = 2;
  for (int i = 0, n = this->_internal_h_enc_size(); i < n; i++) {
    const auto& s = this->_internal_h_enc(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fedtree.GHEncBatch.h_enc");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.GHEncBatch)
  return target;
}

size_t GHEncBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.GHEncBatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string g_enc = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(g_enc_.size());
  for (int i = 0, n = g_enc_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      g_enc_.Get(i));
  }

  // repeated string h_enc = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(h_enc_.size());
  for (int i = 0, n = h_enc_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      h_enc_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GHEncBatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fedtree.GHEncBatch)
  GOOGLE_DCHECK_NE(&from, this);
  const GHEncBatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GHEncBatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fedtree.GHEncBatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fedtree.GHEncBatch)
    MergeFrom(*source);
  }
}

void GHEncBatch::MergeFrom(const GHEncBatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fedtree.GHEncBatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  g_enc_.MergeFrom(from.g_enc_);
  h_enc_.MergeFrom(from.h_enc_);
}

void GHEncBatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fedtree.GHEncBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GHEncBatch::CopyFrom(const GHEncBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.GHEncBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GHEncBatch::IsInitialized() const {
  return true;
}

void GHEncBatch::InternalSwap(GHEncBatch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  g_enc_.InternalSwap(&other->g_enc_);
  h_enc_.InternalSwap(&other->h_enc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GHEncBatch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GHPair::_Internal {
 public:
};

GHPair::GHPair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fedtree.GHPair)
}
GHPair::GHPair(const GHPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&g_, &from.g_,
    static_cast<size_t>(reinterpret_cast<char*>(&h_) -
    reinterpret_cast<char*>(&g_)) + sizeof(h_));
  // @@protoc_insertion_point(copy_constructor:fedtree.GHPair)
}

void GHPair::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&g_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&h_) -
      reinterpret_cast<char*>(&g_)) + sizeof(h_));
}

GHPair::~GHPair() {
  // @@protoc_insertion_point(destructor:fedtree.GHPair)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GHPair::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GHPair::ArenaDtor(void* object) {
  GHPair* _this = reinterpret_cast< GHPair* >(object);
  (void)_this;
}
void GHPair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GHPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GHPair& GHPair::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GHPair_fedtree_2eproto.base);
  return *internal_default_instance();
}


void GHPair::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.GHPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&g_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h_) -
      reinterpret_cast<char*>(&g_)) + sizeof(h_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GHPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double g = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double h = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GHPair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.GHPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double g = 1;
  if (!(this->g() <= 0 && this->g() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_g(), target);
  }

  // double h = 2;
  if (!(this->h() <= 0 && this->h() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_h(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.GHPair)
  return target;
}

size_t GHPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.GHPair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double g = 1;
  if (!(this->g() <= 0 && this->g() >= 0)) {
    total_size += 1 + 8;
  }

  // double h = 2;
  if (!(this->h() <= 0 && this->h() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GHPair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fedtree.GHPair)
  GOOGLE_DCHECK_NE(&from, this);
  const GHPair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GHPair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fedtree.GHPair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fedtree.GHPair)
    MergeFrom(*source);
  }
}

void GHPair::MergeFrom(const GHPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fedtree.GHPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.g() <= 0 && from.g() >= 0)) {
    _internal_set_g(from._internal_g());
  }
  if (!(from.h() <= 0 && from.h() >= 0)) {
    _internal_set_h(from._internal_h());
  }
}

void GHPair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fedtree.GHPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GHPair::CopyFrom(const GHPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.GHPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GHPair::IsInitialized() const {
  return true;
}

void GHPair::InternalSwap(GHPair* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GHPair, h_)
      + sizeof(GHPair::h_)
      - PROTOBUF_FIELD_OFFSET(GHPair, g_)>(
          reinterpret_cast<char*>(&g_),
          reinterpret_cast<char*>(&other->g_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GHPair::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GHArray::_Internal {
 public:
};

GHArray::GHArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  g_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fedtree.GHArray)
}
GHArray::GHArray(const GHArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      g_(from.g_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fedtree.GHArray)
}

void GHArray::SharedCtor() {
}

GHArray::~GHArray() {
  // @@protoc_insertion_point(destructor:fedtree.GHArray)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GHArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GHArray::ArenaDtor(void* object) {
  GHArray* _this = reinterpret_cast< GHArray* >(object);
  (void)_this;
}
void GHArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GHArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GHArray& GHArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GHArray_fedtree_2eproto.base);
  return *internal_default_instance();
}


void GHArray::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.GHArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  g_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GHArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double g = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_g(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_g(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GHArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.GHArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double g = 1 [packed = true];
  if (this->_internal_g_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_g(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.GHArray)
  return target;
}

size_t GHArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.GHArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double g = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_g_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _g_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GHArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fedtree.GHArray)
  GOOGLE_DCHECK_NE(&from, this);
  const GHArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GHArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fedtree.GHArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fedtree.GHArray)
    MergeFrom(*source);
  }
}

void GHArray::MergeFrom(const GHArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fedtree.GHArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  g_.MergeFrom(from.g_);
}

void GHArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fedtree.GHArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GHArray::CopyFrom(const GHArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.GHArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GHArray::IsInitialized() const {
  return true;
}

void GHArray::InternalSwap(GHArray* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  g_.InternalSwap(&other->g_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GHArray::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GHPairEnc::_Internal {
 public:
};

GHPairEnc::GHPairEnc(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fedtree.GHPairEnc)
}
GHPairEnc::GHPairEnc(const GHPairEnc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  g_enc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_g_enc().empty()) {
    g_enc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_g_enc(), 
      GetArena());
  }
  h_enc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_h_enc().empty()) {
    h_enc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_h_enc(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fedtree.GHPairEnc)
}

void GHPairEnc::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GHPairEnc_fedtree_2eproto.base);
  g_enc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  h_enc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GHPairEnc::~GHPairEnc() {
  // @@protoc_insertion_point(destructor:fedtree.GHPairEnc)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GHPairEnc::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  g_enc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  h_enc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GHPairEnc::ArenaDtor(void* object) {
  GHPairEnc* _this = reinterpret_cast< GHPairEnc* >(object);
  (void)_this;
}
void GHPairEnc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GHPairEnc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GHPairEnc& GHPairEnc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GHPairEnc_fedtree_2eproto.base);
  return *internal_default_instance();
}


void GHPairEnc::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.GHPairEnc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  g_enc_.ClearToEmpty();
  h_enc_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GHPairEnc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string g_enc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_g_enc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fedtree.GHPairEnc.g_enc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string h_enc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_h_enc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fedtree.GHPairEnc.h_enc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GHPairEnc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.GHPairEnc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string g_enc = 1;
  if (this->g_enc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_g_enc().data(), static_cast<int>(this->_internal_g_enc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fedtree.GHPairEnc.g_enc");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_g_enc(), target);
  }

  // string h_enc = 2;
  if (this->h_enc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_h_enc().data(), static_cast<int>(this->_internal_h_enc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fedtree.GHPairEnc.h_enc");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_h_enc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.GHPairEnc)
  return target;
}

size_t GHPairEnc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.GHPairEnc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string g_enc = 1;
  if (this->g_enc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_g_enc());
  }

  // string h_enc = 2;
  if (this->h_enc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_h_enc());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GHPairEnc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fedtree.GHPairEnc)
  GOOGLE_DCHECK_NE(&from, this);
  const GHPairEnc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GHPairEnc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fedtree.GHPairEnc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fedtree.GHPairEnc)
    MergeFrom(*source);
  }
}

void GHPairEnc::MergeFrom(const GHPairEnc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fedtree.GHPairEnc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.g_enc().size() > 0) {
    _internal_set_g_enc(from._internal_g_enc());
  }
  if (from.h_enc().size() > 0) {
    _internal_set_h_enc(from._internal_h_enc());
  }
}

void GHPairEnc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fedtree.GHPairEnc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GHPairEnc::CopyFrom(const GHPairEnc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.GHPairEnc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GHPairEnc::IsInitialized() const {
  return true;
}

void GHPairEnc::InternalSwap(GHPairEnc* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  g_enc_.Swap(&other->g_enc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  h_enc_.Swap(&other->h_enc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GHPairEnc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Paillier::_Internal {
 public:
};

Paillier::Paillier(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fedtree.Paillier)
}
Paillier::Paillier(const Paillier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  modulus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modulus().empty()) {
    modulus_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_modulus(), 
      GetArena());
  }
  generator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_generator().empty()) {
    generator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_generator(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fedtree.Paillier)
}

void Paillier::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Paillier_fedtree_2eproto.base);
  modulus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  generator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Paillier::~Paillier() {
  // @@protoc_insertion_point(destructor:fedtree.Paillier)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Paillier::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  modulus_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  generator_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Paillier::ArenaDtor(void* object) {
  Paillier* _this = reinterpret_cast< Paillier* >(object);
  (void)_this;
}
void Paillier::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Paillier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Paillier& Paillier::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Paillier_fedtree_2eproto.base);
  return *internal_default_instance();
}


void Paillier::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.Paillier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modulus_.ClearToEmpty();
  generator_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Paillier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string modulus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_modulus();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fedtree.Paillier.modulus"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string generator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_generator();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fedtree.Paillier.generator"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Paillier::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.Paillier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string modulus = 1;
  if (this->modulus().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modulus().data(), static_cast<int>(this->_internal_modulus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fedtree.Paillier.modulus");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_modulus(), target);
  }

  // string generator = 2;
  if (this->generator().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_generator().data(), static_cast<int>(this->_internal_generator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fedtree.Paillier.generator");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_generator(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.Paillier)
  return target;
}

size_t Paillier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.Paillier)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string modulus = 1;
  if (this->modulus().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modulus());
  }

  // string generator = 2;
  if (this->generator().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_generator());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Paillier::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fedtree.Paillier)
  GOOGLE_DCHECK_NE(&from, this);
  const Paillier* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Paillier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fedtree.Paillier)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fedtree.Paillier)
    MergeFrom(*source);
  }
}

void Paillier::MergeFrom(const Paillier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fedtree.Paillier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.modulus().size() > 0) {
    _internal_set_modulus(from._internal_modulus());
  }
  if (from.generator().size() > 0) {
    _internal_set_generator(from._internal_generator());
  }
}

void Paillier::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fedtree.Paillier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Paillier::CopyFrom(const Paillier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.Paillier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Paillier::IsInitialized() const {
  return true;
}

void Paillier::InternalSwap(Paillier* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  modulus_.Swap(&other->modulus_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  generator_.Swap(&other->generator_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Paillier::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SplitPoint::_Internal {
 public:
};

SplitPoint::SplitPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fedtree.SplitPoint)
}
SplitPoint::SplitPoint(const SplitPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gain_, &from.gain_,
    static_cast<size_t>(reinterpret_cast<char*>(&split_bid_) -
    reinterpret_cast<char*>(&gain_)) + sizeof(split_bid_));
  // @@protoc_insertion_point(copy_constructor:fedtree.SplitPoint)
}

void SplitPoint::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gain_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&split_bid_) -
      reinterpret_cast<char*>(&gain_)) + sizeof(split_bid_));
}

SplitPoint::~SplitPoint() {
  // @@protoc_insertion_point(destructor:fedtree.SplitPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SplitPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SplitPoint::ArenaDtor(void* object) {
  SplitPoint* _this = reinterpret_cast< SplitPoint* >(object);
  (void)_this;
}
void SplitPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SplitPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SplitPoint& SplitPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SplitPoint_fedtree_2eproto.base);
  return *internal_default_instance();
}


void SplitPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.SplitPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&split_bid_) -
      reinterpret_cast<char*>(&gain_)) + sizeof(split_bid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SplitPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float gain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fea_missing_g = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          fea_missing_g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fea_missing_h = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          fea_missing_h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rch_sum_g = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          rch_sum_g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rch_sum_h = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          rch_sum_h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool default_right = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          default_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 split_fea_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          split_fea_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float fval = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          fval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 split_bid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          split_bid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool no_split_value_update = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          no_split_value_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SplitPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.SplitPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float gain = 1;
  if (!(this->gain() <= 0 && this->gain() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_gain(), target);
  }

  // float fea_missing_g = 2;
  if (!(this->fea_missing_g() <= 0 && this->fea_missing_g() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_fea_missing_g(), target);
  }

  // float fea_missing_h = 3;
  if (!(this->fea_missing_h() <= 0 && this->fea_missing_h() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_fea_missing_h(), target);
  }

  // float rch_sum_g = 4;
  if (!(this->rch_sum_g() <= 0 && this->rch_sum_g() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_rch_sum_g(), target);
  }

  // float rch_sum_h = 5;
  if (!(this->rch_sum_h() <= 0 && this->rch_sum_h() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_rch_sum_h(), target);
  }

  // bool default_right = 6;
  if (this->default_right() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_default_right(), target);
  }

  // int32 nid = 7;
  if (this->nid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_nid(), target);
  }

  // int32 split_fea_id = 8;
  if (this->split_fea_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_split_fea_id(), target);
  }

  // float fval = 9;
  if (!(this->fval() <= 0 && this->fval() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_fval(), target);
  }

  // int32 split_bid = 10;
  if (this->split_bid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_split_bid(), target);
  }

  // bool no_split_value_update = 11;
  if (this->no_split_value_update() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_no_split_value_update(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.SplitPoint)
  return target;
}

size_t SplitPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.SplitPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float gain = 1;
  if (!(this->gain() <= 0 && this->gain() >= 0)) {
    total_size += 1 + 4;
  }

  // float fea_missing_g = 2;
  if (!(this->fea_missing_g() <= 0 && this->fea_missing_g() >= 0)) {
    total_size += 1 + 4;
  }

  // float fea_missing_h = 3;
  if (!(this->fea_missing_h() <= 0 && this->fea_missing_h() >= 0)) {
    total_size += 1 + 4;
  }

  // float rch_sum_g = 4;
  if (!(this->rch_sum_g() <= 0 && this->rch_sum_g() >= 0)) {
    total_size += 1 + 4;
  }

  // float rch_sum_h = 5;
  if (!(this->rch_sum_h() <= 0 && this->rch_sum_h() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 nid = 7;
  if (this->nid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nid());
  }

  // int32 split_fea_id = 8;
  if (this->split_fea_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_split_fea_id());
  }

  // bool default_right = 6;
  if (this->default_right() != 0) {
    total_size += 1 + 1;
  }

  // bool no_split_value_update = 11;
  if (this->no_split_value_update() != 0) {
    total_size += 1 + 1;
  }

  // float fval = 9;
  if (!(this->fval() <= 0 && this->fval() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 split_bid = 10;
  if (this->split_bid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_split_bid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SplitPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fedtree.SplitPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const SplitPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SplitPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fedtree.SplitPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fedtree.SplitPoint)
    MergeFrom(*source);
  }
}

void SplitPoint::MergeFrom(const SplitPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fedtree.SplitPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.gain() <= 0 && from.gain() >= 0)) {
    _internal_set_gain(from._internal_gain());
  }
  if (!(from.fea_missing_g() <= 0 && from.fea_missing_g() >= 0)) {
    _internal_set_fea_missing_g(from._internal_fea_missing_g());
  }
  if (!(from.fea_missing_h() <= 0 && from.fea_missing_h() >= 0)) {
    _internal_set_fea_missing_h(from._internal_fea_missing_h());
  }
  if (!(from.rch_sum_g() <= 0 && from.rch_sum_g() >= 0)) {
    _internal_set_rch_sum_g(from._internal_rch_sum_g());
  }
  if (!(from.rch_sum_h() <= 0 && from.rch_sum_h() >= 0)) {
    _internal_set_rch_sum_h(from._internal_rch_sum_h());
  }
  if (from.nid() != 0) {
    _internal_set_nid(from._internal_nid());
  }
  if (from.split_fea_id() != 0) {
    _internal_set_split_fea_id(from._internal_split_fea_id());
  }
  if (from.default_right() != 0) {
    _internal_set_default_right(from._internal_default_right());
  }
  if (from.no_split_value_update() != 0) {
    _internal_set_no_split_value_update(from._internal_no_split_value_update());
  }
  if (!(from.fval() <= 0 && from.fval() >= 0)) {
    _internal_set_fval(from._internal_fval());
  }
  if (from.split_bid() != 0) {
    _internal_set_split_bid(from._internal_split_bid());
  }
}

void SplitPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fedtree.SplitPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitPoint::CopyFrom(const SplitPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.SplitPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitPoint::IsInitialized() const {
  return true;
}

void SplitPoint::InternalSwap(SplitPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SplitPoint, split_bid_)
      + sizeof(SplitPoint::split_bid_)
      - PROTOBUF_FIELD_OFFSET(SplitPoint, gain_)>(
          reinterpret_cast<char*>(&gain_),
          reinterpret_cast<char*>(&other->gain_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SplitPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Score::_Internal {
 public:
};

Score::Score(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fedtree.Score)
}
Score::Score(const Score& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_ = from.content_;
  // @@protoc_insertion_point(copy_constructor:fedtree.Score)
}

void Score::SharedCtor() {
  content_ = 0;
}

Score::~Score() {
  // @@protoc_insertion_point(destructor:fedtree.Score)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Score::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Score::ArenaDtor(void* object) {
  Score* _this = reinterpret_cast< Score* >(object);
  (void)_this;
}
void Score::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Score::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Score& Score::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Score_fedtree_2eproto.base);
  return *internal_default_instance();
}


void Score::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.Score)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Score::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          content_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Score::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.Score)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float content = 1;
  if (!(this->content() <= 0 && this->content() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.Score)
  return target;
}

size_t Score::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.Score)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float content = 1;
  if (!(this->content() <= 0 && this->content() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Score::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fedtree.Score)
  GOOGLE_DCHECK_NE(&from, this);
  const Score* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Score>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fedtree.Score)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fedtree.Score)
    MergeFrom(*source);
  }
}

void Score::MergeFrom(const Score& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fedtree.Score)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.content() <= 0 && from.content() >= 0)) {
    _internal_set_content(from._internal_content());
  }
}

void Score::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fedtree.Score)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Score::CopyFrom(const Score& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.Score)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Score::IsInitialized() const {
  return true;
}

void Score::InternalSwap(Score* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(content_, other->content_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Score::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PID::_Internal {
 public:
};

PID::PID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fedtree.PID)
}
PID::PID(const PID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:fedtree.PID)
}

void PID::SharedCtor() {
  id_ = 0;
}

PID::~PID() {
  // @@protoc_insertion_point(destructor:fedtree.PID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PID::ArenaDtor(void* object) {
  PID* _this = reinterpret_cast< PID* >(object);
  (void)_this;
}
void PID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PID& PID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PID_fedtree_2eproto.base);
  return *internal_default_instance();
}


void PID::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.PID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.PID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.PID)
  return target;
}

size_t PID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.PID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fedtree.PID)
  GOOGLE_DCHECK_NE(&from, this);
  const PID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fedtree.PID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fedtree.PID)
    MergeFrom(*source);
  }
}

void PID::MergeFrom(const PID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fedtree.PID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void PID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fedtree.PID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PID::CopyFrom(const PID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.PID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PID::IsInitialized() const {
  return true;
}

void PID::InternalSwap(PID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Ready::_Internal {
 public:
};

Ready::Ready(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fedtree.Ready)
}
Ready::Ready(const Ready& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ready_ = from.ready_;
  // @@protoc_insertion_point(copy_constructor:fedtree.Ready)
}

void Ready::SharedCtor() {
  ready_ = false;
}

Ready::~Ready() {
  // @@protoc_insertion_point(destructor:fedtree.Ready)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Ready::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Ready::ArenaDtor(void* object) {
  Ready* _this = reinterpret_cast< Ready* >(object);
  (void)_this;
}
void Ready::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ready::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ready& Ready::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ready_fedtree_2eproto.base);
  return *internal_default_instance();
}


void Ready::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.Ready)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ready_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ready::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool ready = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ready::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.Ready)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ready = 1;
  if (this->ready() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ready(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.Ready)
  return target;
}

size_t Ready::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.Ready)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ready = 1;
  if (this->ready() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ready::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fedtree.Ready)
  GOOGLE_DCHECK_NE(&from, this);
  const Ready* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ready>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fedtree.Ready)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fedtree.Ready)
    MergeFrom(*source);
  }
}

void Ready::MergeFrom(const Ready& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fedtree.Ready)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ready() != 0) {
    _internal_set_ready(from._internal_ready());
  }
}

void Ready::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fedtree.Ready)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ready::CopyFrom(const Ready& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.Ready)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ready::IsInitialized() const {
  return true;
}

void Ready::InternalSwap(Ready* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(ready_, other->ready_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ready::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DatasetInfo::_Internal {
 public:
};

DatasetInfo::DatasetInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fedtree.DatasetInfo)
}
DatasetInfo::DatasetInfo(const DatasetInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&n_bins_, &from.n_bins_,
    static_cast<size_t>(reinterpret_cast<char*>(&n_columns_) -
    reinterpret_cast<char*>(&n_bins_)) + sizeof(n_columns_));
  // @@protoc_insertion_point(copy_constructor:fedtree.DatasetInfo)
}

void DatasetInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&n_bins_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&n_columns_) -
      reinterpret_cast<char*>(&n_bins_)) + sizeof(n_columns_));
}

DatasetInfo::~DatasetInfo() {
  // @@protoc_insertion_point(destructor:fedtree.DatasetInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DatasetInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DatasetInfo::ArenaDtor(void* object) {
  DatasetInfo* _this = reinterpret_cast< DatasetInfo* >(object);
  (void)_this;
}
void DatasetInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DatasetInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DatasetInfo& DatasetInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DatasetInfo_fedtree_2eproto.base);
  return *internal_default_instance();
}


void DatasetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.DatasetInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&n_bins_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&n_columns_) -
      reinterpret_cast<char*>(&n_bins_)) + sizeof(n_columns_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DatasetInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 n_bins = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          n_bins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 n_columns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          n_columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DatasetInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.DatasetInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 n_bins = 1;
  if (this->n_bins() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_n_bins(), target);
  }

  // int32 n_columns = 2;
  if (this->n_columns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_n_columns(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.DatasetInfo)
  return target;
}

size_t DatasetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.DatasetInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 n_bins = 1;
  if (this->n_bins() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_n_bins());
  }

  // int32 n_columns = 2;
  if (this->n_columns() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_n_columns());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DatasetInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fedtree.DatasetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DatasetInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DatasetInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fedtree.DatasetInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fedtree.DatasetInfo)
    MergeFrom(*source);
  }
}

void DatasetInfo::MergeFrom(const DatasetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fedtree.DatasetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.n_bins() != 0) {
    _internal_set_n_bins(from._internal_n_bins());
  }
  if (from.n_columns() != 0) {
    _internal_set_n_columns(from._internal_n_columns());
  }
}

void DatasetInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fedtree.DatasetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatasetInfo::CopyFrom(const DatasetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.DatasetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetInfo::IsInitialized() const {
  return true;
}

void DatasetInfo::InternalSwap(DatasetInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DatasetInfo, n_columns_)
      + sizeof(DatasetInfo::n_columns_)
      - PROTOBUF_FIELD_OFFSET(DatasetInfo, n_bins_)>(
          reinterpret_cast<char*>(&n_bins_),
          reinterpret_cast<char*>(&other->n_bins_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DatasetInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FID::_Internal {
 public:
};

FID::FID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fedtree.FID)
}
FID::FID(const FID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:fedtree.FID)
}

void FID::SharedCtor() {
  id_ = 0;
}

FID::~FID() {
  // @@protoc_insertion_point(destructor:fedtree.FID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FID::ArenaDtor(void* object) {
  FID* _this = reinterpret_cast< FID* >(object);
  (void)_this;
}
void FID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FID& FID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FID_fedtree_2eproto.base);
  return *internal_default_instance();
}


void FID::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.FID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.FID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.FID)
  return target;
}

size_t FID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.FID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fedtree.FID)
  GOOGLE_DCHECK_NE(&from, this);
  const FID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fedtree.FID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fedtree.FID)
    MergeFrom(*source);
  }
}

void FID::MergeFrom(const FID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fedtree.FID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void FID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fedtree.FID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FID::CopyFrom(const FID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.FID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FID::IsInitialized() const {
  return true;
}

void FID::InternalSwap(FID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BestInfo::_Internal {
 public:
};

BestInfo::BestInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fedtree.BestInfo)
}
BestInfo::BestInfo(const BestInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gain_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(gain_));
  // @@protoc_insertion_point(copy_constructor:fedtree.BestInfo)
}

void BestInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&gain_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(gain_));
}

BestInfo::~BestInfo() {
  // @@protoc_insertion_point(destructor:fedtree.BestInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BestInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BestInfo::ArenaDtor(void* object) {
  BestInfo* _this = reinterpret_cast< BestInfo* >(object);
  (void)_this;
}
void BestInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BestInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BestInfo& BestInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BestInfo_fedtree_2eproto.base);
  return *internal_default_instance();
}


void BestInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.BestInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gain_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(gain_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BestInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 global_fid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          global_fid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double gain = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BestInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.BestInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pid = 1;
  if (this->pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_pid(), target);
  }

  // int32 nid = 2;
  if (this->nid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_nid(), target);
  }

  // int32 idx = 3;
  if (this->idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_idx(), target);
  }

  // int32 global_fid = 4;
  if (this->global_fid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_global_fid(), target);
  }

  // double gain = 5;
  if (!(this->gain() <= 0 && this->gain() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_gain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.BestInfo)
  return target;
}

size_t BestInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.BestInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 pid = 1;
  if (this->pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pid());
  }

  // int32 nid = 2;
  if (this->nid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nid());
  }

  // int32 idx = 3;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_idx());
  }

  // int32 global_fid = 4;
  if (this->global_fid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_global_fid());
  }

  // double gain = 5;
  if (!(this->gain() <= 0 && this->gain() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BestInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fedtree.BestInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BestInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BestInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fedtree.BestInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fedtree.BestInfo)
    MergeFrom(*source);
  }
}

void BestInfo::MergeFrom(const BestInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fedtree.BestInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from.nid() != 0) {
    _internal_set_nid(from._internal_nid());
  }
  if (from.idx() != 0) {
    _internal_set_idx(from._internal_idx());
  }
  if (from.global_fid() != 0) {
    _internal_set_global_fid(from._internal_global_fid());
  }
  if (!(from.gain() <= 0 && from.gain() >= 0)) {
    _internal_set_gain(from._internal_gain());
  }
}

void BestInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fedtree.BestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BestInfo::CopyFrom(const BestInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.BestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BestInfo::IsInitialized() const {
  return true;
}

void BestInfo::InternalSwap(BestInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BestInfo, gain_)
      + sizeof(BestInfo::gain_)
      - PROTOBUF_FIELD_OFFSET(BestInfo, pid_)>(
          reinterpret_cast<char*>(&pid_),
          reinterpret_cast<char*>(&other->pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BestInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodeEnc::_Internal {
 public:
};

NodeEnc::NodeEnc(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fedtree.NodeEnc)
}
NodeEnc::NodeEnc(const NodeEnc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sum_gh_pair_g_enc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sum_gh_pair_g_enc().empty()) {
    sum_gh_pair_g_enc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sum_gh_pair_g_enc(), 
      GetArena());
  }
  sum_gh_pair_h_enc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sum_gh_pair_h_enc().empty()) {
    sum_gh_pair_h_enc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sum_gh_pair_h_enc(), 
      GetArena());
  }
  ::memcpy(&final_id_, &from.final_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&n_instances_) -
    reinterpret_cast<char*>(&final_id_)) + sizeof(n_instances_));
  // @@protoc_insertion_point(copy_constructor:fedtree.NodeEnc)
}

void NodeEnc::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeEnc_fedtree_2eproto.base);
  sum_gh_pair_g_enc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sum_gh_pair_h_enc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&final_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&n_instances_) -
      reinterpret_cast<char*>(&final_id_)) + sizeof(n_instances_));
}

NodeEnc::~NodeEnc() {
  // @@protoc_insertion_point(destructor:fedtree.NodeEnc)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeEnc::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sum_gh_pair_g_enc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sum_gh_pair_h_enc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeEnc::ArenaDtor(void* object) {
  NodeEnc* _this = reinterpret_cast< NodeEnc* >(object);
  (void)_this;
}
void NodeEnc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeEnc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeEnc& NodeEnc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeEnc_fedtree_2eproto.base);
  return *internal_default_instance();
}


void NodeEnc::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.NodeEnc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sum_gh_pair_g_enc_.ClearToEmpty();
  sum_gh_pair_h_enc_.ClearToEmpty();
  ::memset(&final_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&n_instances_) -
      reinterpret_cast<char*>(&final_id_)) + sizeof(n_instances_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeEnc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 final_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          final_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lch_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          lch_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rch_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rch_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 parent_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          parent_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float gain = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float base_weight = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          base_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 split_feature_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          split_feature_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float split_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          split_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 split_bid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          split_bid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool default_right = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          default_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_leaf = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          is_leaf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_valid = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_pruned = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          is_pruned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sum_gh_pair_g_enc = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_sum_gh_pair_g_enc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fedtree.NodeEnc.sum_gh_pair_g_enc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sum_gh_pair_h_enc = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_sum_gh_pair_h_enc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fedtree.NodeEnc.sum_gh_pair_h_enc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 n_instances = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          n_instances_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeEnc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.NodeEnc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 final_id = 1;
  if (this->final_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_final_id(), target);
  }

  // int32 lch_index = 2;
  if (this->lch_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_lch_index(), target);
  }

  // int32 rch_index = 3;
  if (this->rch_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_rch_index(), target);
  }

  // int32 parent_index = 4;
  if (this->parent_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_parent_index(), target);
  }

  // float gain = 5;
  if (!(this->gain() <= 0 && this->gain() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_gain(), target);
  }

  // float base_weight = 6;
  if (!(this->base_weight() <= 0 && this->base_weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_base_weight(), target);
  }

  // int32 split_feature_id = 7;
  if (this->split_feature_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_split_feature_id(), target);
  }

  // int32 pid = 8;
  if (this->pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_pid(), target);
  }

  // float split_value = 9;
  if (!(this->split_value() <= 0 && this->split_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_split_value(), target);
  }

  // int32 split_bid = 10;
  if (this->split_bid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_split_bid(), target);
  }

  // bool default_right = 11;
  if (this->default_right() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_default_right(), target);
  }

  // bool is_leaf = 12;
  if (this->is_leaf() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_is_leaf(), target);
  }

  // bool is_valid = 13;
  if (this->is_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_is_valid(), target);
  }

  // bool is_pruned = 14;
  if (this->is_pruned() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_is_pruned(), target);
  }

  // string sum_gh_pair_g_enc = 15;
  if (this->sum_gh_pair_g_enc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sum_gh_pair_g_enc().data(), static_cast<int>(this->_internal_sum_gh_pair_g_enc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fedtree.NodeEnc.sum_gh_pair_g_enc");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_sum_gh_pair_g_enc(), target);
  }

  // string sum_gh_pair_h_enc = 16;
  if (this->sum_gh_pair_h_enc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sum_gh_pair_h_enc().data(), static_cast<int>(this->_internal_sum_gh_pair_h_enc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fedtree.NodeEnc.sum_gh_pair_h_enc");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_sum_gh_pair_h_enc(), target);
  }

  // int32 n_instances = 17;
  if (this->n_instances() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_n_instances(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.NodeEnc)
  return target;
}

size_t NodeEnc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.NodeEnc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sum_gh_pair_g_enc = 15;
  if (this->sum_gh_pair_g_enc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sum_gh_pair_g_enc());
  }

  // string sum_gh_pair_h_enc = 16;
  if (this->sum_gh_pair_h_enc().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sum_gh_pair_h_enc());
  }

  // int32 final_id = 1;
  if (this->final_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_final_id());
  }

  // int32 lch_index = 2;
  if (this->lch_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lch_index());
  }

  // int32 rch_index = 3;
  if (this->rch_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rch_index());
  }

  // int32 parent_index = 4;
  if (this->parent_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_parent_index());
  }

  // float gain = 5;
  if (!(this->gain() <= 0 && this->gain() >= 0)) {
    total_size += 1 + 4;
  }

  // float base_weight = 6;
  if (!(this->base_weight() <= 0 && this->base_weight() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 split_feature_id = 7;
  if (this->split_feature_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_split_feature_id());
  }

  // int32 pid = 8;
  if (this->pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pid());
  }

  // float split_value = 9;
  if (!(this->split_value() <= 0 && this->split_value() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 split_bid = 10;
  if (this->split_bid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_split_bid());
  }

  // bool default_right = 11;
  if (this->default_right() != 0) {
    total_size += 1 + 1;
  }

  // bool is_leaf = 12;
  if (this->is_leaf() != 0) {
    total_size += 1 + 1;
  }

  // bool is_valid = 13;
  if (this->is_valid() != 0) {
    total_size += 1 + 1;
  }

  // bool is_pruned = 14;
  if (this->is_pruned() != 0) {
    total_size += 1 + 1;
  }

  // int32 n_instances = 17;
  if (this->n_instances() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_n_instances());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeEnc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fedtree.NodeEnc)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeEnc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeEnc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fedtree.NodeEnc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fedtree.NodeEnc)
    MergeFrom(*source);
  }
}

void NodeEnc::MergeFrom(const NodeEnc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fedtree.NodeEnc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sum_gh_pair_g_enc().size() > 0) {
    _internal_set_sum_gh_pair_g_enc(from._internal_sum_gh_pair_g_enc());
  }
  if (from.sum_gh_pair_h_enc().size() > 0) {
    _internal_set_sum_gh_pair_h_enc(from._internal_sum_gh_pair_h_enc());
  }
  if (from.final_id() != 0) {
    _internal_set_final_id(from._internal_final_id());
  }
  if (from.lch_index() != 0) {
    _internal_set_lch_index(from._internal_lch_index());
  }
  if (from.rch_index() != 0) {
    _internal_set_rch_index(from._internal_rch_index());
  }
  if (from.parent_index() != 0) {
    _internal_set_parent_index(from._internal_parent_index());
  }
  if (!(from.gain() <= 0 && from.gain() >= 0)) {
    _internal_set_gain(from._internal_gain());
  }
  if (!(from.base_weight() <= 0 && from.base_weight() >= 0)) {
    _internal_set_base_weight(from._internal_base_weight());
  }
  if (from.split_feature_id() != 0) {
    _internal_set_split_feature_id(from._internal_split_feature_id());
  }
  if (from.pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (!(from.split_value() <= 0 && from.split_value() >= 0)) {
    _internal_set_split_value(from._internal_split_value());
  }
  if (from.split_bid() != 0) {
    _internal_set_split_bid(from._internal_split_bid());
  }
  if (from.default_right() != 0) {
    _internal_set_default_right(from._internal_default_right());
  }
  if (from.is_leaf() != 0) {
    _internal_set_is_leaf(from._internal_is_leaf());
  }
  if (from.is_valid() != 0) {
    _internal_set_is_valid(from._internal_is_valid());
  }
  if (from.is_pruned() != 0) {
    _internal_set_is_pruned(from._internal_is_pruned());
  }
  if (from.n_instances() != 0) {
    _internal_set_n_instances(from._internal_n_instances());
  }
}

void NodeEnc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fedtree.NodeEnc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeEnc::CopyFrom(const NodeEnc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.NodeEnc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeEnc::IsInitialized() const {
  return true;
}

void NodeEnc::InternalSwap(NodeEnc* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sum_gh_pair_g_enc_.Swap(&other->sum_gh_pair_g_enc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sum_gh_pair_h_enc_.Swap(&other->sum_gh_pair_h_enc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeEnc, n_instances_)
      + sizeof(NodeEnc::n_instances_)
      - PROTOBUF_FIELD_OFFSET(NodeEnc, final_id_)>(
          reinterpret_cast<char*>(&final_id_),
          reinterpret_cast<char*>(&other->final_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeEnc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Node::_Internal {
 public:
};

Node::Node(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fedtree.Node)
}
Node::Node(const Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&final_id_, &from.final_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&n_instances_) -
    reinterpret_cast<char*>(&final_id_)) + sizeof(n_instances_));
  // @@protoc_insertion_point(copy_constructor:fedtree.Node)
}

void Node::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&final_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&n_instances_) -
      reinterpret_cast<char*>(&final_id_)) + sizeof(n_instances_));
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:fedtree.Node)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Node::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Node::ArenaDtor(void* object) {
  Node* _this = reinterpret_cast< Node* >(object);
  (void)_this;
}
void Node::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Node& Node::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Node_fedtree_2eproto.base);
  return *internal_default_instance();
}


void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&final_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&n_instances_) -
      reinterpret_cast<char*>(&final_id_)) + sizeof(n_instances_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 final_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          final_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lch_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          lch_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rch_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rch_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 parent_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          parent_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float gain = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float base_weight = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          base_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 split_feature_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          split_feature_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float split_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          split_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 split_bid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          split_bid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool default_right = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          default_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_leaf = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          is_leaf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_valid = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_pruned = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          is_pruned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float sum_gh_pair_g = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          sum_gh_pair_g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float sum_gh_pair_h = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          sum_gh_pair_h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 n_instances = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          n_instances_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Node::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 final_id = 1;
  if (this->final_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_final_id(), target);
  }

  // int32 lch_index = 2;
  if (this->lch_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_lch_index(), target);
  }

  // int32 rch_index = 3;
  if (this->rch_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_rch_index(), target);
  }

  // int32 parent_index = 4;
  if (this->parent_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_parent_index(), target);
  }

  // float gain = 5;
  if (!(this->gain() <= 0 && this->gain() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_gain(), target);
  }

  // float base_weight = 6;
  if (!(this->base_weight() <= 0 && this->base_weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_base_weight(), target);
  }

  // int32 split_feature_id = 7;
  if (this->split_feature_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_split_feature_id(), target);
  }

  // int32 pid = 8;
  if (this->pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_pid(), target);
  }

  // float split_value = 9;
  if (!(this->split_value() <= 0 && this->split_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_split_value(), target);
  }

  // int32 split_bid = 10;
  if (this->split_bid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_split_bid(), target);
  }

  // bool default_right = 11;
  if (this->default_right() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_default_right(), target);
  }

  // bool is_leaf = 12;
  if (this->is_leaf() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_is_leaf(), target);
  }

  // bool is_valid = 13;
  if (this->is_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_is_valid(), target);
  }

  // bool is_pruned = 14;
  if (this->is_pruned() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_is_pruned(), target);
  }

  // float sum_gh_pair_g = 15;
  if (!(this->sum_gh_pair_g() <= 0 && this->sum_gh_pair_g() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_sum_gh_pair_g(), target);
  }

  // float sum_gh_pair_h = 16;
  if (!(this->sum_gh_pair_h() <= 0 && this->sum_gh_pair_h() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_sum_gh_pair_h(), target);
  }

  // int32 n_instances = 17;
  if (this->n_instances() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_n_instances(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.Node)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 final_id = 1;
  if (this->final_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_final_id());
  }

  // int32 lch_index = 2;
  if (this->lch_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lch_index());
  }

  // int32 rch_index = 3;
  if (this->rch_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rch_index());
  }

  // int32 parent_index = 4;
  if (this->parent_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_parent_index());
  }

  // float gain = 5;
  if (!(this->gain() <= 0 && this->gain() >= 0)) {
    total_size += 1 + 4;
  }

  // float base_weight = 6;
  if (!(this->base_weight() <= 0 && this->base_weight() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 split_feature_id = 7;
  if (this->split_feature_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_split_feature_id());
  }

  // int32 pid = 8;
  if (this->pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pid());
  }

  // float split_value = 9;
  if (!(this->split_value() <= 0 && this->split_value() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 split_bid = 10;
  if (this->split_bid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_split_bid());
  }

  // bool default_right = 11;
  if (this->default_right() != 0) {
    total_size += 1 + 1;
  }

  // bool is_leaf = 12;
  if (this->is_leaf() != 0) {
    total_size += 1 + 1;
  }

  // bool is_valid = 13;
  if (this->is_valid() != 0) {
    total_size += 1 + 1;
  }

  // bool is_pruned = 14;
  if (this->is_pruned() != 0) {
    total_size += 1 + 1;
  }

  // float sum_gh_pair_g = 15;
  if (!(this->sum_gh_pair_g() <= 0 && this->sum_gh_pair_g() >= 0)) {
    total_size += 1 + 4;
  }

  // float sum_gh_pair_h = 16;
  if (!(this->sum_gh_pair_h() <= 0 && this->sum_gh_pair_h() >= 0)) {
    total_size += 2 + 4;
  }

  // int32 n_instances = 17;
  if (this->n_instances() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_n_instances());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Node::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fedtree.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Node>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fedtree.Node)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fedtree.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fedtree.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.final_id() != 0) {
    _internal_set_final_id(from._internal_final_id());
  }
  if (from.lch_index() != 0) {
    _internal_set_lch_index(from._internal_lch_index());
  }
  if (from.rch_index() != 0) {
    _internal_set_rch_index(from._internal_rch_index());
  }
  if (from.parent_index() != 0) {
    _internal_set_parent_index(from._internal_parent_index());
  }
  if (!(from.gain() <= 0 && from.gain() >= 0)) {
    _internal_set_gain(from._internal_gain());
  }
  if (!(from.base_weight() <= 0 && from.base_weight() >= 0)) {
    _internal_set_base_weight(from._internal_base_weight());
  }
  if (from.split_feature_id() != 0) {
    _internal_set_split_feature_id(from._internal_split_feature_id());
  }
  if (from.pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (!(from.split_value() <= 0 && from.split_value() >= 0)) {
    _internal_set_split_value(from._internal_split_value());
  }
  if (from.split_bid() != 0) {
    _internal_set_split_bid(from._internal_split_bid());
  }
  if (from.default_right() != 0) {
    _internal_set_default_right(from._internal_default_right());
  }
  if (from.is_leaf() != 0) {
    _internal_set_is_leaf(from._internal_is_leaf());
  }
  if (from.is_valid() != 0) {
    _internal_set_is_valid(from._internal_is_valid());
  }
  if (from.is_pruned() != 0) {
    _internal_set_is_pruned(from._internal_is_pruned());
  }
  if (!(from.sum_gh_pair_g() <= 0 && from.sum_gh_pair_g() >= 0)) {
    _internal_set_sum_gh_pair_g(from._internal_sum_gh_pair_g());
  }
  if (!(from.sum_gh_pair_h() <= 0 && from.sum_gh_pair_h() >= 0)) {
    _internal_set_sum_gh_pair_h(from._internal_sum_gh_pair_h());
  }
  if (from.n_instances() != 0) {
    _internal_set_n_instances(from._internal_n_instances());
  }
}

void Node::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fedtree.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::InternalSwap(Node* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Node, n_instances_)
      + sizeof(Node::n_instances_)
      - PROTOBUF_FIELD_OFFSET(Node, final_id_)>(
          reinterpret_cast<char*>(&final_id_),
          reinterpret_cast<char*>(&other->final_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodeEncArray::_Internal {
 public:
};

NodeEncArray::NodeEncArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  final_id_(arena),
  lch_index_(arena),
  rch_index_(arena),
  parent_index_(arena),
  gain_(arena),
  base_weight_(arena),
  split_feature_id_(arena),
  pid_(arena),
  split_value_(arena),
  split_bid_(arena),
  default_right_(arena),
  is_leaf_(arena),
  is_valid_(arena),
  is_pruned_(arena),
  sum_gh_pair_g_enc_(arena),
  sum_gh_pair_h_enc_(arena),
  n_instances_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fedtree.NodeEncArray)
}
NodeEncArray::NodeEncArray(const NodeEncArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      final_id_(from.final_id_),
      lch_index_(from.lch_index_),
      rch_index_(from.rch_index_),
      parent_index_(from.parent_index_),
      gain_(from.gain_),
      base_weight_(from.base_weight_),
      split_feature_id_(from.split_feature_id_),
      pid_(from.pid_),
      split_value_(from.split_value_),
      split_bid_(from.split_bid_),
      default_right_(from.default_right_),
      is_leaf_(from.is_leaf_),
      is_valid_(from.is_valid_),
      is_pruned_(from.is_pruned_),
      sum_gh_pair_g_enc_(from.sum_gh_pair_g_enc_),
      sum_gh_pair_h_enc_(from.sum_gh_pair_h_enc_),
      n_instances_(from.n_instances_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fedtree.NodeEncArray)
}

void NodeEncArray::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeEncArray_fedtree_2eproto.base);
}

NodeEncArray::~NodeEncArray() {
  // @@protoc_insertion_point(destructor:fedtree.NodeEncArray)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeEncArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NodeEncArray::ArenaDtor(void* object) {
  NodeEncArray* _this = reinterpret_cast< NodeEncArray* >(object);
  (void)_this;
}
void NodeEncArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeEncArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeEncArray& NodeEncArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeEncArray_fedtree_2eproto.base);
  return *internal_default_instance();
}


void NodeEncArray::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.NodeEncArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  final_id_.Clear();
  lch_index_.Clear();
  rch_index_.Clear();
  parent_index_.Clear();
  gain_.Clear();
  base_weight_.Clear();
  split_feature_id_.Clear();
  pid_.Clear();
  split_value_.Clear();
  split_bid_.Clear();
  default_right_.Clear();
  is_leaf_.Clear();
  is_valid_.Clear();
  is_pruned_.Clear();
  sum_gh_pair_g_enc_.Clear();
  sum_gh_pair_h_enc_.Clear();
  n_instances_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeEncArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 final_id = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_final_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_final_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 lch_index = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_lch_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_lch_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 rch_index = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_rch_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_rch_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 parent_index = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_parent_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_parent_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float gain = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_gain(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          _internal_add_gain(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float base_weight = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_base_weight(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53) {
          _internal_add_base_weight(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated int32 split_feature_id = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_split_feature_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_split_feature_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 pid = 8 [packed = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_pid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_pid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float split_value = 9 [packed = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_split_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77) {
          _internal_add_split_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated int32 split_bid = 10 [packed = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_split_bid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          _internal_add_split_bid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool default_right = 11 [packed = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_default_right(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88) {
          _internal_add_default_right(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool is_leaf = 12 [packed = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_is_leaf(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96) {
          _internal_add_is_leaf(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool is_valid = 13 [packed = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_is_valid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104) {
          _internal_add_is_valid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool is_pruned = 14 [packed = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_is_pruned(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112) {
          _internal_add_is_pruned(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string sum_gh_pair_g_enc = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_sum_gh_pair_g_enc();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fedtree.NodeEncArray.sum_gh_pair_g_enc"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string sum_gh_pair_h_enc = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_sum_gh_pair_h_enc();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fedtree.NodeEncArray.sum_gh_pair_h_enc"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 n_instances = 17 [packed = true];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_n_instances(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136) {
          _internal_add_n_instances(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeEncArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.NodeEncArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 final_id = 1 [packed = true];
  {
    int byte_size = _final_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_final_id(), byte_size, target);
    }
  }

  // repeated int32 lch_index = 2 [packed = true];
  {
    int byte_size = _lch_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_lch_index(), byte_size, target);
    }
  }

  // repeated int32 rch_index = 3 [packed = true];
  {
    int byte_size = _rch_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_rch_index(), byte_size, target);
    }
  }

  // repeated int32 parent_index = 4 [packed = true];
  {
    int byte_size = _parent_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_parent_index(), byte_size, target);
    }
  }

  // repeated float gain = 5 [packed = true];
  if (this->_internal_gain_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_gain(), target);
  }

  // repeated float base_weight = 6 [packed = true];
  if (this->_internal_base_weight_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_base_weight(), target);
  }

  // repeated int32 split_feature_id = 7 [packed = true];
  {
    int byte_size = _split_feature_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_split_feature_id(), byte_size, target);
    }
  }

  // repeated int32 pid = 8 [packed = true];
  {
    int byte_size = _pid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_pid(), byte_size, target);
    }
  }

  // repeated float split_value = 9 [packed = true];
  if (this->_internal_split_value_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_split_value(), target);
  }

  // repeated int32 split_bid = 10 [packed = true];
  {
    int byte_size = _split_bid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          10, _internal_split_bid(), byte_size, target);
    }
  }

  // repeated bool default_right = 11 [packed = true];
  if (this->_internal_default_right_size() > 0) {
    target = stream->WriteFixedPacked(11, _internal_default_right(), target);
  }

  // repeated bool is_leaf = 12 [packed = true];
  if (this->_internal_is_leaf_size() > 0) {
    target = stream->WriteFixedPacked(12, _internal_is_leaf(), target);
  }

  // repeated bool is_valid = 13 [packed = true];
  if (this->_internal_is_valid_size() > 0) {
    target = stream->WriteFixedPacked(13, _internal_is_valid(), target);
  }

  // repeated bool is_pruned = 14 [packed = true];
  if (this->_internal_is_pruned_size() > 0) {
    target = stream->WriteFixedPacked(14, _internal_is_pruned(), target);
  }

  // repeated string sum_gh_pair_g_enc = 15;
  for (int i = 0, n = this->_internal_sum_gh_pair_g_enc_size(); i < n; i++) {
    const auto& s = this->_internal_sum_gh_pair_g_enc(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fedtree.NodeEncArray.sum_gh_pair_g_enc");
    target = stream->WriteString(15, s, target);
  }

  // repeated string sum_gh_pair_h_enc = 16;
  for (int i = 0, n = this->_internal_sum_gh_pair_h_enc_size(); i < n; i++) {
    const auto& s = this->_internal_sum_gh_pair_h_enc(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fedtree.NodeEncArray.sum_gh_pair_h_enc");
    target = stream->WriteString(16, s, target);
  }

  // repeated int32 n_instances = 17 [packed = true];
  {
    int byte_size = _n_instances_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          17, _internal_n_instances(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.NodeEncArray)
  return target;
}

size_t NodeEncArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.NodeEncArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 final_id = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->final_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _final_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 lch_index = 2 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->lch_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _lch_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 rch_index = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->rch_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rch_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 parent_index = 4 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->parent_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _parent_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float gain = 5 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_gain_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _gain_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float base_weight = 6 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_base_weight_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _base_weight_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 split_feature_id = 7 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->split_feature_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _split_feature_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 pid = 8 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->pid_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float split_value = 9 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_split_value_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _split_value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 split_bid = 10 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->split_bid_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _split_bid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool default_right = 11 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_default_right_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _default_right_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool is_leaf = 12 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_is_leaf_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _is_leaf_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool is_valid = 13 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_is_valid_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _is_valid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool is_pruned = 14 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_is_pruned_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _is_pruned_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string sum_gh_pair_g_enc = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(sum_gh_pair_g_enc_.size());
  for (int i = 0, n = sum_gh_pair_g_enc_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      sum_gh_pair_g_enc_.Get(i));
  }

  // repeated string sum_gh_pair_h_enc = 16;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(sum_gh_pair_h_enc_.size());
  for (int i = 0, n = sum_gh_pair_h_enc_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      sum_gh_pair_h_enc_.Get(i));
  }

  // repeated int32 n_instances = 17 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->n_instances_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _n_instances_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeEncArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fedtree.NodeEncArray)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeEncArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeEncArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fedtree.NodeEncArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fedtree.NodeEncArray)
    MergeFrom(*source);
  }
}

void NodeEncArray::MergeFrom(const NodeEncArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fedtree.NodeEncArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  final_id_.MergeFrom(from.final_id_);
  lch_index_.MergeFrom(from.lch_index_);
  rch_index_.MergeFrom(from.rch_index_);
  parent_index_.MergeFrom(from.parent_index_);
  gain_.MergeFrom(from.gain_);
  base_weight_.MergeFrom(from.base_weight_);
  split_feature_id_.MergeFrom(from.split_feature_id_);
  pid_.MergeFrom(from.pid_);
  split_value_.MergeFrom(from.split_value_);
  split_bid_.MergeFrom(from.split_bid_);
  default_right_.MergeFrom(from.default_right_);
  is_leaf_.MergeFrom(from.is_leaf_);
  is_valid_.MergeFrom(from.is_valid_);
  is_pruned_.MergeFrom(from.is_pruned_);
  sum_gh_pair_g_enc_.MergeFrom(from.sum_gh_pair_g_enc_);
  sum_gh_pair_h_enc_.MergeFrom(from.sum_gh_pair_h_enc_);
  n_instances_.MergeFrom(from.n_instances_);
}

void NodeEncArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fedtree.NodeEncArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeEncArray::CopyFrom(const NodeEncArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.NodeEncArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeEncArray::IsInitialized() const {
  return true;
}

void NodeEncArray::InternalSwap(NodeEncArray* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  final_id_.InternalSwap(&other->final_id_);
  lch_index_.InternalSwap(&other->lch_index_);
  rch_index_.InternalSwap(&other->rch_index_);
  parent_index_.InternalSwap(&other->parent_index_);
  gain_.InternalSwap(&other->gain_);
  base_weight_.InternalSwap(&other->base_weight_);
  split_feature_id_.InternalSwap(&other->split_feature_id_);
  pid_.InternalSwap(&other->pid_);
  split_value_.InternalSwap(&other->split_value_);
  split_bid_.InternalSwap(&other->split_bid_);
  default_right_.InternalSwap(&other->default_right_);
  is_leaf_.InternalSwap(&other->is_leaf_);
  is_valid_.InternalSwap(&other->is_valid_);
  is_pruned_.InternalSwap(&other->is_pruned_);
  sum_gh_pair_g_enc_.InternalSwap(&other->sum_gh_pair_g_enc_);
  sum_gh_pair_h_enc_.InternalSwap(&other->sum_gh_pair_h_enc_);
  n_instances_.InternalSwap(&other->n_instances_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeEncArray::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodeArray::_Internal {
 public:
};

NodeArray::NodeArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  final_id_(arena),
  lch_index_(arena),
  rch_index_(arena),
  parent_index_(arena),
  gain_(arena),
  base_weight_(arena),
  split_feature_id_(arena),
  pid_(arena),
  split_value_(arena),
  split_bid_(arena),
  default_right_(arena),
  is_leaf_(arena),
  is_valid_(arena),
  is_pruned_(arena),
  sum_gh_pair_g_(arena),
  sum_gh_pair_h_(arena),
  n_instances_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fedtree.NodeArray)
}
NodeArray::NodeArray(const NodeArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      final_id_(from.final_id_),
      lch_index_(from.lch_index_),
      rch_index_(from.rch_index_),
      parent_index_(from.parent_index_),
      gain_(from.gain_),
      base_weight_(from.base_weight_),
      split_feature_id_(from.split_feature_id_),
      pid_(from.pid_),
      split_value_(from.split_value_),
      split_bid_(from.split_bid_),
      default_right_(from.default_right_),
      is_leaf_(from.is_leaf_),
      is_valid_(from.is_valid_),
      is_pruned_(from.is_pruned_),
      sum_gh_pair_g_(from.sum_gh_pair_g_),
      sum_gh_pair_h_(from.sum_gh_pair_h_),
      n_instances_(from.n_instances_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fedtree.NodeArray)
}

void NodeArray::SharedCtor() {
}

NodeArray::~NodeArray() {
  // @@protoc_insertion_point(destructor:fedtree.NodeArray)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NodeArray::ArenaDtor(void* object) {
  NodeArray* _this = reinterpret_cast< NodeArray* >(object);
  (void)_this;
}
void NodeArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeArray& NodeArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeArray_fedtree_2eproto.base);
  return *internal_default_instance();
}


void NodeArray::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.NodeArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  final_id_.Clear();
  lch_index_.Clear();
  rch_index_.Clear();
  parent_index_.Clear();
  gain_.Clear();
  base_weight_.Clear();
  split_feature_id_.Clear();
  pid_.Clear();
  split_value_.Clear();
  split_bid_.Clear();
  default_right_.Clear();
  is_leaf_.Clear();
  is_valid_.Clear();
  is_pruned_.Clear();
  sum_gh_pair_g_.Clear();
  sum_gh_pair_h_.Clear();
  n_instances_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 final_id = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_final_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_final_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 lch_index = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_lch_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_lch_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 rch_index = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_rch_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_rch_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 parent_index = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_parent_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_parent_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float gain = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_gain(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          _internal_add_gain(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float base_weight = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_base_weight(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53) {
          _internal_add_base_weight(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated int32 split_feature_id = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_split_feature_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_split_feature_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 pid = 8 [packed = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_pid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_pid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float split_value = 9 [packed = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_split_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77) {
          _internal_add_split_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated int32 split_bid = 10 [packed = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_split_bid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          _internal_add_split_bid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool default_right = 11 [packed = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_default_right(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88) {
          _internal_add_default_right(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool is_leaf = 12 [packed = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_is_leaf(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96) {
          _internal_add_is_leaf(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool is_valid = 13 [packed = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_is_valid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104) {
          _internal_add_is_valid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool is_pruned = 14 [packed = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_is_pruned(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112) {
          _internal_add_is_pruned(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float sum_gh_pair_g = 15 [packed = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_sum_gh_pair_g(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125) {
          _internal_add_sum_gh_pair_g(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float sum_gh_pair_h = 16 [packed = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_sum_gh_pair_h(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133) {
          _internal_add_sum_gh_pair_h(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated int32 n_instances = 17 [packed = true];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_n_instances(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136) {
          _internal_add_n_instances(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.NodeArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 final_id = 1 [packed = true];
  {
    int byte_size = _final_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_final_id(), byte_size, target);
    }
  }

  // repeated int32 lch_index = 2 [packed = true];
  {
    int byte_size = _lch_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_lch_index(), byte_size, target);
    }
  }

  // repeated int32 rch_index = 3 [packed = true];
  {
    int byte_size = _rch_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_rch_index(), byte_size, target);
    }
  }

  // repeated int32 parent_index = 4 [packed = true];
  {
    int byte_size = _parent_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_parent_index(), byte_size, target);
    }
  }

  // repeated float gain = 5 [packed = true];
  if (this->_internal_gain_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_gain(), target);
  }

  // repeated float base_weight = 6 [packed = true];
  if (this->_internal_base_weight_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_base_weight(), target);
  }

  // repeated int32 split_feature_id = 7 [packed = true];
  {
    int byte_size = _split_feature_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_split_feature_id(), byte_size, target);
    }
  }

  // repeated int32 pid = 8 [packed = true];
  {
    int byte_size = _pid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_pid(), byte_size, target);
    }
  }

  // repeated float split_value = 9 [packed = true];
  if (this->_internal_split_value_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_split_value(), target);
  }

  // repeated int32 split_bid = 10 [packed = true];
  {
    int byte_size = _split_bid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          10, _internal_split_bid(), byte_size, target);
    }
  }

  // repeated bool default_right = 11 [packed = true];
  if (this->_internal_default_right_size() > 0) {
    target = stream->WriteFixedPacked(11, _internal_default_right(), target);
  }

  // repeated bool is_leaf = 12 [packed = true];
  if (this->_internal_is_leaf_size() > 0) {
    target = stream->WriteFixedPacked(12, _internal_is_leaf(), target);
  }

  // repeated bool is_valid = 13 [packed = true];
  if (this->_internal_is_valid_size() > 0) {
    target = stream->WriteFixedPacked(13, _internal_is_valid(), target);
  }

  // repeated bool is_pruned = 14 [packed = true];
  if (this->_internal_is_pruned_size() > 0) {
    target = stream->WriteFixedPacked(14, _internal_is_pruned(), target);
  }

  // repeated float sum_gh_pair_g = 15 [packed = true];
  if (this->_internal_sum_gh_pair_g_size() > 0) {
    target = stream->WriteFixedPacked(15, _internal_sum_gh_pair_g(), target);
  }

  // repeated float sum_gh_pair_h = 16 [packed = true];
  if (this->_internal_sum_gh_pair_h_size() > 0) {
    target = stream->WriteFixedPacked(16, _internal_sum_gh_pair_h(), target);
  }

  // repeated int32 n_instances = 17 [packed = true];
  {
    int byte_size = _n_instances_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          17, _internal_n_instances(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.NodeArray)
  return target;
}

size_t NodeArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.NodeArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 final_id = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->final_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _final_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 lch_index = 2 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->lch_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _lch_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 rch_index = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->rch_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rch_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 parent_index = 4 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->parent_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _parent_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float gain = 5 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_gain_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _gain_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float base_weight = 6 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_base_weight_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _base_weight_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 split_feature_id = 7 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->split_feature_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _split_feature_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 pid = 8 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->pid_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float split_value = 9 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_split_value_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _split_value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 split_bid = 10 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->split_bid_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _split_bid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool default_right = 11 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_default_right_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _default_right_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool is_leaf = 12 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_is_leaf_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _is_leaf_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool is_valid = 13 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_is_valid_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _is_valid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool is_pruned = 14 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_is_pruned_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _is_pruned_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float sum_gh_pair_g = 15 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_sum_gh_pair_g_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sum_gh_pair_g_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float sum_gh_pair_h = 16 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_sum_gh_pair_h_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sum_gh_pair_h_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 n_instances = 17 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->n_instances_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _n_instances_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fedtree.NodeArray)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fedtree.NodeArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fedtree.NodeArray)
    MergeFrom(*source);
  }
}

void NodeArray::MergeFrom(const NodeArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fedtree.NodeArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  final_id_.MergeFrom(from.final_id_);
  lch_index_.MergeFrom(from.lch_index_);
  rch_index_.MergeFrom(from.rch_index_);
  parent_index_.MergeFrom(from.parent_index_);
  gain_.MergeFrom(from.gain_);
  base_weight_.MergeFrom(from.base_weight_);
  split_feature_id_.MergeFrom(from.split_feature_id_);
  pid_.MergeFrom(from.pid_);
  split_value_.MergeFrom(from.split_value_);
  split_bid_.MergeFrom(from.split_bid_);
  default_right_.MergeFrom(from.default_right_);
  is_leaf_.MergeFrom(from.is_leaf_);
  is_valid_.MergeFrom(from.is_valid_);
  is_pruned_.MergeFrom(from.is_pruned_);
  sum_gh_pair_g_.MergeFrom(from.sum_gh_pair_g_);
  sum_gh_pair_h_.MergeFrom(from.sum_gh_pair_h_);
  n_instances_.MergeFrom(from.n_instances_);
}

void NodeArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fedtree.NodeArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeArray::CopyFrom(const NodeArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.NodeArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeArray::IsInitialized() const {
  return true;
}

void NodeArray::InternalSwap(NodeArray* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  final_id_.InternalSwap(&other->final_id_);
  lch_index_.InternalSwap(&other->lch_index_);
  rch_index_.InternalSwap(&other->rch_index_);
  parent_index_.InternalSwap(&other->parent_index_);
  gain_.InternalSwap(&other->gain_);
  base_weight_.InternalSwap(&other->base_weight_);
  split_feature_id_.InternalSwap(&other->split_feature_id_);
  pid_.InternalSwap(&other->pid_);
  split_value_.InternalSwap(&other->split_value_);
  split_bid_.InternalSwap(&other->split_bid_);
  default_right_.InternalSwap(&other->default_right_);
  is_leaf_.InternalSwap(&other->is_leaf_);
  is_valid_.InternalSwap(&other->is_valid_);
  is_pruned_.InternalSwap(&other->is_pruned_);
  sum_gh_pair_g_.InternalSwap(&other->sum_gh_pair_g_);
  sum_gh_pair_h_.InternalSwap(&other->sum_gh_pair_h_);
  n_instances_.InternalSwap(&other->n_instances_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeArray::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Ins2NodeID::_Internal {
 public:
};

Ins2NodeID::Ins2NodeID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fedtree.Ins2NodeID)
}
Ins2NodeID::Ins2NodeID(const Ins2NodeID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&iid_, &from.iid_,
    static_cast<size_t>(reinterpret_cast<char*>(&nid_) -
    reinterpret_cast<char*>(&iid_)) + sizeof(nid_));
  // @@protoc_insertion_point(copy_constructor:fedtree.Ins2NodeID)
}

void Ins2NodeID::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&iid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&nid_) -
      reinterpret_cast<char*>(&iid_)) + sizeof(nid_));
}

Ins2NodeID::~Ins2NodeID() {
  // @@protoc_insertion_point(destructor:fedtree.Ins2NodeID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Ins2NodeID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Ins2NodeID::ArenaDtor(void* object) {
  Ins2NodeID* _this = reinterpret_cast< Ins2NodeID* >(object);
  (void)_this;
}
void Ins2NodeID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ins2NodeID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ins2NodeID& Ins2NodeID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ins2NodeID_fedtree_2eproto.base);
  return *internal_default_instance();
}


void Ins2NodeID::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.Ins2NodeID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&iid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nid_) -
      reinterpret_cast<char*>(&iid_)) + sizeof(nid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ins2NodeID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ins2NodeID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.Ins2NodeID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 iid = 1;
  if (this->iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_iid(), target);
  }

  // int32 nid = 2;
  if (this->nid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_nid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.Ins2NodeID)
  return target;
}

size_t Ins2NodeID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.Ins2NodeID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 iid = 1;
  if (this->iid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iid());
  }

  // int32 nid = 2;
  if (this->nid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ins2NodeID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fedtree.Ins2NodeID)
  GOOGLE_DCHECK_NE(&from, this);
  const Ins2NodeID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ins2NodeID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fedtree.Ins2NodeID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fedtree.Ins2NodeID)
    MergeFrom(*source);
  }
}

void Ins2NodeID::MergeFrom(const Ins2NodeID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fedtree.Ins2NodeID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.iid() != 0) {
    _internal_set_iid(from._internal_iid());
  }
  if (from.nid() != 0) {
    _internal_set_nid(from._internal_nid());
  }
}

void Ins2NodeID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fedtree.Ins2NodeID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ins2NodeID::CopyFrom(const Ins2NodeID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.Ins2NodeID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ins2NodeID::IsInitialized() const {
  return true;
}

void Ins2NodeID::InternalSwap(Ins2NodeID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ins2NodeID, nid_)
      + sizeof(Ins2NodeID::nid_)
      - PROTOBUF_FIELD_OFFSET(Ins2NodeID, iid_)>(
          reinterpret_cast<char*>(&iid_),
          reinterpret_cast<char*>(&other->iid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ins2NodeID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Ins2NodeIDBatch::_Internal {
 public:
};

Ins2NodeIDBatch::Ins2NodeIDBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  iid_(arena),
  nid_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fedtree.Ins2NodeIDBatch)
}
Ins2NodeIDBatch::Ins2NodeIDBatch(const Ins2NodeIDBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      iid_(from.iid_),
      nid_(from.nid_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fedtree.Ins2NodeIDBatch)
}

void Ins2NodeIDBatch::SharedCtor() {
}

Ins2NodeIDBatch::~Ins2NodeIDBatch() {
  // @@protoc_insertion_point(destructor:fedtree.Ins2NodeIDBatch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Ins2NodeIDBatch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Ins2NodeIDBatch::ArenaDtor(void* object) {
  Ins2NodeIDBatch* _this = reinterpret_cast< Ins2NodeIDBatch* >(object);
  (void)_this;
}
void Ins2NodeIDBatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ins2NodeIDBatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ins2NodeIDBatch& Ins2NodeIDBatch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ins2NodeIDBatch_fedtree_2eproto.base);
  return *internal_default_instance();
}


void Ins2NodeIDBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.Ins2NodeIDBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  iid_.Clear();
  nid_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ins2NodeIDBatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 iid = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_iid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_iid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 nid = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_nid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_nid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ins2NodeIDBatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.Ins2NodeIDBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 iid = 1 [packed = true];
  {
    int byte_size = _iid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_iid(), byte_size, target);
    }
  }

  // repeated int32 nid = 2 [packed = true];
  {
    int byte_size = _nid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_nid(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.Ins2NodeIDBatch)
  return target;
}

size_t Ins2NodeIDBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.Ins2NodeIDBatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 iid = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->iid_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _iid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 nid = 2 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->nid_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _nid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ins2NodeIDBatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fedtree.Ins2NodeIDBatch)
  GOOGLE_DCHECK_NE(&from, this);
  const Ins2NodeIDBatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ins2NodeIDBatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fedtree.Ins2NodeIDBatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fedtree.Ins2NodeIDBatch)
    MergeFrom(*source);
  }
}

void Ins2NodeIDBatch::MergeFrom(const Ins2NodeIDBatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fedtree.Ins2NodeIDBatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  iid_.MergeFrom(from.iid_);
  nid_.MergeFrom(from.nid_);
}

void Ins2NodeIDBatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fedtree.Ins2NodeIDBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ins2NodeIDBatch::CopyFrom(const Ins2NodeIDBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.Ins2NodeIDBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ins2NodeIDBatch::IsInitialized() const {
  return true;
}

void Ins2NodeIDBatch::InternalSwap(Ins2NodeIDBatch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  iid_.InternalSwap(&other->iid_);
  nid_.InternalSwap(&other->nid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ins2NodeIDBatch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DHPublicKey::_Internal {
 public:
};

DHPublicKey::DHPublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fedtree.DHPublicKey)
}
DHPublicKey::DHPublicKey(const DHPublicKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pk().empty()) {
    pk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pk(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fedtree.DHPublicKey)
}

void DHPublicKey::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DHPublicKey_fedtree_2eproto.base);
  pk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DHPublicKey::~DHPublicKey() {
  // @@protoc_insertion_point(destructor:fedtree.DHPublicKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DHPublicKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DHPublicKey::ArenaDtor(void* object) {
  DHPublicKey* _this = reinterpret_cast< DHPublicKey* >(object);
  (void)_this;
}
void DHPublicKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DHPublicKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DHPublicKey& DHPublicKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DHPublicKey_fedtree_2eproto.base);
  return *internal_default_instance();
}


void DHPublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.DHPublicKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pk_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DHPublicKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fedtree.DHPublicKey.pk"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DHPublicKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.DHPublicKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pk = 1;
  if (this->pk().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pk().data(), static_cast<int>(this->_internal_pk().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fedtree.DHPublicKey.pk");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.DHPublicKey)
  return target;
}

size_t DHPublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.DHPublicKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pk = 1;
  if (this->pk().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pk());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DHPublicKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fedtree.DHPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  const DHPublicKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DHPublicKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fedtree.DHPublicKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fedtree.DHPublicKey)
    MergeFrom(*source);
  }
}

void DHPublicKey::MergeFrom(const DHPublicKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fedtree.DHPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pk().size() > 0) {
    _internal_set_pk(from._internal_pk());
  }
}

void DHPublicKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fedtree.DHPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DHPublicKey::CopyFrom(const DHPublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.DHPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DHPublicKey::IsInitialized() const {
  return true;
}

void DHPublicKey::InternalSwap(DHPublicKey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pk_.Swap(&other->pk_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DHPublicKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DHPublicKeys::_Internal {
 public:
};

DHPublicKeys::DHPublicKeys(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pk_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fedtree.DHPublicKeys)
}
DHPublicKeys::DHPublicKeys(const DHPublicKeys& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pk_(from.pk_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fedtree.DHPublicKeys)
}

void DHPublicKeys::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DHPublicKeys_fedtree_2eproto.base);
}

DHPublicKeys::~DHPublicKeys() {
  // @@protoc_insertion_point(destructor:fedtree.DHPublicKeys)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DHPublicKeys::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DHPublicKeys::ArenaDtor(void* object) {
  DHPublicKeys* _this = reinterpret_cast< DHPublicKeys* >(object);
  (void)_this;
}
void DHPublicKeys::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DHPublicKeys::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DHPublicKeys& DHPublicKeys::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DHPublicKeys_fedtree_2eproto.base);
  return *internal_default_instance();
}


void DHPublicKeys::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.DHPublicKeys)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pk_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DHPublicKeys::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string pk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_pk();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fedtree.DHPublicKeys.pk"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DHPublicKeys::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.DHPublicKeys)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string pk = 1;
  for (int i = 0, n = this->_internal_pk_size(); i < n; i++) {
    const auto& s = this->_internal_pk(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fedtree.DHPublicKeys.pk");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.DHPublicKeys)
  return target;
}

size_t DHPublicKeys::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.DHPublicKeys)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string pk = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(pk_.size());
  for (int i = 0, n = pk_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      pk_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DHPublicKeys::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fedtree.DHPublicKeys)
  GOOGLE_DCHECK_NE(&from, this);
  const DHPublicKeys* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DHPublicKeys>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fedtree.DHPublicKeys)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fedtree.DHPublicKeys)
    MergeFrom(*source);
  }
}

void DHPublicKeys::MergeFrom(const DHPublicKeys& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fedtree.DHPublicKeys)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pk_.MergeFrom(from.pk_);
}

void DHPublicKeys::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fedtree.DHPublicKeys)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DHPublicKeys::CopyFrom(const DHPublicKeys& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.DHPublicKeys)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DHPublicKeys::IsInitialized() const {
  return true;
}

void DHPublicKeys::InternalSwap(DHPublicKeys* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pk_.InternalSwap(&other->pk_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DHPublicKeys::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SANoise::_Internal {
 public:
};

SANoise::SANoise(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fedtree.SANoise)
}
SANoise::SANoise(const SANoise& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  noise_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_noise().empty()) {
    noise_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_noise(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fedtree.SANoise)
}

void SANoise::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SANoise_fedtree_2eproto.base);
  noise_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SANoise::~SANoise() {
  // @@protoc_insertion_point(destructor:fedtree.SANoise)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SANoise::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  noise_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SANoise::ArenaDtor(void* object) {
  SANoise* _this = reinterpret_cast< SANoise* >(object);
  (void)_this;
}
void SANoise::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SANoise::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SANoise& SANoise::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SANoise_fedtree_2eproto.base);
  return *internal_default_instance();
}


void SANoise::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.SANoise)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  noise_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SANoise::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string noise = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_noise();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fedtree.SANoise.noise"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SANoise::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.SANoise)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string noise = 1;
  if (this->noise().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_noise().data(), static_cast<int>(this->_internal_noise().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fedtree.SANoise.noise");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_noise(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.SANoise)
  return target;
}

size_t SANoise::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.SANoise)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string noise = 1;
  if (this->noise().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_noise());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SANoise::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fedtree.SANoise)
  GOOGLE_DCHECK_NE(&from, this);
  const SANoise* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SANoise>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fedtree.SANoise)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fedtree.SANoise)
    MergeFrom(*source);
  }
}

void SANoise::MergeFrom(const SANoise& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fedtree.SANoise)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.noise().size() > 0) {
    _internal_set_noise(from._internal_noise());
  }
}

void SANoise::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fedtree.SANoise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SANoise::CopyFrom(const SANoise& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.SANoise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SANoise::IsInitialized() const {
  return true;
}

void SANoise::InternalSwap(SANoise* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  noise_.Swap(&other->noise_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SANoise::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SANoises::_Internal {
 public:
};

SANoises::SANoises(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  noises_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fedtree.SANoises)
}
SANoises::SANoises(const SANoises& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      noises_(from.noises_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fedtree.SANoises)
}

void SANoises::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SANoises_fedtree_2eproto.base);
}

SANoises::~SANoises() {
  // @@protoc_insertion_point(destructor:fedtree.SANoises)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SANoises::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SANoises::ArenaDtor(void* object) {
  SANoises* _this = reinterpret_cast< SANoises* >(object);
  (void)_this;
}
void SANoises::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SANoises::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SANoises& SANoises::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SANoises_fedtree_2eproto.base);
  return *internal_default_instance();
}


void SANoises::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.SANoises)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  noises_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SANoises::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string noises = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_noises();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fedtree.SANoises.noises"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SANoises::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.SANoises)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string noises = 1;
  for (int i = 0, n = this->_internal_noises_size(); i < n; i++) {
    const auto& s = this->_internal_noises(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fedtree.SANoises.noises");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.SANoises)
  return target;
}

size_t SANoises::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.SANoises)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string noises = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(noises_.size());
  for (int i = 0, n = noises_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      noises_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SANoises::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fedtree.SANoises)
  GOOGLE_DCHECK_NE(&from, this);
  const SANoises* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SANoises>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fedtree.SANoises)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fedtree.SANoises)
    MergeFrom(*source);
  }
}

void SANoises::MergeFrom(const SANoises& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fedtree.SANoises)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  noises_.MergeFrom(from.noises_);
}

void SANoises::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fedtree.SANoises)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SANoises::CopyFrom(const SANoises& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.SANoises)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SANoises::IsInitialized() const {
  return true;
}

void SANoises::InternalSwap(SANoises* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  noises_.InternalSwap(&other->noises_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SANoises::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CutPoints::_Internal {
 public:
};

CutPoints::CutPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cut_points_val_(arena),
  cut_col_ptr_(arena),
  cut_fid_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fedtree.CutPoints)
}
CutPoints::CutPoints(const CutPoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cut_points_val_(from.cut_points_val_),
      cut_col_ptr_(from.cut_col_ptr_),
      cut_fid_(from.cut_fid_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fedtree.CutPoints)
}

void CutPoints::SharedCtor() {
}

CutPoints::~CutPoints() {
  // @@protoc_insertion_point(destructor:fedtree.CutPoints)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CutPoints::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CutPoints::ArenaDtor(void* object) {
  CutPoints* _this = reinterpret_cast< CutPoints* >(object);
  (void)_this;
}
void CutPoints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CutPoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CutPoints& CutPoints::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CutPoints_fedtree_2eproto.base);
  return *internal_default_instance();
}


void CutPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.CutPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cut_points_val_.Clear();
  cut_col_ptr_.Clear();
  cut_fid_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CutPoints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double cut_points_val = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_cut_points_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_cut_points_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated int32 cut_col_ptr = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_cut_col_ptr(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_cut_col_ptr(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 cut_fid = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_cut_fid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_cut_fid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CutPoints::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.CutPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double cut_points_val = 1 [packed = true];
  if (this->_internal_cut_points_val_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_cut_points_val(), target);
  }

  // repeated int32 cut_col_ptr = 2 [packed = true];
  {
    int byte_size = _cut_col_ptr_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_cut_col_ptr(), byte_size, target);
    }
  }

  // repeated int32 cut_fid = 3 [packed = true];
  {
    int byte_size = _cut_fid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_cut_fid(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.CutPoints)
  return target;
}

size_t CutPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.CutPoints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double cut_points_val = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_cut_points_val_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _cut_points_val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 cut_col_ptr = 2 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->cut_col_ptr_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _cut_col_ptr_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 cut_fid = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->cut_fid_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _cut_fid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CutPoints::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fedtree.CutPoints)
  GOOGLE_DCHECK_NE(&from, this);
  const CutPoints* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CutPoints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fedtree.CutPoints)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fedtree.CutPoints)
    MergeFrom(*source);
  }
}

void CutPoints::MergeFrom(const CutPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fedtree.CutPoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cut_points_val_.MergeFrom(from.cut_points_val_);
  cut_col_ptr_.MergeFrom(from.cut_col_ptr_);
  cut_fid_.MergeFrom(from.cut_fid_);
}

void CutPoints::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fedtree.CutPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CutPoints::CopyFrom(const CutPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.CutPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CutPoints::IsInitialized() const {
  return true;
}

void CutPoints::InternalSwap(CutPoints* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cut_points_val_.InternalSwap(&other->cut_points_val_);
  cut_col_ptr_.InternalSwap(&other->cut_col_ptr_);
  cut_fid_.InternalSwap(&other->cut_fid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CutPoints::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fedtree
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fedtree::FIDBatch* Arena::CreateMaybeMessage< ::fedtree::FIDBatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::FIDBatch >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::GHBatch* Arena::CreateMaybeMessage< ::fedtree::GHBatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::GHBatch >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::GHEncBatch* Arena::CreateMaybeMessage< ::fedtree::GHEncBatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::GHEncBatch >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::GHPair* Arena::CreateMaybeMessage< ::fedtree::GHPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::GHPair >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::GHArray* Arena::CreateMaybeMessage< ::fedtree::GHArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::GHArray >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::GHPairEnc* Arena::CreateMaybeMessage< ::fedtree::GHPairEnc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::GHPairEnc >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::Paillier* Arena::CreateMaybeMessage< ::fedtree::Paillier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::Paillier >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::SplitPoint* Arena::CreateMaybeMessage< ::fedtree::SplitPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::SplitPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::Score* Arena::CreateMaybeMessage< ::fedtree::Score >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::Score >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::PID* Arena::CreateMaybeMessage< ::fedtree::PID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::PID >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::Ready* Arena::CreateMaybeMessage< ::fedtree::Ready >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::Ready >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::DatasetInfo* Arena::CreateMaybeMessage< ::fedtree::DatasetInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::DatasetInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::FID* Arena::CreateMaybeMessage< ::fedtree::FID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::FID >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::BestInfo* Arena::CreateMaybeMessage< ::fedtree::BestInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::BestInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::NodeEnc* Arena::CreateMaybeMessage< ::fedtree::NodeEnc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::NodeEnc >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::Node* Arena::CreateMaybeMessage< ::fedtree::Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::NodeEncArray* Arena::CreateMaybeMessage< ::fedtree::NodeEncArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::NodeEncArray >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::NodeArray* Arena::CreateMaybeMessage< ::fedtree::NodeArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::NodeArray >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::Ins2NodeID* Arena::CreateMaybeMessage< ::fedtree::Ins2NodeID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::Ins2NodeID >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::Ins2NodeIDBatch* Arena::CreateMaybeMessage< ::fedtree::Ins2NodeIDBatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::Ins2NodeIDBatch >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::DHPublicKey* Arena::CreateMaybeMessage< ::fedtree::DHPublicKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::DHPublicKey >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::DHPublicKeys* Arena::CreateMaybeMessage< ::fedtree::DHPublicKeys >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::DHPublicKeys >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::SANoise* Arena::CreateMaybeMessage< ::fedtree::SANoise >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::SANoise >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::SANoises* Arena::CreateMaybeMessage< ::fedtree::SANoises >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::SANoises >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::CutPoints* Arena::CreateMaybeMessage< ::fedtree::CutPoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::CutPoints >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
